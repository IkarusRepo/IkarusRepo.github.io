<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="a00017" kind="file" language="C++">
    <compoundname>traversal.hh</compoundname>
    <includes refid="a03012" local="no">ikarus/utils/concepts.hh</includes>
    <includedby refid="a00308" local="no">fehelper.hh</includedby>
    <includedby refid="a00050" local="no">functionhelper.hh</includedby>
    <incdepgraph>
      <node id="12">
        <label>ikarus/assembler/dirichletbcenforcement.hh</label>
        <link refid="a00176"/>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>ikarus/finiteelements/mechanics/materials/tags.hh</label>
        <link refid="a00242"/>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>ikarus/utils/concepts.hh</label>
        <link refid="a03012"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>ikarus/utils/makeenum.hh</label>
        <link refid="a00005"/>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>ikarus/utils/traits.hh</label>
        <link refid="a00011"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>traversal.hh</label>
        <link refid="a00017"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>Eigen/Dense</label>
      </node>
      <node id="10">
        <label>Eigen/Sparse</label>
      </node>
      <node id="11">
        <label>autodiff/forward/dual/dual.hpp</label>
      </node>
      <node id="3">
        <label>concepts</label>
      </node>
      <node id="14">
        <label>dune/common/exceptions.hh</label>
      </node>
      <node id="19">
        <label>dune/common/hybridutilities.hh</label>
      </node>
      <node id="7">
        <label>dune/functions/functionspacebases/basistags.hh</label>
      </node>
      <node id="8">
        <label>dune/functions/functionspacebases/lagrangebasis.hh</label>
      </node>
      <node id="17">
        <label>functional</label>
      </node>
      <node id="18">
        <label>tuple</label>
      </node>
      <node id="4">
        <label>type_traits</label>
      </node>
      <node id="5">
        <label>utility</label>
      </node>
      <node id="6">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="3">
        <label>assemblermanipulatorbuildingblocks.hh</label>
        <link refid="a00164"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>assemblermanipulatorfuser.hh</label>
        <link refid="a00173"/>
      </node>
      <node id="6">
        <label>interface.hh</label>
        <link refid="a02976"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>simpleassemblers.hh</label>
        <link refid="a00170"/>
      </node>
      <node id="2">
        <label>fehelper.hh</label>
        <link refid="a00308"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>enhancedassumedstrains.hh</label>
        <link refid="a00281"/>
      </node>
      <node id="8">
        <label>kirchhoffloveshell.hh</label>
        <link refid="a00299"/>
      </node>
      <node id="9">
        <label>linearelastic.hh</label>
        <link refid="a00293"/>
      </node>
      <node id="10">
        <label>nonlinearelastic.hh</label>
        <link refid="a00239"/>
      </node>
      <node id="11">
        <label>truss.hh</label>
        <link refid="a00284"/>
      </node>
      <node id="12">
        <label>functionhelper.hh</label>
        <link refid="a00050"/>
      </node>
      <node id="1">
        <label>traversal.hh</label>
        <link refid="a00017"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innernamespace refid="a00396">Ikarus</innernamespace>
    <innernamespace refid="a00416">Ikarus::utils</innernamespace>
    <briefdescription>
<para>Contains functions to traverse through a tree to its different nodes. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>SPDX-FileCopyrightText:<sp/>2021-2025<sp/>The<sp/>Ikarus<sp/>Developers<sp/>mueller@ibb.uni-stuttgart.de</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPDX-License-Identifier:<sp/>LGPL-3.0-or-later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="a03012" kindref="compound">ikarus/utils/concepts.hh</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="a00416" kindref="compound">Ikarus::utils</ref><sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TreePath,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>PowerFunc,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>LeafFunc&gt;</highlight></codeline>
<codeline lineno="31" refid="a00416_1a63742d75d099b93da7ddf6e78a3c1f56" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a00416_1a63742d75d099b93da7ddf6e78a3c1f56" kindref="member">forEachLeafOrPowerLeafNode</ref>(T&amp;&amp;<sp/>tree,<sp/>TreePath&amp;&amp;<sp/>treePath,<sp/>PowerFunc&amp;&amp;<sp/>powerFunc,<sp/>LeafFunc&amp;&amp;<sp/>leafFunc)<sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Tree<sp/>=<sp/>std::decay_t&lt;T&gt;;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(Tree::isLeaf)<sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>leafFunc(tree,<sp/>treePath);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(Tree::isPower)<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(Tree::template<sp/>Child&lt;Dune::Indices::_0&gt;::Type::isLeaf)<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>powerFunc(tree,<sp/>treePath);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>tree.degree();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>childTreePath<sp/>=<sp/>Dune::TypeTree::push_back(treePath,<sp/>i);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00416_1a63742d75d099b93da7ddf6e78a3c1f56" kindref="member">forEachLeafOrPowerLeafNode</ref>(tree.child(i),<sp/>childTreePath,<sp/>powerFunc,<sp/>leafFunc);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>indices<sp/>=<sp/>std::make_index_sequence&lt;Tree::degree()&gt;{};</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>Dune::Hybrid::forEach(indices,<sp/>[&amp;](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>childTreePath<sp/>=<sp/>Dune::TypeTree::push_back(treePath,<sp/>i);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00416_1a63742d75d099b93da7ddf6e78a3c1f56" kindref="member">forEachLeafOrPowerLeafNode</ref>(tree.child(i),<sp/>childTreePath,<sp/>powerFunc,<sp/>leafFunc);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="normal">}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>LV,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>LV::Element::Geometry::coorddimension&gt;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(std::convertible_to&lt;F,<sp/>std::function&lt;bool(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/><ref refid="a01867" kindref="compound">Dune::FieldVector&lt;double, size&gt;</ref><sp/>&amp;&amp;)&gt;&gt;)</highlight></codeline>
<codeline lineno="65" refid="a00416_1a9bfdb235951b98b7a214704baf9c6f95" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a00416_1a9bfdb235951b98b7a214704baf9c6f95" kindref="member">forEachLagrangeNodePosition</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LV&amp;<sp/>localView,<sp/>F&amp;&amp;<sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(<ref refid="a02030" kindref="compound">Concepts::LagrangeNode</ref>&lt;std::remove_cvref_t&lt;</highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(localView.tree().child(0))&gt;&gt;,</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;forEachLagrangeNodePosition<sp/>is<sp/>only<sp/>supported<sp/>for<sp/>Lagrange<sp/>power<sp/>basis&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>assert(localView.bound()<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>local<sp/>view<sp/>must<sp/>be<sp/>bound<sp/>to<sp/>an<sp/>element&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>localFE<sp/>=<sp/>localView.tree().child(0).finiteElement();</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>std::vector&lt;Dune::FieldVector&lt;double,<sp/>size&gt;&gt;<sp/>lagrangeNodeCoords;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>lagrangeNodeCoords.resize(localFE.size());</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>std::vector&lt;double&gt;<sp/>out;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ithCoord<sp/>=<sp/>[&amp;i](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01867" kindref="compound">Dune::FieldVector&lt;double, size&gt;</ref>&amp;<sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x[i];<sp/>};</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>localFE.localInterpolation().interpolate(ithCoord,<sp/>out);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>out.size();<sp/>j++)</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lagrangeNodeCoords[j][i]<sp/>=<sp/>out[j];</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nodeNumber<sp/>=<sp/>0;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>nCoord<sp/>:<sp/>lagrangeNodeCoords)</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f(nodeNumber++,<sp/>std::move(nCoord)))</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="82"><highlight class="normal">}</highlight></codeline>
<codeline lineno="83"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Ikarus::utils</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/__w/ikarus/ikarus/repo/ikarus/utils/traversal.hh"/>
  </compounddef>
</doxygen>
