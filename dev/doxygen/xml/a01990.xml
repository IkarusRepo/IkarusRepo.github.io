<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="a01990" kind="class" language="C++" prot="public">
    <compoundname>Ikarus::ControlSubsamplingVertexVTKWriter</compoundname>
    <basecompoundref refid="a02002" prot="public" virt="non-virtual">Ikarus::IObserver&lt; ControlMessages &gt;</basecompoundref>
    <includes refid="a00179" local="no">ikarus/utils/observer/controlvtkwriter.hh</includes>
    <templateparamlist>
      <param>
        <type>typename B</type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="a01990_1a5417a850be09423f9cf1ad7be64a0e45" prot="private" static="no">
        <type>B</type>
        <definition>using Ikarus::ControlSubsamplingVertexVTKWriter&lt; B &gt;::Basis =  B</definition>
        <argsstring></argsstring>
        <name>Basis</name>
        <qualifiedname>Ikarus::ControlSubsamplingVertexVTKWriter::Basis</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/controlvtkwriter.hh" line="33" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/controlvtkwriter.hh" bodystart="33" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="a01990_1afd29ff31121aaca853a1882066f7788a" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>constexpr int</type>
        <definition>constexpr int Ikarus::ControlSubsamplingVertexVTKWriter&lt; B &gt;::components</definition>
        <argsstring></argsstring>
        <name>components</name>
        <qualifiedname>Ikarus::ControlSubsamplingVertexVTKWriter::components</qualifiedname>
        <initializer>= Basis::LocalView::Tree::degree() == 0 ? 1 : Basis::LocalView::Tree::degree()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/controlvtkwriter.hh" line="34" column="24" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/controlvtkwriter.hh" bodystart="34" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="a01990_1ab42c786a31afe1511aa10250520a21e3" prot="private" static="no" mutable="no">
        <type>const Basis *</type>
        <definition>const Basis* Ikarus::ControlSubsamplingVertexVTKWriter&lt; B &gt;::basis_</definition>
        <argsstring></argsstring>
        <name>basis_</name>
        <qualifiedname>Ikarus::ControlSubsamplingVertexVTKWriter::basis_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/controlvtkwriter.hh" line="96" column="15" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/controlvtkwriter.hh" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a01990_1af281530012d33ee72c5bcd02b5d1560f" prot="private" static="no" mutable="no">
        <type>Dune::SubsamplingVTKWriter&lt; typename Basis::GridView &gt;</type>
        <definition>Dune::SubsamplingVTKWriter&lt;typename Basis::GridView&gt; Ikarus::ControlSubsamplingVertexVTKWriter&lt; B &gt;::vtkWriter_</definition>
        <argsstring></argsstring>
        <name>vtkWriter_</name>
        <qualifiedname>Ikarus::ControlSubsamplingVertexVTKWriter::vtkWriter_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/controlvtkwriter.hh" line="97" column="30" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/controlvtkwriter.hh" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a01990_1a61930469efd58c855dc29786edea1b76" prot="private" static="no" mutable="no">
        <type>const Eigen::VectorXd *</type>
        <definition>const Eigen::VectorXd* Ikarus::ControlSubsamplingVertexVTKWriter&lt; B &gt;::solution_</definition>
        <argsstring></argsstring>
        <name>solution_</name>
        <qualifiedname>Ikarus::ControlSubsamplingVertexVTKWriter::solution_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/controlvtkwriter.hh" line="98" column="25" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/controlvtkwriter.hh" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a01990_1ab5f4e544a049a3a4e2f6d5e1e445ea03" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int Ikarus::ControlSubsamplingVertexVTKWriter&lt; B &gt;::step_</definition>
        <argsstring></argsstring>
        <name>step_</name>
        <qualifiedname>Ikarus::ControlSubsamplingVertexVTKWriter::step_</qualifiedname>
        <initializer>{0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/controlvtkwriter.hh" line="99" column="7" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/controlvtkwriter.hh" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a01990_1a8b979e455018762147237e7bcc0dce29" prot="private" static="no" mutable="no">
        <type>Dune::VTK::FieldInfo</type>
        <definition>Dune::VTK::FieldInfo Ikarus::ControlSubsamplingVertexVTKWriter&lt; B &gt;::fieldInfo_</definition>
        <argsstring></argsstring>
        <name>fieldInfo_</name>
        <qualifiedname>Ikarus::ControlSubsamplingVertexVTKWriter::fieldInfo_</qualifiedname>
        <initializer>{&quot;Default&quot;, Dune::VTK::FieldInfo::Type::scalar, 1}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/controlvtkwriter.hh" line="100" column="24" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/controlvtkwriter.hh" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a01990_1ad2a4c8b5c1a3c7becb4e6a0ad117fed8" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string Ikarus::ControlSubsamplingVertexVTKWriter&lt; B &gt;::prefixString_</definition>
        <argsstring></argsstring>
        <name>prefixString_</name>
        <qualifiedname>Ikarus::ControlSubsamplingVertexVTKWriter::prefixString_</qualifiedname>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/controlvtkwriter.hh" line="101" column="15" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/controlvtkwriter.hh" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a01990_1aeb1a874b0cecc5ff6eb7be8a130d2a0d" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Ikarus::ControlSubsamplingVertexVTKWriter&lt; B &gt;::isFieldInfoSet_</definition>
        <argsstring></argsstring>
        <name>isFieldInfoSet_</name>
        <qualifiedname>Ikarus::ControlSubsamplingVertexVTKWriter::isFieldInfoSet_</qualifiedname>
        <initializer>{false}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/controlvtkwriter.hh" line="102" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/controlvtkwriter.hh" bodystart="102" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="a01990_1a1e07865751a32e0a1dd29e8f001babc3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Ikarus::ControlSubsamplingVertexVTKWriter&lt; B &gt;::ControlSubsamplingVertexVTKWriter</definition>
        <argsstring>(const Basis &amp;basis, const Eigen::VectorXd &amp;sol, int refinementLevels=0)</argsstring>
        <name>ControlSubsamplingVertexVTKWriter</name>
        <qualifiedname>Ikarus::ControlSubsamplingVertexVTKWriter::ControlSubsamplingVertexVTKWriter</qualifiedname>
        <param>
          <type>const Basis &amp;</type>
          <declname>basis</declname>
        </param>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>int</type>
          <declname>refinementLevels</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Constructor for <ref refid="a01990" kindref="compound">ControlSubsamplingVertexVTKWriter</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Initializes the VTK writer with the provided basis, solution, and refinement levels.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>basis</parametername>
</parameternamelist>
<parameterdescription>
<para>The grid basis. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sol</parametername>
</parameternamelist>
<parameterdescription>
<para>The solution vector. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>refinementLevels</parametername>
</parameternamelist>
<parameterdescription>
<para>The refinement levels for subsampling. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/controlvtkwriter.hh" line="46" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/controlvtkwriter.hh" bodystart="46" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="a01990_1afec0c3fe2aa8cac3e9970d8c9720c219" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto Ikarus::ControlSubsamplingVertexVTKWriter&lt; B &gt;::setFieldInfo</definition>
        <argsstring>(std::string &amp;&amp;name, Dune::VTK::FieldInfo::Type type, std::size_t size, Dune::VTK::Precision prec=Dune::VTK::Precision::float32)</argsstring>
        <name>setFieldInfo</name>
        <qualifiedname>Ikarus::ControlSubsamplingVertexVTKWriter::setFieldInfo</qualifiedname>
        <param>
          <type>std::string &amp;&amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>Dune::VTK::FieldInfo::Type</type>
          <declname>type</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>Dune::VTK::Precision</type>
          <declname>prec</declname>
          <defval>Dune::VTK::Precision::float32</defval>
        </param>
        <briefdescription>
<para>Set field information for the VTK file. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the field. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the field. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the field. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prec</parametername>
</parameternamelist>
<parameterdescription>
<para>The precision of the field. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The field information. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/controlvtkwriter.hh" line="60" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/controlvtkwriter.hh" bodystart="60" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="a01990_1a8061e516e4c6626a2f6ea160e692e4e1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto Ikarus::ControlSubsamplingVertexVTKWriter&lt; B &gt;::setFileNamePrefix</definition>
        <argsstring>(std::string &amp;&amp;name)</argsstring>
        <name>setFileNamePrefix</name>
        <qualifiedname>Ikarus::ControlSubsamplingVertexVTKWriter::setFileNamePrefix</qualifiedname>
        <param>
          <type>std::string &amp;&amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Set the file name prefix for VTK files. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The file name prefix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/controlvtkwriter.hh" line="71" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/controlvtkwriter.hh" bodystart="71" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="a01990_1a72b675b3fb4b0b2989b315e2a0337e44" prot="public" static="no" const="no" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>void</type>
        <definition>void Ikarus::ControlSubsamplingVertexVTKWriter&lt; B &gt;::updateImpl</definition>
        <argsstring>(ControlMessages message) final</argsstring>
        <name>updateImpl</name>
        <qualifiedname>Ikarus::ControlSubsamplingVertexVTKWriter::updateImpl</qualifiedname>
        <reimplements refid="a02002_1ac6dc170df122bd224f2a440cedf33934">updateImpl</reimplements>
        <param>
          <type><ref refid="a00405_1ga35fa62fd2d4186a9750af3d0692f2893" kindref="member">ControlMessages</ref></type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>Implementation of the update method. </para>
        </briefdescription>
        <detaileddescription>
<para>This method is called upon receiving a SOLUTION_CHANGED control message. It writes VTK files with subsampling based on the provided field information.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The received control message. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/controlvtkwriter.hh" line="81" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/controlvtkwriter.hh" bodystart="81" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="a02002_1aafa35019b0bd7577d9e5b2c209c785bd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObserver&lt; ControlMessages  &gt;::update</definition>
        <argsstring>(MessageType message)</argsstring>
        <name>update</name>
        <qualifiedname>Ikarus::IObserver&lt; ControlMessages &gt;::update</qualifiedname>
        <param>
          <type><ref refid="a00405_1ga35fa62fd2d4186a9750af3d0692f2893" kindref="member">MessageType</ref></type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>Update method for receiving notifications with a message. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The message to be received. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="36" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="36" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="a02002_1a3a477ef465bf14acd9e21673e2bfc595" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObserver&lt; ControlMessages  &gt;::update</definition>
        <argsstring>(MessageType message, double val)</argsstring>
        <name>update</name>
        <qualifiedname>Ikarus::IObserver&lt; ControlMessages &gt;::update</qualifiedname>
        <param>
          <type><ref refid="a00405_1ga35fa62fd2d4186a9750af3d0692f2893" kindref="member">MessageType</ref></type>
          <declname>message</declname>
        </param>
        <param>
          <type>double</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Update method for receiving notifications with a message and a double value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The message to be received. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The double value associated with the message. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="46" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="46" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="a02002_1a9ec023872625942d0b64244709966464" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObserver&lt; ControlMessages  &gt;::update</definition>
        <argsstring>(MessageType message, int val)</argsstring>
        <name>update</name>
        <qualifiedname>Ikarus::IObserver&lt; ControlMessages &gt;::update</qualifiedname>
        <param>
          <type><ref refid="a00405_1ga35fa62fd2d4186a9750af3d0692f2893" kindref="member">MessageType</ref></type>
          <declname>message</declname>
        </param>
        <param>
          <type>int</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Update method for receiving notifications with a message and an integer value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The message to be received. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The integer value associated with the message. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="56" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="56" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="a02002_1aaa06f0740f435636da206c35951f8c81" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObserver&lt; ControlMessages  &gt;::update</definition>
        <argsstring>(MessageType message, const std::string &amp;val)</argsstring>
        <name>update</name>
        <qualifiedname>Ikarus::IObserver&lt; ControlMessages &gt;::update</qualifiedname>
        <param>
          <type><ref refid="a00405_1ga35fa62fd2d4186a9750af3d0692f2893" kindref="member">MessageType</ref></type>
          <declname>message</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Update method for receiving notifications with a message and a string value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The message to be received. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The string value associated with the message. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="66" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="66" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="a02002_1a92045cc1701c89ac62395a8e77ff3eba" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObserver&lt; ControlMessages  &gt;::update</definition>
        <argsstring>(MessageType message, int val1, double val2)</argsstring>
        <name>update</name>
        <qualifiedname>Ikarus::IObserver&lt; ControlMessages &gt;::update</qualifiedname>
        <param>
          <type><ref refid="a00405_1ga35fa62fd2d4186a9750af3d0692f2893" kindref="member">MessageType</ref></type>
          <declname>message</declname>
        </param>
        <param>
          <type>int</type>
          <declname>val1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>val2</declname>
        </param>
        <briefdescription>
<para>Update method for receiving notifications with a message and two values (integer and double). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The message to be received. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val1</parametername>
</parameternamelist>
<parameterdescription>
<para>The integer value associated with the message. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val2</parametername>
</parameternamelist>
<parameterdescription>
<para>The double value associated with the message. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="77" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="77" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="a02002_1a04b8667b08713503e82ede950a337950" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObserver&lt; ControlMessages  &gt;::update</definition>
        <argsstring>(MessageType message, int val1, const std::string &amp;val2)</argsstring>
        <name>update</name>
        <qualifiedname>Ikarus::IObserver&lt; ControlMessages &gt;::update</qualifiedname>
        <param>
          <type><ref refid="a00405_1ga35fa62fd2d4186a9750af3d0692f2893" kindref="member">MessageType</ref></type>
          <declname>message</declname>
        </param>
        <param>
          <type>int</type>
          <declname>val1</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>val2</declname>
        </param>
        <briefdescription>
<para>Update method for receiving notifications with a message, an integer value, and a string value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The message to be received. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val1</parametername>
</parameternamelist>
<parameterdescription>
<para>The integer value associated with the message. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val2</parametername>
</parameternamelist>
<parameterdescription>
<para>The string value associated with the message. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="88" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="88" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="a02002_1a1d1ef2313a9aecf4e9d475cce837476e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObserver&lt; ControlMessages  &gt;::update</definition>
        <argsstring>(MessageType message, const Eigen::VectorXd &amp;vec)</argsstring>
        <name>update</name>
        <qualifiedname>Ikarus::IObserver&lt; ControlMessages &gt;::update</qualifiedname>
        <param>
          <type><ref refid="a00405_1ga35fa62fd2d4186a9750af3d0692f2893" kindref="member">MessageType</ref></type>
          <declname>message</declname>
        </param>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
<para>Update method for receiving notifications with a message and an Eigen::VectorXd. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The message to be received. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vec</parametername>
</parameternamelist>
<parameterdescription>
<para>The Eigen::VectorXd associated with the message. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="98" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="98" bodyend="101"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="a02002_1adc6a89c0396fc98e0c095cd8df17b075" prot="public" static="no">
        <type><ref refid="a00405_1ga35fa62fd2d4186a9750af3d0692f2893" kindref="member">ControlMessages</ref></type>
        <definition>using Ikarus::IObserver&lt; ControlMessages  &gt;::MessageType =  ControlMessages</definition>
        <argsstring></argsstring>
        <name>MessageType</name>
        <qualifiedname>Ikarus::IObserver&lt; ControlMessages &gt;::MessageType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="28" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="28" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="a02002_1a80d3fd9872a76a02452f42511f780253" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void Ikarus::IObserver&lt; ControlMessages  &gt;::updateImpl</definition>
        <argsstring>(MessageType message, double val)</argsstring>
        <name>updateImpl</name>
        <qualifiedname>Ikarus::IObserver&lt; ControlMessages &gt;::updateImpl</qualifiedname>
        <param>
          <type><ref refid="a00405_1ga35fa62fd2d4186a9750af3d0692f2893" kindref="member">MessageType</ref></type>
          <declname>message</declname>
        </param>
        <param>
          <type>double</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="105" column="16" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="105" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="a02002_1a873494234cf33b9cc7179d90ff6f095e" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void Ikarus::IObserver&lt; ControlMessages  &gt;::updateImpl</definition>
        <argsstring>(MessageType message, int val)</argsstring>
        <name>updateImpl</name>
        <qualifiedname>Ikarus::IObserver&lt; ControlMessages &gt;::updateImpl</qualifiedname>
        <param>
          <type><ref refid="a00405_1ga35fa62fd2d4186a9750af3d0692f2893" kindref="member">MessageType</ref></type>
          <declname>message</declname>
        </param>
        <param>
          <type>int</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="106" column="16" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="106" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="a02002_1a54cfb0283f65810089183deebc9b4858" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void Ikarus::IObserver&lt; ControlMessages  &gt;::updateImpl</definition>
        <argsstring>(MessageType message, const std::string &amp;val)</argsstring>
        <name>updateImpl</name>
        <qualifiedname>Ikarus::IObserver&lt; ControlMessages &gt;::updateImpl</qualifiedname>
        <reimplementedby refid="a01986_1a9c8c660297d060779e05303c63c1b4be">updateImpl</reimplementedby>
        <param>
          <type><ref refid="a00405_1ga35fa62fd2d4186a9750af3d0692f2893" kindref="member">MessageType</ref></type>
          <declname>message</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="107" column="16" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="107" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="a02002_1a75b2d9ce4234e841256066b2cd051bc9" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void Ikarus::IObserver&lt; ControlMessages  &gt;::updateImpl</definition>
        <argsstring>(MessageType message, int val1, const std::string &amp;val2)</argsstring>
        <name>updateImpl</name>
        <qualifiedname>Ikarus::IObserver&lt; ControlMessages &gt;::updateImpl</qualifiedname>
        <reimplementedby refid="a01986_1a78f7ab50c3ad889e9dafe84ecc59bb9f">updateImpl</reimplementedby>
        <param>
          <type><ref refid="a00405_1ga35fa62fd2d4186a9750af3d0692f2893" kindref="member">MessageType</ref></type>
          <declname>message</declname>
        </param>
        <param>
          <type>int</type>
          <declname>val1</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>val2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="108" column="16" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="108" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="a02002_1ae6d9838e1ced7fcf14b20457144a47b2" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void Ikarus::IObserver&lt; ControlMessages  &gt;::updateImpl</definition>
        <argsstring>(MessageType message, int val1, double val2)</argsstring>
        <name>updateImpl</name>
        <qualifiedname>Ikarus::IObserver&lt; ControlMessages &gt;::updateImpl</qualifiedname>
        <reimplementedby refid="a01986_1aca92cd9bf83a7575260a015a646aca8c">updateImpl</reimplementedby>
        <param>
          <type><ref refid="a00405_1ga35fa62fd2d4186a9750af3d0692f2893" kindref="member">MessageType</ref></type>
          <declname>message</declname>
        </param>
        <param>
          <type>int</type>
          <declname>val1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>val2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="109" column="16" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="109" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="a02002_1a5d9bfa8a6046d612106e4a2cb8e8d735" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void Ikarus::IObserver&lt; ControlMessages  &gt;::updateImpl</definition>
        <argsstring>(MessageType message, const Eigen::VectorXd &amp;vec)</argsstring>
        <name>updateImpl</name>
        <qualifiedname>Ikarus::IObserver&lt; ControlMessages &gt;::updateImpl</qualifiedname>
        <param>
          <type><ref refid="a00405_1ga35fa62fd2d4186a9750af3d0692f2893" kindref="member">MessageType</ref></type>
          <declname>message</declname>
        </param>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="110" column="16" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="110" bodyend="110"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="a01990" kindref="compound">ControlSubsamplingVertexVTKWriter</ref> class for writing VTK files with subsampling based on control messages. </para>
    </briefdescription>
    <detaileddescription>
<para>It inherits from the <ref refid="a02002" kindref="compound">IObserver</ref> class and is specifically designed for handling SOLUTION_CHANGED messages.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>B</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the grid basis. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>Ikarus::IObserver&lt; ControlMessages &gt;</label>
        <link refid="a02002"/>
        <childnode refid="3" relation="template-instance">
          <edgelabel>&lt; ControlMessages &gt;</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>Ikarus::ControlSubsamplingVertexVTKWriter&lt; B &gt;</label>
        <link refid="a01990"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>Ikarus::IObserver&lt; MT &gt;</label>
        <link refid="a02002"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>Ikarus::IObserver&lt; ControlMessages &gt;</label>
        <link refid="a02002"/>
        <childnode refid="3" relation="template-instance">
          <edgelabel>&lt; ControlMessages &gt;</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>Ikarus::ControlSubsamplingVertexVTKWriter&lt; B &gt;</label>
        <link refid="a01990"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>Ikarus::IObserver&lt; MT &gt;</label>
        <link refid="a02002"/>
      </node>
    </collaborationgraph>
    <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/controlvtkwriter.hh" line="31" column="1" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/controlvtkwriter.hh" bodystart="32" bodyend="103"/>
    <listofallmembers>
      <member refid="a01990_1a5417a850be09423f9cf1ad7be64a0e45" prot="private" virt="non-virtual"><scope>Ikarus::ControlSubsamplingVertexVTKWriter</scope><name>Basis</name></member>
      <member refid="a01990_1ab42c786a31afe1511aa10250520a21e3" prot="private" virt="non-virtual"><scope>Ikarus::ControlSubsamplingVertexVTKWriter</scope><name>basis_</name></member>
      <member refid="a01990_1afd29ff31121aaca853a1882066f7788a" prot="private" virt="non-virtual"><scope>Ikarus::ControlSubsamplingVertexVTKWriter</scope><name>components</name></member>
      <member refid="a01990_1a1e07865751a32e0a1dd29e8f001babc3" prot="public" virt="non-virtual"><scope>Ikarus::ControlSubsamplingVertexVTKWriter</scope><name>ControlSubsamplingVertexVTKWriter</name></member>
      <member refid="a01990_1a8b979e455018762147237e7bcc0dce29" prot="private" virt="non-virtual"><scope>Ikarus::ControlSubsamplingVertexVTKWriter</scope><name>fieldInfo_</name></member>
      <member refid="a01990_1aeb1a874b0cecc5ff6eb7be8a130d2a0d" prot="private" virt="non-virtual"><scope>Ikarus::ControlSubsamplingVertexVTKWriter</scope><name>isFieldInfoSet_</name></member>
      <member refid="a02002_1adc6a89c0396fc98e0c095cd8df17b075" prot="public" virt="non-virtual"><scope>Ikarus::ControlSubsamplingVertexVTKWriter</scope><name>MessageType</name></member>
      <member refid="a01990_1ad2a4c8b5c1a3c7becb4e6a0ad117fed8" prot="private" virt="non-virtual"><scope>Ikarus::ControlSubsamplingVertexVTKWriter</scope><name>prefixString_</name></member>
      <member refid="a01990_1afec0c3fe2aa8cac3e9970d8c9720c219" prot="public" virt="non-virtual"><scope>Ikarus::ControlSubsamplingVertexVTKWriter</scope><name>setFieldInfo</name></member>
      <member refid="a01990_1a8061e516e4c6626a2f6ea160e692e4e1" prot="public" virt="non-virtual"><scope>Ikarus::ControlSubsamplingVertexVTKWriter</scope><name>setFileNamePrefix</name></member>
      <member refid="a01990_1a61930469efd58c855dc29786edea1b76" prot="private" virt="non-virtual"><scope>Ikarus::ControlSubsamplingVertexVTKWriter</scope><name>solution_</name></member>
      <member refid="a01990_1ab5f4e544a049a3a4e2f6d5e1e445ea03" prot="private" virt="non-virtual"><scope>Ikarus::ControlSubsamplingVertexVTKWriter</scope><name>step_</name></member>
      <member refid="a02002_1aafa35019b0bd7577d9e5b2c209c785bd" prot="public" virt="non-virtual"><scope>Ikarus::ControlSubsamplingVertexVTKWriter</scope><name>update</name></member>
      <member refid="a02002_1a3a477ef465bf14acd9e21673e2bfc595" prot="public" virt="non-virtual"><scope>Ikarus::ControlSubsamplingVertexVTKWriter</scope><name>update</name></member>
      <member refid="a02002_1a9ec023872625942d0b64244709966464" prot="public" virt="non-virtual"><scope>Ikarus::ControlSubsamplingVertexVTKWriter</scope><name>update</name></member>
      <member refid="a02002_1aaa06f0740f435636da206c35951f8c81" prot="public" virt="non-virtual"><scope>Ikarus::ControlSubsamplingVertexVTKWriter</scope><name>update</name></member>
      <member refid="a02002_1a92045cc1701c89ac62395a8e77ff3eba" prot="public" virt="non-virtual"><scope>Ikarus::ControlSubsamplingVertexVTKWriter</scope><name>update</name></member>
      <member refid="a02002_1a04b8667b08713503e82ede950a337950" prot="public" virt="non-virtual"><scope>Ikarus::ControlSubsamplingVertexVTKWriter</scope><name>update</name></member>
      <member refid="a02002_1a1d1ef2313a9aecf4e9d475cce837476e" prot="public" virt="non-virtual"><scope>Ikarus::ControlSubsamplingVertexVTKWriter</scope><name>update</name></member>
      <member refid="a01990_1a72b675b3fb4b0b2989b315e2a0337e44" prot="public" virt="virtual"><scope>Ikarus::ControlSubsamplingVertexVTKWriter</scope><name>updateImpl</name></member>
      <member refid="a02002_1a80d3fd9872a76a02452f42511f780253" prot="protected" virt="virtual" ambiguityscope="IObserver&lt; ControlMessages &gt;::"><scope>Ikarus::ControlSubsamplingVertexVTKWriter</scope><name>updateImpl</name></member>
      <member refid="a02002_1a873494234cf33b9cc7179d90ff6f095e" prot="protected" virt="virtual" ambiguityscope="IObserver&lt; ControlMessages &gt;::"><scope>Ikarus::ControlSubsamplingVertexVTKWriter</scope><name>updateImpl</name></member>
      <member refid="a02002_1a54cfb0283f65810089183deebc9b4858" prot="protected" virt="virtual" ambiguityscope="IObserver&lt; ControlMessages &gt;::"><scope>Ikarus::ControlSubsamplingVertexVTKWriter</scope><name>updateImpl</name></member>
      <member refid="a02002_1a75b2d9ce4234e841256066b2cd051bc9" prot="protected" virt="virtual" ambiguityscope="IObserver&lt; ControlMessages &gt;::"><scope>Ikarus::ControlSubsamplingVertexVTKWriter</scope><name>updateImpl</name></member>
      <member refid="a02002_1ae6d9838e1ced7fcf14b20457144a47b2" prot="protected" virt="virtual" ambiguityscope="IObserver&lt; ControlMessages &gt;::"><scope>Ikarus::ControlSubsamplingVertexVTKWriter</scope><name>updateImpl</name></member>
      <member refid="a02002_1a5d9bfa8a6046d612106e4a2cb8e8d735" prot="protected" virt="virtual" ambiguityscope="IObserver&lt; ControlMessages &gt;::"><scope>Ikarus::ControlSubsamplingVertexVTKWriter</scope><name>updateImpl</name></member>
      <member refid="a01990_1af281530012d33ee72c5bcd02b5d1560f" prot="private" virt="non-virtual"><scope>Ikarus::ControlSubsamplingVertexVTKWriter</scope><name>vtkWriter_</name></member>
      <member refid="a02002_1a39df4c52c73f721bb2ef1c90fe76d74a" prot="public" virt="virtual"><scope>Ikarus::ControlSubsamplingVertexVTKWriter</scope><name>~IObserver</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
