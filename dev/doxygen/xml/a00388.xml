<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="a00388" kind="group">
    <compoundname>pythonbindings</compoundname>
    <title>Python bindings</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="a00388_1ga87d3c6e620be5df59ba6923751caae86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Assembler</type>
          </param>
          <param>
            <type>class...</type>
            <declname>options</declname>
            <defname>options</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Ikarus::Python::registerFlatAssembler</definition>
        <argsstring>(pybind11::handle scope, pybind11::class_&lt; Assembler, options... &gt; cls)</argsstring>
        <name>registerFlatAssembler</name>
        <qualifiedname>Ikarus::Python::registerFlatAssembler</qualifiedname>
        <param>
          <type>pybind11::handle</type>
          <declname>scope</declname>
        </param>
        <param>
          <type>pybind11::class_&lt; Assembler, options... &gt;</type>
          <declname>cls</declname>
        </param>
        <briefdescription>
<para>Register <ref refid="a00414" kindref="compound">Python</ref> bindings for a assembler class. <linebreak/>
. </para>
        </briefdescription>
        <detaileddescription>
<para>The registered class will have an initializer that takes a list of finite elements (<computeroutput>fes</computeroutput>) and a <computeroutput>DirichletValuesType</computeroutput> object. <linebreak/>
 It exposes several member functions to <ref refid="a00414" kindref="compound">Python</ref>: <linebreak/>
 <itemizedlist>
<listitem>
<para><computeroutput>matrix(req)</computeroutput>: Returns a dense matrix based on the specified <computeroutput>FERequirementType</computeroutput>. <linebreak/>
 </para>
</listitem>
<listitem>
<para><computeroutput>vector(req,affordance,dbcOption)</computeroutput>: Returns a vector based on the specified <computeroutput>FERequirementType</computeroutput>. <linebreak/>
 </para>
</listitem>
<listitem>
<para><computeroutput>scalar(req,affordance)</computeroutput>: Returns a scalar based on the specified <computeroutput>FERequirementType</computeroutput>. <linebreak/>
 </para>
</listitem>
<listitem>
<para><computeroutput>createFullVector(redVec)</computeroutput>: Creates a full vector from a reduced vector. <linebreak/>
 </para>
</listitem>
<listitem>
<para><computeroutput>reducedSize()</computeroutput>: Returns the size of the reduced space. <linebreak/>
</para>
</listitem>
</itemizedlist>
<linebreak/>
 <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Assembler</parametername>
</parameternamelist>
<parameterdescription>
<para>The assembler class to be registered. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>Variadic template parameters for additional options when defining the <ref refid="a00414" kindref="compound">Python</ref> class. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para>A Pybind11 handle representing the <ref refid="a00414" kindref="compound">Python</ref> scope where the class should be registered. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cls</parametername>
</parameternamelist>
<parameterdescription>
<para>The Pybind11 class template to be used for registering the assembler class. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/python/assembler/flatassembler.hh" line="41" column="6" bodyfile="/__w/ikarus/ikarus/repo/ikarus/python/assembler/flatassembler.hh" bodystart="41" bodyend="124"/>
        <referencedby refid="a00414_1aad35f78683b64303a28d3b8b4f83aa37" compoundref="a00209" startline="70" endline="111">Ikarus::Python::registerAssemblerManipulator</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00388_1ga2f6146bb687ad25cfb413fbcfd470788" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BasisHandler</type>
          </param>
          <param>
            <type>class...</type>
            <declname>options</declname>
            <defname>options</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Ikarus::Python::registerBasisHandler</definition>
        <argsstring>(pybind11::handle scope, pybind11::class_&lt; BasisHandler, options... &gt; cls)</argsstring>
        <name>registerBasisHandler</name>
        <qualifiedname>Ikarus::Python::registerBasisHandler</qualifiedname>
        <param>
          <type>pybind11::handle</type>
          <declname>scope</declname>
        </param>
        <param>
          <type>pybind11::class_&lt; BasisHandler, options... &gt;</type>
          <declname>cls</declname>
        </param>
        <briefdescription>
<para>Register a <ref refid="a00414" kindref="compound">Python</ref> wrapper for an <ref refid="a00396" kindref="compound">Ikarus</ref> basis class. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername><ref refid="a01827" kindref="compound">BasisHandler</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="a00396" kindref="compound">Ikarus</ref> handler basis class to be registered. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>Variadic template parameters for additional options when defining the <ref refid="a00414" kindref="compound">Python</ref> class.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para>A Pybind11 handle representing the <ref refid="a00414" kindref="compound">Python</ref> scope where the class should be registered. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cls</parametername>
</parameternamelist>
<parameterdescription>
<para>The Pybind11 class template to be used for registering the <ref refid="a00396" kindref="compound">Ikarus</ref> basis handler class. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/python/basis/basis.hh" line="37" column="6" bodyfile="/__w/ikarus/ikarus/repo/ikarus/python/basis/basis.hh" bodystart="37" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="a00388_1ga39b6df6adfe4858b13ac71f5830f29f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DirichletValues</type>
          </param>
          <param>
            <type>class...</type>
            <declname>options</declname>
            <defname>options</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Ikarus::Python::registerDirichletValues</definition>
        <argsstring>(pybind11::handle scope, pybind11::class_&lt; DirichletValues, options... &gt; cls)</argsstring>
        <name>registerDirichletValues</name>
        <qualifiedname>Ikarus::Python::registerDirichletValues</qualifiedname>
        <param>
          <type>pybind11::handle</type>
          <declname>scope</declname>
        </param>
        <param>
          <type>pybind11::class_&lt; DirichletValues, options... &gt;</type>
          <declname>cls</declname>
        </param>
        <briefdescription>
<para>Register <ref refid="a00414" kindref="compound">Python</ref> bindings for a <ref refid="a01883" kindref="compound">DirichletValues</ref> class. </para>
        </briefdescription>
        <detaileddescription>
<para>This function registers <ref refid="a00414" kindref="compound">Python</ref> bindings for a <ref refid="a01883" kindref="compound">DirichletValues</ref> class, allowing it to be used in <ref refid="a00414" kindref="compound">Python</ref> scripts. The registered class will have an initializer that takes a <computeroutput>Basis</computeroutput> object. It exposes several member functions to <ref refid="a00414" kindref="compound">Python</ref>:<itemizedlist>
<listitem><para><computeroutput>fixBoundaryDOFs(f)</computeroutput>: Fixes boundary degrees of freedom using a user-defined function <computeroutput>f</computeroutput> than can be called with the following arguments:<itemizedlist>
<listitem><para>with the boolean vector and the global index.</para>
</listitem><listitem><para>with the boolean vector, the local index and the <computeroutput>LocalView</computeroutput>.</para>
</listitem><listitem><para>with the boolean vector, the local index, the <computeroutput>LocalView</computeroutput> and the <computeroutput>Intersection</computeroutput>.</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><computeroutput>fixDOFs(f)</computeroutput>: Fixes boundary degrees of freedom using a user-defined function <computeroutput>f</computeroutput> with the basis and the boolean vector as arguments.</para>
</listitem><listitem><para><computeroutput>setSingleDOF(i, flag: bool): Fixes or unfixes DOF with index i -</computeroutput>isConstrained(i)<computeroutput>: Checks whether index i is constrained -</computeroutput>reset()`: Resets the whole container</para>
</listitem></itemizedlist>
</para>
<para>The following properties can be accessed:<itemizedlist>
<listitem><para><computeroutput>container</computeroutput>: the underlying container of dirichlet flags (as a const reference)</para>
</listitem><listitem><para><computeroutput>size</computeroutput>: the size of the underlying basis</para>
</listitem><listitem><para><computeroutput>fixedDOFsize</computeroutput>: the amount of DOFs currently fixed</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername><ref refid="a01883" kindref="compound">DirichletValues</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="a01883" kindref="compound">DirichletValues</ref> class to be registered. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>Variadic template parameters for additional options when defining the <ref refid="a00414" kindref="compound">Python</ref> class.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para>A Pybind11 handle representing the <ref refid="a00414" kindref="compound">Python</ref> scope where the class should be registered. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cls</parametername>
</parameternamelist>
<parameterdescription>
<para>The Pybind11 class template to be used for registering the <ref refid="a01883" kindref="compound">DirichletValues</ref> class. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/python/dirichletvalues/dirichletvalues.hh" line="147" column="6" bodyfile="/__w/ikarus/ikarus/repo/ikarus/python/dirichletvalues/dirichletvalues.hh" bodystart="147" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="a00388_1gac8bb4a818dee7342efbc5e174e35b840" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FE</type>
          </param>
          <param>
            <type>class...</type>
            <declname>options</declname>
            <defname>options</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Ikarus::Python::registerFE</definition>
        <argsstring>(pybind11::handle scope, pybind11::class_&lt; FE, options... &gt; cls)</argsstring>
        <name>registerFE</name>
        <qualifiedname>Ikarus::Python::registerFE</qualifiedname>
        <param>
          <type>pybind11::handle</type>
          <declname>scope</declname>
        </param>
        <param>
          <type>pybind11::class_&lt; FE, options... &gt;</type>
          <declname>cls</declname>
        </param>
        <briefdescription>
<para>Register <ref refid="a00414" kindref="compound">Python</ref> bindings for the <ref refid="a01355" kindref="compound">FE</ref> class. </para>
        </briefdescription>
        <detaileddescription>
<para>This function registers <ref refid="a00414" kindref="compound">Python</ref> bindings for a <ref refid="a01355" kindref="compound">FE</ref> class, allowing it to be used in <ref refid="a00414" kindref="compound">Python</ref> scripts.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername><ref refid="a01355" kindref="compound">FE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="a01355" kindref="compound">FE</ref> class to be registered. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>Variadic template parameters for additional options when defining the <ref refid="a00414" kindref="compound">Python</ref> class.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para>A Pybind11 handle representing the <ref refid="a00414" kindref="compound">Python</ref> scope where the class should be registered. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cls</parametername>
</parameternamelist>
<parameterdescription>
<para>The Pybind11 class template to be used for registering the <ref refid="a01471" kindref="compound">KirchhoffLoveShell</ref> class. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/python/finiteelements/fe.hh" line="87" column="6" bodyfile="/__w/ikarus/ikarus/repo/ikarus/python/finiteelements/fe.hh" bodystart="87" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="a00388_1ga9f62f91fc33b1f9e17756c2ac7b30077" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Writer</type>
          </param>
          <param>
            <type>class...</type>
            <declname>options</declname>
            <defname>options</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Ikarus::Python::registerVtkWriter</definition>
        <argsstring>(pybind11::handle scope, pybind11::class_&lt; Writer, options... &gt; cls)</argsstring>
        <name>registerVtkWriter</name>
        <qualifiedname>Ikarus::Python::registerVtkWriter</qualifiedname>
        <param>
          <type>pybind11::handle</type>
          <declname>scope</declname>
        </param>
        <param>
          <type>pybind11::class_&lt; Writer, options... &gt;</type>
          <declname>cls</declname>
        </param>
        <briefdescription>
<para>Register <ref refid="a00414" kindref="compound">Python</ref> bindings for a VtkWriter class. <linebreak/>
. </para>
        </briefdescription>
        <detaileddescription>
<para>The registered VtkWriter class provides functionalities for writing VTK files from assembled data. This class supports adding result data as cell or point data and configuring VTK output formats.</para>
<para>This function registers the following methods for the VtkWriter class:<itemizedlist>
<listitem><para><computeroutput>addAllResults(dataTag: DataTag)</computeroutput></para>
</listitem><listitem><para><computeroutput>addResult(resType: str, dataTag: ikarus.io.DataTag)</computeroutput></para>
</listitem><listitem><para><computeroutput>write(fileName)</computeroutput>, returns actual fileName</para>
</listitem><listitem><para><computeroutput>addInterpolation(writer, vals_::np.array, basis, name: str, dataTag: ikarus.io.DataTag)</computeroutput></para>
</listitem><listitem><para><computeroutput>addPointData()</computeroutput> (multiple overloads)</para>
</listitem><listitem><para><computeroutput>addCellData()</computeroutput> (multiple overloads)</para>
</listitem><listitem><para><computeroutput>setFormat(type: dune.vtk.FormatTypes)</computeroutput></para>
</listitem><listitem><para><computeroutput>setDatatype(type: dune.vtk.DataTypes)</computeroutput></para>
</listitem><listitem><para><computeroutput>setHeadertype(type: dune.vtk.DataTypes)</computeroutput></para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Writer</parametername>
</parameternamelist>
<parameterdescription>
<para>The writer class type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>Additional options for the writer class. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para>The scope in which to register the class. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cls</parametername>
</parameternamelist>
<parameterdescription>
<para>The class object to register the methods with. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/python/io/vtkwriter.hh" line="50" column="6" bodyfile="/__w/ikarus/ikarus/repo/ikarus/python/io/vtkwriter.hh" bodystart="50" bodyend="93"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Header for <ref refid="a00421" kindref="compound">Python</ref> Bindings. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
