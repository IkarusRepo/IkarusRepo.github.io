<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="a01520" kind="struct" language="C++" prot="public">
    <compoundname>Ikarus::DefaultMembraneStrain</compoundname>
    <includes refid="a00236" local="no">ikarus/finiteelements/mechanics/membranestrains.hh</includes>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="a01520_1a7c65ab77e1e42865fc4d0b04a5cb288a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename GEO</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>static auto Ikarus::DefaultMembraneStrain::value</definition>
        <argsstring>(const Dune::FieldVector&lt; double, 2 &gt; &amp;gpPos, const GEO &amp;geo, const auto &amp;uFunction) -&gt; Eigen::Vector3&lt; typename std::remove_cvref_t&lt; decltype(uFunction)&gt;::ctype &gt;</argsstring>
        <name>value</name>
        <qualifiedname>Ikarus::DefaultMembraneStrain::value</qualifiedname>
        <param>
          <type>const <ref refid="a01784" kindref="compound">Dune::FieldVector</ref>&lt; double, 2 &gt; &amp;</type>
          <declname>gpPos</declname>
        </param>
        <param>
          <type>const GEO &amp;</type>
          <declname>geo</declname>
        </param>
        <param>
          <type>const auto &amp;</type>
          <declname>uFunction</declname>
        </param>
        <briefdescription>
<para>Compute the strain vector at a given integration point. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>gpPos</parametername>
</parameternamelist>
<parameterdescription>
<para>The position of the integration point. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>geo</parametername>
</parameternamelist>
<parameterdescription>
<para>The geometry object providing the transposed Jacobian. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>uFunction</parametername>
</parameternamelist>
<parameterdescription>
<para>The function representing the displacement field.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>GEO</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the geometry object.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The strain vector at the given integration point. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/membranestrains.hh" line="31" column="15" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/membranestrains.hh" bodystart="31" bodyend="46"/>
        <referencedby refid="a01452_1a2116db254c03a1873dc6d1d432d8eaa1" compoundref="a00290" startline="201" endline="235">Ikarus::KirchhoffLoveShell&lt; PreFE, FE &gt;::computeMaterialAndStrains</referencedby>
      </memberdef>
      <memberdef kind="function" id="a01520_1a0e9910984eae86b868f317f0a26a132e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename GEO</type>
          </param>
          <param>
            <type>typename ST</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>static auto Ikarus::DefaultMembraneStrain::derivative</definition>
        <argsstring>(const Dune::FieldVector&lt; double, 2 &gt; &amp;gpPos, const Eigen::Matrix&lt; ST, 2, 3 &gt; &amp;jcur, const auto &amp;dNAtGp, const GEO &amp;geo, const auto &amp;uFunction, const auto &amp;localBasis, const int node)</argsstring>
        <name>derivative</name>
        <qualifiedname>Ikarus::DefaultMembraneStrain::derivative</qualifiedname>
        <param>
          <type>const <ref refid="a01784" kindref="compound">Dune::FieldVector</ref>&lt; double, 2 &gt; &amp;</type>
          <declname>gpPos</declname>
        </param>
        <param>
          <type>const Eigen::Matrix&lt; ST, 2, 3 &gt; &amp;</type>
          <declname>jcur</declname>
        </param>
        <param>
          <type>const auto &amp;</type>
          <declname>dNAtGp</declname>
        </param>
        <param>
          <type>const GEO &amp;</type>
          <declname>geo</declname>
        </param>
        <param>
          <type>const auto &amp;</type>
          <declname>uFunction</declname>
        </param>
        <param>
          <type>const auto &amp;</type>
          <declname>localBasis</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Compute the strain-displacement matrix for a given node and integration point. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>gpPos</parametername>
</parameternamelist>
<parameterdescription>
<para>The position of the integration point. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>jcur</parametername>
</parameternamelist>
<parameterdescription>
<para>The Jacobian matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dNAtGp</parametername>
</parameternamelist>
<parameterdescription>
<para>The derivative of the shape functions at the integration point. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>geo</parametername>
</parameternamelist>
<parameterdescription>
<para>The geometry object of the finite element. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>uFunction</parametername>
</parameternamelist>
<parameterdescription>
<para>The function representing the displacement field. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>localBasis</parametername>
</parameternamelist>
<parameterdescription>
<para>The local basis object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="a01336" kindref="compound">FE</ref> node index.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>GEO</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the geometry object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ST</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar type for the matrix elements.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The strain-displacement matrix for the given node and integration point. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/membranestrains.hh" line="65" column="15" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/membranestrains.hh" bodystart="65" bodyend="74"/>
        <referencedby refid="a01452_1a71e905f315ca4efee16150b0c43fbabe" compoundref="a00290" startline="238" endline="280">Ikarus::KirchhoffLoveShell&lt; PreFE, FE &gt;::calculateMatrixImpl</referencedby>
        <referencedby refid="a01452_1a14aa1287417c41d90c1f9cad4738cc93" compoundref="a00290" startline="283" endline="313">Ikarus::KirchhoffLoveShell&lt; PreFE, FE &gt;::calculateVectorImpl</referencedby>
      </memberdef>
      <memberdef kind="function" id="a01520_1a28a06b4e89e7e526e8b09b020d6adfcf" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename GEO</type>
          </param>
          <param>
            <type>typename ST</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>static auto Ikarus::DefaultMembraneStrain::secondDerivative</definition>
        <argsstring>(const Dune::FieldVector&lt; double, 2 &gt; &amp;gpPos, const auto &amp;dNAtGp, const GEO &amp;geo, const auto &amp;uFunction, const auto &amp;localBasis, const Eigen::Vector3&lt; ST &gt; &amp;S, int I, int J)</argsstring>
        <name>secondDerivative</name>
        <qualifiedname>Ikarus::DefaultMembraneStrain::secondDerivative</qualifiedname>
        <param>
          <type>const <ref refid="a01784" kindref="compound">Dune::FieldVector</ref>&lt; double, 2 &gt; &amp;</type>
          <declname>gpPos</declname>
        </param>
        <param>
          <type>const auto &amp;</type>
          <declname>dNAtGp</declname>
        </param>
        <param>
          <type>const GEO &amp;</type>
          <declname>geo</declname>
        </param>
        <param>
          <type>const auto &amp;</type>
          <declname>uFunction</declname>
        </param>
        <param>
          <type>const auto &amp;</type>
          <declname>localBasis</declname>
        </param>
        <param>
          <type>const Eigen::Vector3&lt; ST &gt; &amp;</type>
          <declname>S</declname>
        </param>
        <param>
          <type>int</type>
          <declname>I</declname>
        </param>
        <param>
          <type>int</type>
          <declname>J</declname>
        </param>
        <briefdescription>
<para>Compute the second derivative of the membrane strain for a given node pair and integration point. </para>
        </briefdescription>
        <detaileddescription>
<para>This function computes the geometric tangent stiffness for a given node pair at a given integration point.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>gpPos</parametername>
</parameternamelist>
<parameterdescription>
<para>The position of the integration point. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dNAtGp</parametername>
</parameternamelist>
<parameterdescription>
<para>The derivative of the shape functions at the integration point. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>geo</parametername>
</parameternamelist>
<parameterdescription>
<para>The geometry object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>uFunction</parametername>
</parameternamelist>
<parameterdescription>
<para>The function representing the displacement field. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>localBasis</parametername>
</parameternamelist>
<parameterdescription>
<para>The local basis object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>S</parametername>
</parameternamelist>
<parameterdescription>
<para>The strain vector. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>I</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the first node. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>J</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the second node.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>GEO</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the geometry object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ST</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar type for the matrix elements.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The second derivative of the membrane strain. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/membranestrains.hh" line="96" column="15" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/membranestrains.hh" bodystart="96" bodyend="106"/>
        <referencedby refid="a01452_1a71e905f315ca4efee16150b0c43fbabe" compoundref="a00290" startline="238" endline="280">Ikarus::KirchhoffLoveShell&lt; PreFE, FE &gt;::calculateMatrixImpl</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/membranestrains.hh" line="17" column="1" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/membranestrains.hh" bodystart="18" bodyend="107"/>
    <listofallmembers>
      <member refid="a01520_1a0e9910984eae86b868f317f0a26a132e" prot="public" virt="non-virtual"><scope>Ikarus::DefaultMembraneStrain</scope><name>derivative</name></member>
      <member refid="a01520_1a28a06b4e89e7e526e8b09b020d6adfcf" prot="public" virt="non-virtual"><scope>Ikarus::DefaultMembraneStrain</scope><name>secondDerivative</name></member>
      <member refid="a01520_1a7c65ab77e1e42865fc4d0b04a5cb288a" prot="public" virt="non-virtual"><scope>Ikarus::DefaultMembraneStrain</scope><name>value</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
