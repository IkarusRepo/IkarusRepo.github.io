<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="a00392" kind="group">
    <compoundname>tensor</compoundname>
    <title>Tensor Utilities</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="a00392_1ga5cfd9d098384fb067d897b3c0499b447" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Derived</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>auto</type>
            <declname>rank</declname>
            <defname>rank</defname>
          </param>
        </templateparamlist>
        <type>Eigen::Tensor&lt; typename Derived::Scalar, rank &gt;</type>
        <definition>Eigen::Tensor&lt; typename Derived::Scalar, rank &gt; Ikarus::tensorView</definition>
        <argsstring>(const Eigen::EigenBase&lt; Derived &gt; &amp;matrix, const std::array&lt; T, rank &gt; &amp;dims)</argsstring>
        <name>tensorView</name>
        <qualifiedname>Ikarus::tensorView</qualifiedname>
        <param>
          <type>const <ref refid="a01831" kindref="compound">Eigen::EigenBase</ref>&lt; Derived &gt; &amp;</type>
          <declname>matrix</declname>
        </param>
        <param>
          <type>const std::array&lt; T, rank &gt; &amp;</type>
          <declname>dims</declname>
        </param>
        <briefdescription>
<para>View an <ref refid="a00412" kindref="compound">Eigen</ref> matrix as an <ref refid="a00412" kindref="compound">Eigen</ref> Tensor with specified dimensions. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Derived</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the input <ref refid="a00412" kindref="compound">Eigen</ref> matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the elements in the matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rank</parametername>
</parameternamelist>
<parameterdescription>
<para>Rank of the resulting Tensor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>matrix</parametername>
</parameternamelist>
<parameterdescription>
<para>Input <ref refid="a00412" kindref="compound">Eigen</ref> matrix to be cast. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dims</parametername>
</parameternamelist>
<parameterdescription>
<para>Dimensions of the resulting Tensor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Eigen::Tensor&lt;typename Derived::Scalar, rank&gt; The casted <ref refid="a00412" kindref="compound">Eigen</ref> Tensor. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" line="32" column="15" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" bodystart="32" bodyend="37"/>
        <referencedby refid="a01471_1a0a02eda2ec4b244354d313e8c98568f6" compoundref="a00299" startline="415" endline="426">Ikarus::KirchhoffLoveShell&lt; PreFE, FE &gt;::materialTangent</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00392_1gab2cea9ac847cc3635812467c9d96ceb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto Ikarus::dyadic</definition>
        <argsstring>(const auto &amp;A_ij, const auto &amp;B_kl)</argsstring>
        <name>dyadic</name>
        <qualifiedname>Ikarus::dyadic</qualifiedname>
        <param>
          <type>const auto &amp;</type>
          <declname>A_ij</declname>
        </param>
        <param>
          <type>const auto &amp;</type>
          <declname>B_kl</declname>
        </param>
        <briefdescription>
<para>Computes the dyadic product of two <ref refid="a00412" kindref="compound">Eigen</ref> tensors. </para>
        </briefdescription>
        <detaileddescription>
<para>The components of the result read <formula id="58">\[ \CI_{ijkl} = A_{ij}B_{kl}. \]</formula></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>A_ij</parametername>
</parameternamelist>
<parameterdescription>
<para>First tensor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_kl</parametername>
</parameternamelist>
<parameterdescription>
<para>Second tensor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Resulting tensor after the dyadic product. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" line="47" column="6" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" bodystart="47" bodyend="50"/>
        <referencedby refid="a01471_1a0a02eda2ec4b244354d313e8c98568f6" compoundref="a00299" startline="415" endline="426">Ikarus::KirchhoffLoveShell&lt; PreFE, FE &gt;::materialTangent</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00392_1ga9c5657c8eff4526802c2a67f15135bb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ST</type>
          </param>
          <param>
            <type>int</type>
            <declname>size</declname>
            <defname>size</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::dyadic</definition>
        <argsstring>(const Eigen::Vector&lt; ST, size &gt; &amp;a, const Eigen::Vector&lt; ST, size &gt; &amp;b)</argsstring>
        <name>dyadic</name>
        <qualifiedname>Ikarus::dyadic</qualifiedname>
        <param>
          <type>const Eigen::Vector&lt; ST, size &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const Eigen::Vector&lt; ST, size &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Computes the dyadic product of two first order Tensors (here: Eigen::Vector). </para>
        </briefdescription>
        <detaileddescription>
<para>The components of the result read <formula id="59">\[ A_{ij} = a_{i}b_{j}. \]</formula></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a_i</parametername>
</parameternamelist>
<parameterdescription>
<para>First tensor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b_j</parametername>
</parameternamelist>
<parameterdescription>
<para>Second tensor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Resulting tensor after the dyadic product </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" line="61" column="6" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" bodystart="61" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="a00392_1ga1c9618ef351cd986d4f64fde7f52e860" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>int</type>
            <declname>dim</declname>
            <defname>dim</defname>
            <defval>3</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::symmetricIdentityFourthOrder</definition>
        <argsstring>()</argsstring>
        <name>symmetricIdentityFourthOrder</name>
        <qualifiedname>Ikarus::symmetricIdentityFourthOrder</qualifiedname>
        <briefdescription>
<para>Generates a symmetric identity fourth-order tensor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ScalarType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the elements in the tensor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dim</parametername>
</parameternamelist>
<parameterdescription>
<para>Dimension of the tensor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Symmetric identity fourth-order tensor. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" line="73" column="6" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" bodystart="73" bodyend="81"/>
        <referencedby refid="a01591_1aacf24b92643f54607e96cf323723f061" compoundref="a00269" startline="148" endline="163">Ikarus::Materials::StVenantKirchhoffT&lt; ST &gt;::tangentModuliImpl</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00392_1ga2368a572348c410fd7e7deb6c6e3964a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>int</type>
            <declname>dim</declname>
            <defname>dim</defname>
            <defval>3</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::symmetricFourthOrder</definition>
        <argsstring>(const auto &amp;A, const auto &amp;B)</argsstring>
        <name>symmetricFourthOrder</name>
        <qualifiedname>Ikarus::symmetricFourthOrder</qualifiedname>
        <param>
          <type>const auto &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const auto &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
<para>Generates a symmetric fourth-order tensor based on two second-order input tensors. </para>
        </briefdescription>
        <detaileddescription>
<para>The components of the result read <formula id="60">\[ \CI_{ijkl} = \frac{1}{2} \left(A_{ik}B_{jl}+A_{il}B_{jk} \right) .
\]</formula> <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ScalarType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the elements in the tensors. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dim</parametername>
</parameternamelist>
<parameterdescription>
<para>Dimension of the tensors. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>First tensor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B</parametername>
</parameternamelist>
<parameterdescription>
<para>Second tensor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Symmetric fourth-order tensor. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" line="95" column="6" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" bodystart="95" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="a00392_1gadb08b6f9cc40847b70286dc314a23000" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>int</type>
            <declname>dim</declname>
            <defname>dim</defname>
            <defval>3</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::identityFourthOrder</definition>
        <argsstring>()</argsstring>
        <name>identityFourthOrder</name>
        <qualifiedname>Ikarus::identityFourthOrder</qualifiedname>
        <briefdescription>
<para>Generates an identity fourth-order tensor. </para>
        </briefdescription>
        <detaileddescription>
<para>The components of the result read <formula id="61">\[ \CI_{ijkl} = \de_{ij}\de_{kl}. \]</formula> <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ScalarType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the elements in the tensor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dim</parametername>
</parameternamelist>
<parameterdescription>
<para>Dimension of the tensor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Identity fourth-order tensor. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" line="114" column="6" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" bodystart="114" bodyend="121"/>
        <referencedby refid="a01591_1aacf24b92643f54607e96cf323723f061" compoundref="a00269" startline="148" endline="163">Ikarus::Materials::StVenantKirchhoffT&lt; ST &gt;::tangentModuliImpl</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00392_1ga8fa2b440586483c1ee0f9b90b9081da2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename AType</type>
          </param>
          <param>
            <type>typename BType</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::fourthOrderIKJL</definition>
        <argsstring>(const Eigen::MatrixBase&lt; AType &gt; &amp;A, const Eigen::MatrixBase&lt; BType &gt; &amp;B)</argsstring>
        <name>fourthOrderIKJL</name>
        <qualifiedname>Ikarus::fourthOrderIKJL</qualifiedname>
        <param>
          <type>const Eigen::MatrixBase&lt; AType &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const Eigen::MatrixBase&lt; BType &gt; &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
<para>Computes the IKJL product of two matrices. </para>
        </briefdescription>
        <detaileddescription>
<para>The components of the result read <formula id="62">\[ \CI_{ijkl} = A_{ik}B_{jl}, \]</formula> which simply swaps the inner slots <computeroutput>j</computeroutput>and <computeroutput>k</computeroutput> <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>AType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the first matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>BType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the second matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>First matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B</parametername>
</parameternamelist>
<parameterdescription>
<para>Second matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Resulting tensor of the IKJL product. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" line="135" column="6" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" bodystart="135" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="a00392_1gaea03dbfcd8f85ef7af004c7e09244aa9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
          </param>
          <param>
            <type>long int</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::symTwoSlots</definition>
        <argsstring>(const Eigen::TensorFixedSize&lt; ScalarType, Eigen::Sizes&lt; dim, dim, dim, dim &gt; &gt; &amp;t, const std::array&lt; size_t, 2 &gt; &amp;slots)</argsstring>
        <name>symTwoSlots</name>
        <qualifiedname>Ikarus::symTwoSlots</qualifiedname>
        <param>
          <type>const Eigen::TensorFixedSize&lt; ScalarType, Eigen::Sizes&lt; dim, dim, dim, dim &gt; &gt; &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>const std::array&lt; size_t, 2 &gt; &amp;</type>
          <declname>slots</declname>
        </param>
        <briefdescription>
<para>Creates a symmetric fourth-order tensor in the two specified slots of the input tensor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ScalarType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the elements in the tensor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>Input tensor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>slots</parametername>
</parameternamelist>
<parameterdescription>
<para>Indices of the slots to be swapped. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Fourth-order Tensor which is symmetric in the given slots. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" line="158" column="6" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" bodystart="158" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="a00392_1ga4304655095296ce9283e012587817a51" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr Eigen::Index</type>
        <definition>constexpr Eigen::Index Ikarus::toVoigt</definition>
        <argsstring>(Eigen::Index i, Eigen::Index j) noexcept</argsstring>
        <name>toVoigt</name>
        <qualifiedname>Ikarus::toVoigt</qualifiedname>
        <param>
          <type>Eigen::Index</type>
          <declname>i</declname>
        </param>
        <param>
          <type>Eigen::Index</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Converts 2D indices to Voigt notation index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>Row index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>Column index. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Eigen::Index Voigt notation index.</para>
</simplesect>
This function converts 2D indices (i, j) to a Voigt notation index. The Voigt notation is used to represent the six unique components of a symmetric 3x3 matrix in a one-dimensional array.</para>
<para>If the input indices are not within the valid range (0, 1, 2), an assertion failure is triggered. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" line="179" column="24" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" bodystart="179" bodyend="190"/>
        <referencedby refid="a00391_1ga1fbedbac54712740abe25ceab2990472" compoundref="a00347" startline="10" endline="57">addBindingsToUtils</referencedby>
        <referencedby refid="a01607_1a7c8edbff09762bdb9cae26d4cf6b0a91" compoundref="a00239" startline="209" endline="227">Ikarus::NonLinearElastic&lt; PreFE, FE, PRE &gt;::calculateAtImpl</referencedby>
        <referencedby refid="a01471_1a2116db254c03a1873dc6d1d432d8eaa1" compoundref="a00299" startline="201" endline="235">Ikarus::KirchhoffLoveShell&lt; PreFE, FE &gt;::computeMaterialAndStrains</referencedby>
        <referencedby refid="a01471_1a0a02eda2ec4b244354d313e8c98568f6" compoundref="a00299" startline="415" endline="426">Ikarus::KirchhoffLoveShell&lt; PreFE, FE &gt;::materialTangent</referencedby>
        <referencedby refid="a01579_1a8d6370e3d198662f4222a0b94e2d6703" compoundref="a02979" startline="136" endline="147">Ikarus::Materials::Material&lt; MI &gt;::storedEnergy</referencedby>
        <referencedby refid="a01347_1aa58ea268a050d8f2735e5098a0d519df" compoundref="a00329" startline="99" endline="120">Ikarus::Experimental::AutoDiffMAT&lt; RealMAT, forceAutoDiffV, forceAutoDiffS &gt;::stresses</referencedby>
        <referencedby refid="a01579_1a8a68e052cade23285d1a28d1e08845f5" compoundref="a02979" startline="160" endline="168">Ikarus::Materials::Material&lt; MI &gt;::stresses</referencedby>
        <referencedby refid="a01347_1abd22c052743105a646c9cb16d531c57a" compoundref="a00329" startline="130" endline="170">Ikarus::Experimental::AutoDiffMAT&lt; RealMAT, forceAutoDiffV, forceAutoDiffS &gt;::tangentModuli</referencedby>
        <referencedby refid="a01579_1a7a97d64507fd1ce0c14e919edb8a639b" compoundref="a02979" startline="181" endline="189">Ikarus::Materials::Material&lt; MI &gt;::tangentModuli</referencedby>
        <referencedby refid="a00392_1ga8777400d7d11c49d46f3c6be2698722e" compoundref="a00032" startline="207" endline="215">Ikarus::toVoigt</referencedby>
        <referencedby refid="a00391_1ga378c5569b7b899586e7c8006fb776351" compoundref="a00023" startline="565" endline="578">Ikarus::toVoigtAndMaybeReduce</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00392_1ga8777400d7d11c49d46f3c6be2698722e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>Eigen::Matrix&lt; ScalarType, 6, 6 &gt;</type>
        <definition>Eigen::Matrix&lt; ScalarType, 6, 6 &gt; Ikarus::toVoigt</definition>
        <argsstring>(const Eigen::TensorFixedSize&lt; ScalarType, Eigen::Sizes&lt; 3, 3, 3, 3 &gt; &gt; &amp;ft)</argsstring>
        <name>toVoigt</name>
        <qualifiedname>Ikarus::toVoigt</qualifiedname>
        <param>
          <type>const Eigen::TensorFixedSize&lt; ScalarType, Eigen::Sizes&lt; 3, 3, 3, 3 &gt; &gt; &amp;</type>
          <declname>ft</declname>
        </param>
        <briefdescription>
<para>Converts a fourth-order tensor of fixed size 3x3x3x3 to a Voigt notation matrix of size 6x6. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ScalarType</parametername>
</parameternamelist>
<parameterdescription>
<para>Data type of the tensor elements. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ft</parametername>
</parameternamelist>
<parameterdescription>
<para>Fourth-order tensor . </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Voigt notation matrix.</para>
</simplesect>
This function converts a fourth-order tensor to a Voigt notation matrix, which is a symmetric 6x6 matrix containing the unique components of the input tensor. The mapping from the tensor indices to the Voigt notation indices is performed by the toVoigt function.</para>
<para><simplesect kind="remark"><para>The current implementation does not take advantage of this symmetry. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" line="207" column="15" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" bodystart="207" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="a00392_1ga130c456477155bd833fc6fd5b0223fd3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ST</type>
          </param>
          <param>
            <type>int</type>
            <declname>size</declname>
            <defname>size</defname>
          </param>
          <param>
            <type>int</type>
            <declname>Options</declname>
            <defname>Options</defname>
          </param>
          <param>
            <type>int</type>
            <declname>maxSize</declname>
            <defname>maxSize</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::toVoigt</definition>
        <argsstring>(const Eigen::Matrix&lt; ST, size, size, Options, maxSize, maxSize &gt; &amp;E, bool isStrain=true)</argsstring>
        <name>toVoigt</name>
        <qualifiedname>Ikarus::toVoigt</qualifiedname>
        <param>
          <type>const Eigen::Matrix&lt; ST, size, size, Options, maxSize, maxSize &gt; &amp;</type>
          <declname>E</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isStrain</declname>
          <defval>true</defval>
        </param>
    <requiresclause>((size &gt; 0 and size &lt;= 3) or (maxSize &gt; 0 and maxSize &lt;= 3 and size == Eigen::Dynamic))    </requiresclause>
        <briefdescription>
<para>Converts a square 2x2 or 3x3 matrix to a Voigt notation vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ST</parametername>
</parameternamelist>
<parameterdescription>
<para>Data type of the matrix elements. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of rows and columns of the square matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Options</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="a00412" kindref="compound">Eigen</ref> matrix options. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>E</parametername>
</parameternamelist>
<parameterdescription>
<para>Input matrix of size (size x size). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>isStrain</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether the conversion is for strain (true) or not (false). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Vector with components in Voigt notation vector.</para>
</simplesect>
This function converts a square matrix to a Voigt notation vector, which contains the unique components of the input matrix. The mapping from the matrix indices to the Voigt notation indices is performed by the toVoigt function.</para>
<para>The optional isStrain parameter allows the user to specify whether the conversion is intended for strain calculations. If isStrain is true, the off-diagonal components are multiplied by 2, providing the correct Voigt notation for symmetric strain tensors. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" line="238" column="6" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" bodystart="238" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="a00392_1gadc8e9e9f3838d0392a5fcf1e11374ee9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ST</type>
          </param>
          <param>
            <type>int</type>
            <declname>size</declname>
            <defname>size</defname>
          </param>
          <param>
            <type>int</type>
            <declname>Options</declname>
            <defname>Options</defname>
          </param>
          <param>
            <type>int</type>
            <declname>maxSize</declname>
            <defname>maxSize</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::fromVoigt</definition>
        <argsstring>(const Eigen::Matrix&lt; ST, size, 1, Options, maxSize, 1 &gt; &amp;EVoigt, bool isStrain=true)</argsstring>
        <name>fromVoigt</name>
        <qualifiedname>Ikarus::fromVoigt</qualifiedname>
        <param>
          <type>const Eigen::Matrix&lt; ST, size, 1, Options, maxSize, 1 &gt; &amp;</type>
          <declname>EVoigt</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isStrain</declname>
          <defval>true</defval>
        </param>
    <requiresclause>((size == 1 or size == 3 or size == 6) or ((maxSize == 1 or maxSize == 3 or maxSize == 6) and size == Eigen::Dynamic))    </requiresclause>
        <briefdescription>
<para>Converts a vector given in Voigt notation to a matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ST</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar type of the vector elements. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the Voigt notation vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>EVoigt</parametername>
</parameternamelist>
<parameterdescription>
<para>Voigt notation vector. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>isStrain</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether the vector represents a strain (default is true). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Matrix corresponding to the vector in Voigt notation.</para>
</simplesect>
This function converts a vector given in Voigt notation to the corresponding matrix. The conversion depends on the size The parameter <computeroutput>isStrain</computeroutput> is used to determine the conversion factor for off-diagonal components, which need to be divided by 2 in the matrix representation if the quantity is a strain tensor.</para>
<para>The function requires that the size of the Voigt notation vector is valid (1, 3, or 6). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" line="284" column="6" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" bodystart="284" bodyend="314"/>
        <referencedby refid="a00391_1ga1fbedbac54712740abe25ceab2990472" compoundref="a00347" startline="10" endline="57">addBindingsToUtils</referencedby>
        <referencedby refid="a00392_1ga0afe53095f875017b5673a42e13e6f5a" compoundref="a00032" startline="356" endline="367">Ikarus::fromVoigt</referencedby>
        <referencedby refid="a01683_1aafc25c13807fda614d68992dcd4923ae" compoundref="a00338" startline="111" endline="116">Ikarus::ResultEvaluators::PrincipalStress&lt; dim &gt;::operator()</referencedby>
        <referencedby refid="a01675_1a4a16334a6d486018a77727fb2acca63c" compoundref="a00338" startline="38" endline="44">Ikarus::ResultEvaluators::VonMises::operator()</referencedby>
        <referencedby refid="a01679_1a35c0916886cd68004bedbebe4165fa97" compoundref="a00338" startline="75" endline="79">Ikarus::ResultEvaluators::HydrostaticStress::operator()</referencedby>
        <referencedby refid="a01691_1a22590930fe4d5d2d5e5a323cd3085cdb" compoundref="a00338" startline="184" endline="208">Ikarus::ResultEvaluators::PolarStress::operator()</referencedby>
        <referencedby refid="a01595_1aa29dd3baf16c20438b69d5f3e6590b57" compoundref="a00260" startline="93" endline="103">Ikarus::Materials::VanishingStrain&lt; strainIndexPair, MI &gt;::stressesImpl</referencedby>
        <referencedby refid="a01599_1a78bed662e2230b7aabafd97556400071" compoundref="a00245" startline="99" endline="107">Ikarus::Materials::VanishingStress&lt; stressIndexPair, MI &gt;::stressesImpl</referencedby>
        <referencedby refid="a01595_1aa7bd7e40c6b4995a6e33dfba4ab88de0" compoundref="a00260" startline="113" endline="120">Ikarus::Materials::VanishingStrain&lt; strainIndexPair, MI &gt;::tangentModuliImpl</referencedby>
        <referencedby refid="a01599_1a0ebefbbf6effdedcf7ce4238d5079394" compoundref="a00245" startline="117" endline="124">Ikarus::Materials::VanishingStress&lt; stressIndexPair, MI &gt;::tangentModuliImpl</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00392_1ga518e0394f7c90dbe798b6cb8d757b822" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr std::array&lt; size_t, 2 &gt;</type>
        <definition>constexpr std::array&lt; size_t, 2 &gt; Ikarus::fromVoigt</definition>
        <argsstring>(size_t i)</argsstring>
        <name>fromVoigt</name>
        <qualifiedname>Ikarus::fromVoigt</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Converts a Voigt notation index to matrix indices. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>Voigt notation index. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Matrix indices corresponding to the Voigt notation index.</para>
</simplesect>
This function converts a Voigt notation index to the corresponding matrix indices. The mapping is based on the assumption that the Voigt notation indices 0, 1, and 2 represent the diagonal components <computeroutput>00</computeroutput>, <computeroutput>11</computeroutput>, and <computeroutput>22</computeroutput>, respectively. The remaining Voigt notation indices (3, 4, and 5) correspond to the off-diagonal components (<computeroutput>12</computeroutput> and <computeroutput>21</computeroutput>, <computeroutput>02</computeroutput> and <computeroutput>20</computeroutput>, <computeroutput>01</computeroutput> and <computeroutput>10</computeroutput>).</para>
<para>The function asserts that the input index is within the valid range for Voigt notation (0 to 5). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" line="329" column="22" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" bodystart="329" bodyend="342"/>
      </memberdef>
      <memberdef kind="function" id="a00392_1ga0afe53095f875017b5673a42e13e6f5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::fromVoigt</definition>
        <argsstring>(const Eigen::Matrix&lt; ScalarType, 6, 6 &gt; &amp;CVoigt)</argsstring>
        <name>fromVoigt</name>
        <qualifiedname>Ikarus::fromVoigt</qualifiedname>
        <param>
          <type>const Eigen::Matrix&lt; ScalarType, 6, 6 &gt; &amp;</type>
          <declname>CVoigt</declname>
        </param>
        <briefdescription>
<para>Converts a matrix in Voigt notation to a Fourth-order tensor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ScalarType</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar type of the matrix elements. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>CVoigt</parametername>
</parameternamelist>
<parameterdescription>
<para>Voigt notation matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Fourth-order tensor corresponding to the matrix in Voigt notation.</para>
</simplesect>
This function converts a Voigt notation matrix to the corresponding 4th-order tensor. The function uses the <computeroutput>fromVoigt</computeroutput> function to map matrix indices to tensor indices. The resulting tensor is symmetric due to symmetry considerations. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" line="356" column="6" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" bodystart="356" bodyend="367"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Collection of several utilities for dealing with <ref refid="a00412" kindref="compound">Eigen</ref> tensors. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
