<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="a01763" kind="struct" language="C++" prot="private">
    <compoundname>Ikarus::LinearSolverTemplate::SolverImpl</compoundname>
    <basecompoundref prot="public" virt="non-virtual">Ikarus::LinearSolverTemplate&lt; ST &gt;::SolverBase</basecompoundref>
    <templateparamlist>
      <param>
        <type>typename Solver</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="a01763_1a80522173ca3ea16bbbd106384bda5c32" prot="public" static="no" mutable="no">
        <type>Solver</type>
        <definition>Solver Ikarus::LinearSolverTemplate&lt; ST &gt;::SolverImpl&lt; Solver &gt;::solver</definition>
        <argsstring></argsstring>
        <name>solver</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::SolverImpl::solver</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="165" column="12" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" bodystart="165" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="a01763_1a18366a9791d11b1be083fd9ec9ca161b" prot="public" static="no" const="no" explicit="no" inline="yes" final="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::LinearSolverTemplate&lt; ST &gt;::SolverImpl&lt; Solver &gt;::analyzePattern</definition>
        <argsstring>(const SparseMatrixType &amp;A) final</argsstring>
        <name>analyzePattern</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::SolverImpl::analyzePattern</qualifiedname>
        <param>
          <type>const <ref refid="a01755_1ab653f5550c90008600c77abe785963a0" kindref="member">SparseMatrixType</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="123" column="10" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" bodystart="123" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="a01763_1a7c0456690a024e02f68b82b88d2c617e" prot="public" static="no" const="no" explicit="no" inline="yes" final="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::LinearSolverTemplate&lt; ST &gt;::SolverImpl&lt; Solver &gt;::factorize</definition>
        <argsstring>(const SparseMatrixType &amp;A) final</argsstring>
        <name>factorize</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::SolverImpl::factorize</qualifiedname>
        <param>
          <type>const <ref refid="a01755_1ab653f5550c90008600c77abe785963a0" kindref="member">SparseMatrixType</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="128" column="10" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" bodystart="128" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="a01763_1aa7f946c8d18017dacd261dbaa409734d" prot="public" static="no" const="no" explicit="no" inline="yes" final="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::LinearSolverTemplate&lt; ST &gt;::SolverImpl&lt; Solver &gt;::factorize</definition>
        <argsstring>(const DenseMatrixType &amp;A) final</argsstring>
        <name>factorize</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::SolverImpl::factorize</qualifiedname>
        <param>
          <type>const <ref refid="a01755_1a9f52825b9226c080976fa759fc0f5a1b" kindref="member">DenseMatrixType</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="135" column="10" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" bodystart="135" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="a01763_1a156962a2a8094f6300664b87fc526409" prot="public" static="no" const="no" explicit="no" inline="yes" final="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::LinearSolverTemplate&lt; ST &gt;::SolverImpl&lt; Solver &gt;::compute</definition>
        <argsstring>(const SparseMatrixType &amp;A) final</argsstring>
        <name>compute</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::SolverImpl::compute</qualifiedname>
        <param>
          <type>const <ref refid="a01755_1ab653f5550c90008600c77abe785963a0" kindref="member">SparseMatrixType</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="139" column="10" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" bodystart="139" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="a01763_1a12c1f8979cc9d776c2209252837d6f32" prot="public" static="no" const="no" explicit="no" inline="yes" final="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::LinearSolverTemplate&lt; ST &gt;::SolverImpl&lt; Solver &gt;::compute</definition>
        <argsstring>(const DenseMatrixType &amp;A) final</argsstring>
        <name>compute</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::SolverImpl::compute</qualifiedname>
        <param>
          <type>const <ref refid="a01755_1a9f52825b9226c080976fa759fc0f5a1b" kindref="member">DenseMatrixType</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="146" column="10" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" bodystart="146" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="a01763_1a82a32d1ef81193528641ecfe507c2d97" prot="public" static="no" const="yes" explicit="no" inline="yes" final="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::LinearSolverTemplate&lt; ST &gt;::SolverImpl&lt; Solver &gt;::solve</definition>
        <argsstring>(Eigen::VectorX&lt; ScalarType &gt; &amp;x, const Eigen::VectorX&lt; ScalarType &gt; &amp;b) const final</argsstring>
        <name>solve</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::SolverImpl::solve</qualifiedname>
        <param>
          <type>Eigen::VectorX&lt; <ref refid="a01755_1ab222fb68571b860471b41e2c707d5637" kindref="member">ScalarType</ref> &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const Eigen::VectorX&lt; <ref refid="a01755_1ab222fb68571b860471b41e2c707d5637" kindref="member">ScalarType</ref> &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="153" column="10" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" bodystart="153" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="a01763_1a35d3c7cae43273a9eb222da95401a7c9" prot="public" static="no" const="yes" explicit="no" inline="yes" final="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::LinearSolverTemplate&lt; ST &gt;::SolverImpl&lt; Solver &gt;::solve</definition>
        <argsstring>(Eigen::MatrixX2&lt; ScalarType &gt; &amp;x, const Eigen::MatrixX2&lt; ScalarType &gt; &amp;b) const final</argsstring>
        <name>solve</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::SolverImpl::solve</qualifiedname>
        <param>
          <type>Eigen::MatrixX2&lt; <ref refid="a01755_1ab222fb68571b860471b41e2c707d5637" kindref="member">ScalarType</ref> &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const Eigen::MatrixX2&lt; <ref refid="a01755_1ab222fb68571b860471b41e2c707d5637" kindref="member">ScalarType</ref> &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="155" column="10" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" bodystart="155" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="a01763_1aa93d4682a76795e6469e4577147a5067" prot="public" static="no" const="yes" explicit="no" inline="yes" final="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::LinearSolverTemplate&lt; ST &gt;::SolverImpl&lt; Solver &gt;::solve</definition>
        <argsstring>(Eigen::MatrixX3&lt; ScalarType &gt; &amp;x, const Eigen::MatrixX3&lt; ScalarType &gt; &amp;b) const final</argsstring>
        <name>solve</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::SolverImpl::solve</qualifiedname>
        <param>
          <type>Eigen::MatrixX3&lt; <ref refid="a01755_1ab222fb68571b860471b41e2c707d5637" kindref="member">ScalarType</ref> &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const Eigen::MatrixX3&lt; <ref refid="a01755_1ab222fb68571b860471b41e2c707d5637" kindref="member">ScalarType</ref> &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="159" column="10" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" bodystart="159" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="a01763_1ad8f3d812ed0b290c06b1356f135743cc" prot="public" static="no" const="yes" explicit="no" inline="yes" final="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::LinearSolverTemplate&lt; ST &gt;::SolverImpl&lt; Solver &gt;::solve</definition>
        <argsstring>(Eigen::MatrixX&lt; ScalarType &gt; &amp;x, const Eigen::MatrixX&lt; ScalarType &gt; &amp;b) const final</argsstring>
        <name>solve</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::SolverImpl::solve</qualifiedname>
        <param>
          <type>Eigen::MatrixX&lt; <ref refid="a01755_1ab222fb68571b860471b41e2c707d5637" kindref="member">ScalarType</ref> &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const Eigen::MatrixX&lt; <ref refid="a01755_1ab222fb68571b860471b41e2c707d5637" kindref="member">ScalarType</ref> &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="163" column="10" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" bodystart="163" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="a01759_1aceced28f5dec687e06187605d129de42" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void Ikarus::LinearSolverTemplate&lt; ST &gt;::SolverBase::analyzePattern</definition>
        <argsstring>(const DenseMatrixType &amp;) const</argsstring>
        <name>analyzePattern</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::SolverBase::analyzePattern</qualifiedname>
        <param>
          <type>const <ref refid="a01755_1a9f52825b9226c080976fa759fc0f5a1b" kindref="member">DenseMatrixType</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="106" column="18" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" bodystart="106" bodyend="106"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>Ikarus::LinearSolverTemplate&lt; ST &gt;::SolverBase</label>
      </node>
      <node id="1">
        <label>Ikarus::LinearSolverTemplate&lt; ST &gt;::SolverImpl&lt; Solver &gt;</label>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>Ikarus::LinearSolverTemplate&lt; ST &gt;::SolverBase</label>
      </node>
      <node id="1">
        <label>Ikarus::LinearSolverTemplate&lt; ST &gt;::SolverImpl&lt; Solver &gt;</label>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="119" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" bodystart="120" bodyend="166"/>
    <listofallmembers>
      <member refid="a01763_1a18366a9791d11b1be083fd9ec9ca161b" prot="public" virt="non-virtual"><scope>Ikarus::LinearSolverTemplate::SolverImpl</scope><name>analyzePattern</name></member>
      <member refid="a01759_1aceced28f5dec687e06187605d129de42" prot="public" virt="virtual" ambiguityscope="Ikarus::LinearSolverTemplate::SolverBase::"><scope>Ikarus::LinearSolverTemplate::SolverImpl</scope><name>analyzePattern</name></member>
      <member refid="a01763_1a156962a2a8094f6300664b87fc526409" prot="public" virt="non-virtual"><scope>Ikarus::LinearSolverTemplate::SolverImpl</scope><name>compute</name></member>
      <member refid="a01763_1a12c1f8979cc9d776c2209252837d6f32" prot="public" virt="non-virtual"><scope>Ikarus::LinearSolverTemplate::SolverImpl</scope><name>compute</name></member>
      <member refid="a01763_1a7c0456690a024e02f68b82b88d2c617e" prot="public" virt="non-virtual"><scope>Ikarus::LinearSolverTemplate::SolverImpl</scope><name>factorize</name></member>
      <member refid="a01763_1aa7f946c8d18017dacd261dbaa409734d" prot="public" virt="non-virtual"><scope>Ikarus::LinearSolverTemplate::SolverImpl</scope><name>factorize</name></member>
      <member refid="a01763_1a82a32d1ef81193528641ecfe507c2d97" prot="public" virt="non-virtual"><scope>Ikarus::LinearSolverTemplate::SolverImpl</scope><name>solve</name></member>
      <member refid="a01763_1a35d3c7cae43273a9eb222da95401a7c9" prot="public" virt="non-virtual"><scope>Ikarus::LinearSolverTemplate::SolverImpl</scope><name>solve</name></member>
      <member refid="a01763_1aa93d4682a76795e6469e4577147a5067" prot="public" virt="non-virtual"><scope>Ikarus::LinearSolverTemplate::SolverImpl</scope><name>solve</name></member>
      <member refid="a01763_1ad8f3d812ed0b290c06b1356f135743cc" prot="public" virt="non-virtual"><scope>Ikarus::LinearSolverTemplate::SolverImpl</scope><name>solve</name></member>
      <member refid="a01763_1a80522173ca3ea16bbbd106384bda5c32" prot="public" virt="non-virtual"><scope>Ikarus::LinearSolverTemplate::SolverImpl</scope><name>solver</name></member>
      <member refid="a01759_1a728f77df6abe009fa902bbb240c114b8" prot="public" virt="virtual"><scope>Ikarus::LinearSolverTemplate::SolverImpl</scope><name>~SolverBase</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
