<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="a02102" kind="concept">
    <compoundname>Ikarus::Concepts::FlatAssembler</compoundname>
    <includes refid="a03101" local="no">ikarus/utils/concepts.hh</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
    <initializer>template&lt;typename T&gt;
concept <ref refid="a02102" kindref="compound">Ikarus::Concepts::FlatAssembler</ref> =  requires(T t, const typename T::FERequirement&amp; req,
                                   typename T::AffordanceCollectionType affordance, DBCOption dbcOption) {
    { t.requirement() } -&gt; std::convertible_to&lt;typename T::FERequirement&amp;&gt;;
    { t.affordanceCollection() } -&gt; std::convertible_to&lt;typename T::AffordanceCollectionType&gt;;
    { t.dBCOption() } -&gt; std::convertible_to&lt;DBCOption&gt;;

    { t.bind(req, affordance, dbcOption) } -&gt; std::same_as&lt;void&gt;;
    { t.bind(req) } -&gt; std::same_as&lt;void&gt;;
    { t.bind(affordance) } -&gt; std::same_as&lt;void&gt;;
    { t.bind(dbcOption) } -&gt; std::same_as&lt;void&gt;;

    { t.bound() } -&gt; std::convertible_to&lt;bool&gt;;
    { t.boundToRequirement() } -&gt; std::convertible_to&lt;bool&gt;;
    { t.boundToAffordanceCollection() } -&gt; std::convertible_to&lt;bool&gt;;
    { t.boundToDBCOption() } -&gt; std::convertible_to&lt;bool&gt;;
    { t.estimateOfConnectivity() } -&gt; std::convertible_to&lt;size_t&gt;;

    { t.createFullVector(std::declval&lt;Eigen::Ref&lt;const Eigen::VectorXd&gt;&gt;()) } -&gt; std::convertible_to&lt;Eigen::VectorXd&gt;;
    { t.constraintsBelow(std::declval&lt;size_t&gt;()) } -&gt; std::convertible_to&lt;size_t&gt;;
    { t.isConstrained(std::declval&lt;size_t&gt;()) } -&gt; std::convertible_to&lt;bool&gt;;
    { t.size() } -&gt; std::convertible_to&lt;size_t&gt;;
    { t.reducedSize() } -&gt; std::convertible_to&lt;size_t&gt;;
  }    </initializer>
    <briefdescription>
<para>Concept representing the requirements for a FlatAssembler.</para>
<para>A type T satisfies FlatAssembler if it provides the necessary member functions and data types for assembling sparse matrices in a flat structure. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/__w/ikarus/ikarus/repo/ikarus/utils/concepts.hh" line="498" column="3"/>
  </compounddef>
</doxygen>
