<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="a00338" kind="file" language="C++">
    <compoundname>simpleassemblers.inl</compoundname>
    <includedby refid="a00335" local="yes">simpleassemblers.hh</includedby>
    <invincdepgraph>
      <node id="2">
        <label>simpleassemblers.hh</label>
        <link refid="a00335"/>
      </node>
      <node id="1">
        <label>simpleassemblers.inl</label>
        <link refid="a00338"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innernamespace refid="a00411">Ikarus</innernamespace>
    <briefdescription>
<para>Implementation of assembler functions. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>SPDX-FileCopyrightText:<sp/>2021-2025<sp/>The<sp/>Ikarus<sp/>Developers<sp/>mueller@ibb.uni-stuttgart.de</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPDX-License-Identifier:<sp/>LGPL-3.0-or-later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="a00411" kindref="compound">Ikarus</ref><sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FEC&gt;</highlight></codeline>
<codeline lineno="15" refid="a01310_1a8edb919038d3239ca7bcc00df81bfa60" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="a01298_1a16ca73d65a203ae40cc5fde52a842d55" kindref="member">ScalarFlatAssembler&lt;B, FEC&gt;::ScalarType</ref>&amp;<sp/><ref refid="a01310_1a8edb919038d3239ca7bcc00df81bfa60" kindref="member">ScalarFlatAssembler&lt;B, FEC&gt;::getScalarImpl</ref>(</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01294_1a333c76dd0740ef9d6f4e8424021f0315" kindref="member">FERequirement</ref>&amp;<sp/>feRequirements,<sp/><ref refid="a00411_1af6f894084edd9109762b86222995ef2a" kindref="member">ScalarAffordance</ref><sp/>affordance)<sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/>scal_<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>fe<sp/>:<sp/>this-&gt;finiteElements())<sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>scal_<sp/>+=<sp/>calculateScalar(fe,<sp/>feRequirements,<sp/>affordance);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>scal_;</highlight></codeline>
<codeline lineno="22"><highlight class="normal">}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FEC&gt;</highlight></codeline>
<codeline lineno="25" refid="a01294_1a5ca172ae99902193abf31ab542ff4aaf" refkind="member"><highlight class="normal">Eigen::VectorXd<sp/><ref refid="a01294_1a5ca172ae99902193abf31ab542ff4aaf" kindref="member">FlatAssemblerBase&lt;B, FEC&gt;::createFullVector</ref>(Eigen::Ref&lt;const<sp/>Eigen::VectorXd&gt;<sp/>reducedVector)<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/>assert(reducedVector.size()<sp/>==<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Eigen::Index</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(this-&gt;reducedSize())<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;The<sp/>reduced<sp/>vector<sp/>you<sp/>passed<sp/>has<sp/>the<sp/>wrong<sp/>dimensions.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>Eigen::Index<sp/>reducedCounter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>Eigen::VectorXd<sp/>fullVec(this-&gt;size());</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Eigen::Index<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>fullVec.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;isConstrained(i))<sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++reducedCounter;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fullVec[i]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fullVec[i]<sp/>=<sp/>reducedVector[i<sp/>-<sp/>reducedCounter];</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fullVec;</highlight></codeline>
<codeline lineno="39"><highlight class="normal">}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FEC&gt;</highlight></codeline>
<codeline lineno="42" refid="a01314_1a51d46c85768f931f6b572005f101d955" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a01314_1a51d46c85768f931f6b572005f101d955" kindref="member">VectorFlatAssembler&lt;B, FEC&gt;::assembleRawVectorImpl</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01294_1a333c76dd0740ef9d6f4e8424021f0315" kindref="member">FERequirement</ref>&amp;<sp/>feRequirements,</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00411_1aab9e3e38507d1db7602bc750718c302a" kindref="member">VectorAffordance</ref><sp/>affordance,</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="a01302_1a7ffbdbded5dd399d9aae926c5fa83426" kindref="member">VectorFlatAssembler::VectorType</ref>&amp;<sp/>assemblyVec)<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>assemblyVec.setZero(this-&gt;size());</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>Eigen::VectorXd<sp/>vecLocal;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>std::vector&lt;GlobalIndex&gt;<sp/>dofs;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>fe<sp/>:<sp/>this-&gt;finiteElements())<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>vecLocal.setZero(fe.size());</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>dofs.resize(0);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>calculateVector(fe,<sp/>feRequirements,<sp/>affordance,<sp/>vecLocal);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="a00415_1a44e16df41148f7e4538be224814a3423" kindref="member">FEHelper::globalIndices</ref>;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="a00415_1a44e16df41148f7e4538be224814a3423" kindref="member">globalIndices</ref>(fe,<sp/>dofs);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>id<sp/>:<sp/>dofs)<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assemblyVec(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">[0])<sp/>+=<sp/>vecLocal(i);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FEC&gt;</highlight></codeline>
<codeline lineno="62" refid="a01314_1a8aa822f1fcf516063591144081692e5f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="a01314" kindref="compound">VectorFlatAssembler&lt;B, FEC&gt;::VectorType</ref>&amp;<sp/><ref refid="a01314_1a8aa822f1fcf516063591144081692e5f" kindref="member">VectorFlatAssembler&lt;B, FEC&gt;::getRawVectorImpl</ref>(</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01294_1a333c76dd0740ef9d6f4e8424021f0315" kindref="member">FERequirement</ref>&amp;<sp/>feRequirements,<sp/><ref refid="a00411_1aab9e3e38507d1db7602bc750718c302a" kindref="member">VectorAffordance</ref><sp/>affordance)<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>assembleRawVectorImpl(feRequirements,<sp/>affordance,<sp/>vecRaw_);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vecRaw_;</highlight></codeline>
<codeline lineno="66"><highlight class="normal">}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FEC&gt;</highlight></codeline>
<codeline lineno="69" refid="a01314_1aa7b5dcb6865242054999644554a0f50c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="a01314" kindref="compound">VectorFlatAssembler&lt;B, FEC&gt;::VectorType</ref>&amp;<sp/><ref refid="a01314_1aa7b5dcb6865242054999644554a0f50c" kindref="member">VectorFlatAssembler&lt;B, FEC&gt;::getVectorImpl</ref>(</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01294_1a333c76dd0740ef9d6f4e8424021f0315" kindref="member">FERequirement</ref>&amp;<sp/>feRequirements,<sp/><ref refid="a00411_1aab9e3e38507d1db7602bc750718c302a" kindref="member">VectorAffordance</ref><sp/>affordance)<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>assembleRawVectorImpl(feRequirements,<sp/>affordance,<sp/>vec_);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0U;<sp/>i<sp/>&lt;<sp/>this-&gt;size();<sp/>++i)</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;isConstrained(i))</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vec_[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vec_;</highlight></codeline>
<codeline lineno="76"><highlight class="normal">}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FEC&gt;</highlight></codeline>
<codeline lineno="79" refid="a01314_1aa463b9549c5dc92de491bf91a0ff5891" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="a01314" kindref="compound">VectorFlatAssembler&lt;B, FEC&gt;::VectorType</ref>&amp;<sp/><ref refid="a01314_1aa463b9549c5dc92de491bf91a0ff5891" kindref="member">VectorFlatAssembler&lt;B, FEC&gt;::getReducedVectorImpl</ref>(</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01294_1a333c76dd0740ef9d6f4e8424021f0315" kindref="member">FERequirement</ref>&amp;<sp/>feRequirements,<sp/><ref refid="a00411_1aab9e3e38507d1db7602bc750718c302a" kindref="member">VectorAffordance</ref><sp/>affordance)<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>vecRed_.setZero(this-&gt;reducedSize());</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>Eigen::VectorXd<sp/>vecLocal;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>std::vector&lt;GlobalIndex&gt;<sp/>dofs;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>fe<sp/>:<sp/>this-&gt;finiteElements())<sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>vecLocal.setZero(fe.size());</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>dofs.resize(0);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>calculateVector(fe,<sp/>feRequirements,<sp/>affordance,<sp/>vecLocal);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="a00415_1a44e16df41148f7e4538be224814a3423" kindref="member">FEHelper::globalIndices</ref>;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="a00415_1a44e16df41148f7e4538be224814a3423" kindref="member">globalIndices</ref>(fe,<sp/>dofs);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(dofs.size())<sp/>==<sp/>vecLocal.size()<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>returned<sp/>vector<sp/>has<sp/>wrong<sp/>rowSize!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>localConstrainedCounter<sp/>=<sp/>0;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>dofIndex<sp/>:<sp/>dofs)<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;isConstrained(dofIndex))<sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++localConstrainedCounter;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vecRed_(dofIndex[0]<sp/>-<sp/>this-&gt;constraintsBelow(dofIndex[0]))<sp/>+=<sp/>vecLocal[localConstrainedCounter++];</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vecRed_;</highlight></codeline>
<codeline lineno="100"><highlight class="normal">}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FEC&gt;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a01318" kindref="compound">SparseFlatAssembler&lt;B, FEC&gt;::assembleRawMatrixImpl</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FERequirement&amp;<sp/>feRequirements,</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00411_1a390d5311179ec61d163a29c943b3d1a0" kindref="member">MatrixAffordance</ref><sp/>affordance,</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="a01306_1a7e7b9863a583cd74316bbce5c6109327" kindref="member">SparseFlatAssembler::MatrixType</ref>&amp;<sp/>assemblyMat)<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>assemblyMat.coeffs().setZero();</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>Eigen::MatrixXd<sp/>A;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>elementIndex<sp/>=<sp/>0;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>fe<sp/>:<sp/>this-&gt;finiteElements())<sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>A.setZero(fe.size(),<sp/>fe.size());</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>calculateMatrix(fe,<sp/>feRequirements,<sp/>affordance,<sp/>A);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Eigen::Index</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(std::sqrt(elementLinearIndices_[elementIndex].size()))<sp/>==<sp/>A.rows()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;The<sp/>returned<sp/>matrix<sp/>has<sp/>wrong<sp/>rowSize!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Eigen::Index</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(std::sqrt(elementLinearIndices_[elementIndex].size()))<sp/>==<sp/>A.cols()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;The<sp/>returned<sp/>matrix<sp/>has<sp/>wrong<sp/>colSize!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Eigen::Index<sp/>linearIndex<sp/>=<sp/>0;<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>matrixEntry<sp/>:<sp/>A.reshaped())</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assemblyMat.coeffs()(elementLinearIndices_[elementIndex][linearIndex++])<sp/>+=<sp/>matrixEntry;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>++elementIndex;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal">}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FEC&gt;</highlight></codeline>
<codeline lineno="122" refid="a01318_1ad58d88f03072e6771149a6502e82fc42" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="a01318" kindref="compound">SparseFlatAssembler&lt;B, FEC&gt;::MatrixType</ref>&amp;<sp/><ref refid="a01318_1ad58d88f03072e6771149a6502e82fc42" kindref="member">SparseFlatAssembler&lt;B, FEC&gt;::getRawMatrixImpl</ref>(</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01294_1a333c76dd0740ef9d6f4e8424021f0315" kindref="member">FERequirement</ref>&amp;<sp/>feRequirements,<sp/><ref refid="a00411_1a390d5311179ec61d163a29c943b3d1a0" kindref="member">MatrixAffordance</ref><sp/>affordance)<sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/>sparsePreProcessorRaw_)<sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>preProcessSparseMatrix(spMatRaw_);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>sparsePreProcessorRaw_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>assembleRawMatrixImpl(feRequirements,<sp/>affordance,<sp/>spMatRaw_);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>spMatRaw_;</highlight></codeline>
<codeline lineno="131"><highlight class="normal">}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FEC&gt;</highlight></codeline>
<codeline lineno="134" refid="a01318_1a5fdc2ec49f6fdb8c9024d0e1e5da12f4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="a01318" kindref="compound">SparseFlatAssembler&lt;B, FEC&gt;::MatrixType</ref>&amp;<sp/><ref refid="a01318_1a5fdc2ec49f6fdb8c9024d0e1e5da12f4" kindref="member">SparseFlatAssembler&lt;B, FEC&gt;::getMatrixImpl</ref>(</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01294_1a333c76dd0740ef9d6f4e8424021f0315" kindref="member">FERequirement</ref>&amp;<sp/>feRequirements,<sp/><ref refid="a00411_1a390d5311179ec61d163a29c943b3d1a0" kindref="member">MatrixAffordance</ref><sp/>affordance)<sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/>sparsePreProcessor_)<sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>preProcessSparseMatrix(spMat_);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>sparsePreProcessor_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>assembleRawMatrixImpl(feRequirements,<sp/>affordance,<sp/>spMat_);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0U;<sp/>i<sp/>&lt;<sp/>this-&gt;size();<sp/>++i)</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;isConstrained(i))</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>spMat_.col(i)<sp/>*=<sp/>0;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0U;<sp/>i<sp/>&lt;<sp/>this-&gt;size();<sp/>++i)</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;isConstrained(i))</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>spMat_.row(i)<sp/>*=<sp/>0;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0U;<sp/>i<sp/>&lt;<sp/>this-&gt;size();<sp/>++i)</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;isConstrained(i))</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>spMat_.diagonal()[i]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>spMat_;</highlight></codeline>
<codeline lineno="151"><highlight class="normal">}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FEC&gt;</highlight></codeline>
<codeline lineno="154" refid="a01318_1ac9cadd5e897da6813e4f62085892b00d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="a01318" kindref="compound">SparseFlatAssembler&lt;B, FEC&gt;::MatrixType</ref>&amp;<sp/><ref refid="a01318_1ac9cadd5e897da6813e4f62085892b00d" kindref="member">SparseFlatAssembler&lt;B, FEC&gt;::getReducedMatrixImpl</ref>(</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01294_1a333c76dd0740ef9d6f4e8424021f0315" kindref="member">FERequirement</ref>&amp;<sp/>feRequirements,<sp/><ref refid="a00411_1a390d5311179ec61d163a29c943b3d1a0" kindref="member">MatrixAffordance</ref><sp/>affordance)<sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/>sparsePreProcessorReduced_)<sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>preProcessSparseMatrixReduced(spMatReduced_);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>sparsePreProcessorReduced_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>spMatReduced_.coeffs().setZero();</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>Eigen::MatrixXd<sp/>A;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>std::vector&lt;GlobalIndex&gt;<sp/>dofs;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>elementIndex<sp/>=<sp/>0;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>fe<sp/>:<sp/>this-&gt;finiteElements())<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>A.setZero(fe.size(),<sp/>fe.size());</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>dofs.resize(0);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>calculateMatrix(fe,<sp/>feRequirements,<sp/>affordance,<sp/>A);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="a00415_1a44e16df41148f7e4538be224814a3423" kindref="member">FEHelper::globalIndices</ref>;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="a00415_1a44e16df41148f7e4538be224814a3423" kindref="member">globalIndices</ref>(fe,<sp/>dofs);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(dofs.size()<sp/>==<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(A.rows())<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>returned<sp/>matrix<sp/>has<sp/>wrong<sp/>rowSize!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(dofs.size()<sp/>==<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(A.cols())<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>returned<sp/>matrix<sp/>has<sp/>wrong<sp/>colSize!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Index<sp/>linearIndex<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>0U;<sp/>r<sp/>&lt;<sp/>dofs.size();<sp/>++r)<sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;isConstrained(dofs[r][0]))</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>0U;<sp/>c<sp/>&lt;<sp/>dofs.size();<sp/>++c)<sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;isConstrained(dofs[c][0]))</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spMatReduced_.coeffs()(elementLinearReducedIndices_[elementIndex][linearIndex++])<sp/>+=<sp/>A(r,<sp/>c);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>++elementIndex;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>spMatReduced_;</highlight></codeline>
<codeline lineno="186"><highlight class="normal">}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FEC&gt;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a01318" kindref="compound">SparseFlatAssembler&lt;B, FEC&gt;::createOccupationPattern</ref>(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="a01306_1a7e7b9863a583cd74316bbce5c6109327" kindref="member">SparseFlatAssembler::MatrixType</ref>&amp;<sp/>assemblyMat)<sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>assemblyMat.resize(this-&gt;size(),<sp/>this-&gt;size());</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/>std::vector&lt;Eigen::Triplet&lt;double&gt;&gt;<sp/>vectorOfTriples;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>vectorOfTriples.reserve(this-&gt;estimateOfConnectivity());</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>std::vector&lt;GlobalIndex&gt;<sp/>dofs;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>fe<sp/>:<sp/>this-&gt;finiteElements())<sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>dofs.resize(0);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="a00415_1a44e16df41148f7e4538be224814a3423" kindref="member">FEHelper::globalIndices</ref>;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="a00415_1a44e16df41148f7e4538be224814a3423" kindref="member">globalIndices</ref>(fe,<sp/>dofs);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>idi<sp/>:<sp/>dofs)</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>idj<sp/>:<sp/>dofs)</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vectorOfTriples.emplace_back(idi[0],<sp/>idj[0],<sp/>0.0);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>assemblyMat.setFromTriplets(vectorOfTriples.begin(),<sp/>vectorOfTriples.end());</highlight></codeline>
<codeline lineno="204"><highlight class="normal">}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FEC&gt;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SparseFlatAssembler&lt;B,<sp/>FEC&gt;::createReducedOccupationPattern(</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="a01306_1a7e7b9863a583cd74316bbce5c6109327" kindref="member">SparseFlatAssembler::MatrixType</ref>&amp;<sp/>assemblyMat)<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>assemblyMat.resize(this-&gt;reducedSize(),<sp/>this-&gt;reducedSize());</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>std::vector&lt;Eigen::Triplet&lt;double&gt;&gt;<sp/>vectorOfTriples;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::size;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>vectorOfTriples.reserve(this-&gt;estimateOfConnectivity());</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>std::vector&lt;GlobalIndex&gt;<sp/>dofs;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>fe<sp/>:<sp/>this-&gt;finiteElements())<sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>dofs.resize(0);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="a00415_1a44e16df41148f7e4538be224814a3423" kindref="member">FEHelper::globalIndices</ref>;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="a00415_1a44e16df41148f7e4538be224814a3423" kindref="member">globalIndices</ref>(fe,<sp/>dofs);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>0U;<sp/>r<sp/>&lt;<sp/>dofs.size();<sp/>++r)<sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;isConstrained(dofs[r][0]))</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>0U;<sp/>c<sp/>&lt;<sp/>dofs.size();<sp/>++c)<sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;isConstrained(dofs[c][0]))</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vectorOfTriples.emplace_back(dofs[r][0]<sp/>-<sp/>this-&gt;constraintsBelow(dofs[r][0]),</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dofs[c][0]<sp/>-<sp/>this-&gt;constraintsBelow(dofs[c][0]),<sp/>0.0);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/>assemblyMat.setFromTriplets(vectorOfTriples.begin(),<sp/>vectorOfTriples.end());</highlight></codeline>
<codeline lineno="233"><highlight class="normal">}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FEC&gt;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SparseFlatAssembler&lt;B,<sp/>FEC&gt;::createLinearDOFsPerElement(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="a01306_1a7e7b9863a583cd74316bbce5c6109327" kindref="member">SparseFlatAssembler::MatrixType</ref>&amp;<sp/>assemblyMat)<sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>std::vector&lt;GlobalIndex&gt;<sp/>dofs;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>fe<sp/>:<sp/>this-&gt;finiteElements())<sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>dofs.resize(0);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="a00415_1a44e16df41148f7e4538be224814a3423" kindref="member">FEHelper::globalIndices</ref>;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="a00415_1a44e16df41148f7e4538be224814a3423" kindref="member">globalIndices</ref>(fe,<sp/>dofs);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>elementLinearIndices_.emplace_back(Dune::power(dofs.size(),<sp/>2));</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Eigen::Index<sp/>linearIndexOfElement<sp/>=<sp/>0;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>c<sp/>:<sp/>dofs)</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>r<sp/>:<sp/>dofs)</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementLinearIndices_.back()[linearIndexOfElement++]<sp/>=<sp/>assemblyMat.getLinearIndex(r[0],<sp/>c[0]);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="247"><highlight class="normal">}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FEC&gt;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SparseFlatAssembler&lt;B,<sp/>FEC&gt;::createLinearDOFsPerElementReduced(</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="a01306_1a7e7b9863a583cd74316bbce5c6109327" kindref="member">SparseFlatAssembler::MatrixType</ref>&amp;<sp/>assemblyMat)<sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/>std::vector&lt;GlobalIndex&gt;<sp/>dofs;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>fe<sp/>:<sp/>this-&gt;finiteElements())<sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>dofs.resize(0);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="a00415_1a44e16df41148f7e4538be224814a3423" kindref="member">FEHelper::globalIndices</ref>;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="a00415_1a44e16df41148f7e4538be224814a3423" kindref="member">globalIndices</ref>(fe,<sp/>dofs);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>elementLinearReducedIndices_.emplace_back();</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>0U;<sp/>r<sp/>&lt;<sp/>dofs.size();<sp/>++r)<sp/>{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;isConstrained(dofs[r][0]))</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>0U;<sp/>c<sp/>&lt;<sp/>dofs.size();<sp/>++c)<sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;isConstrained(dofs[c][0]))</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementLinearReducedIndices_.back().push_back(assemblyMat.getLinearIndex(</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dofs[r][0]<sp/>-<sp/>this-&gt;constraintsBelow(dofs[r][0]),<sp/>dofs[c][0]<sp/>-<sp/>this-&gt;constraintsBelow(dofs[c][0])));</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="269"><highlight class="normal">}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FEC&gt;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SparseFlatAssembler&lt;B,<sp/>FEC&gt;::preProcessSparseMatrix(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="a01306_1a7e7b9863a583cd74316bbce5c6109327" kindref="member">SparseFlatAssembler::MatrixType</ref>&amp;<sp/>assemblyMat)<sp/>{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/>createOccupationPattern(assemblyMat);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>createLinearDOFsPerElement(assemblyMat);</highlight></codeline>
<codeline lineno="275"><highlight class="normal">}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FEC&gt;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SparseFlatAssembler&lt;B,<sp/>FEC&gt;::preProcessSparseMatrixReduced(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="a01306_1a7e7b9863a583cd74316bbce5c6109327" kindref="member">SparseFlatAssembler::MatrixType</ref>&amp;<sp/>assemblyMat)<sp/>{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/>createReducedOccupationPattern(assemblyMat);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>createLinearDOFsPerElementReduced(assemblyMat);</highlight></codeline>
<codeline lineno="281"><highlight class="normal">}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FEC&gt;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DenseFlatAssembler&lt;B,<sp/>FEC&gt;::assembleRawMatrixImpl(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FERequirement&amp;<sp/>feRequirements,<sp/><ref refid="a00411_1a390d5311179ec61d163a29c943b3d1a0" kindref="member">MatrixAffordance</ref><sp/>affordance,</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="a01306_1a7e7b9863a583cd74316bbce5c6109327" kindref="member">DenseFlatAssembler::MatrixType</ref>&amp;<sp/>assemblyMat)<sp/>{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>assemblyMat.setZero(this-&gt;size(),<sp/>this-&gt;size());</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/>Eigen::MatrixXd<sp/>matLocal;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/>std::vector&lt;GlobalIndex&gt;<sp/>dofs;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>fe<sp/>:<sp/>this-&gt;finiteElements())<sp/>{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>matLocal.setZero(fe.size(),<sp/>fe.size());</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>dofs.resize(0);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>calculateMatrix(fe,<sp/>feRequirements,<sp/>affordance,<sp/>matLocal);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="a00415_1a44e16df41148f7e4538be224814a3423" kindref="member">FEHelper::globalIndices</ref>;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="a00415_1a44e16df41148f7e4538be224814a3423" kindref="member">globalIndices</ref>(fe,<sp/>dofs);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>idi<sp/>:<sp/>dofs)<sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>idj<sp/>:<sp/>dofs)<sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assemblyMat(idi[0],<sp/>idj[0])<sp/>+=<sp/>matLocal(i,<sp/>j);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++j;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="303"><highlight class="normal">}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FEC&gt;</highlight></codeline>
<codeline lineno="306" refid="a01322_1a1f58e32be40c7fe0a6a422d3eb22485c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="a01322" kindref="compound">DenseFlatAssembler&lt;B, FEC&gt;::MatrixType</ref>&amp;<sp/><ref refid="a01322_1a1f58e32be40c7fe0a6a422d3eb22485c" kindref="member">DenseFlatAssembler&lt;B, FEC&gt;::getRawMatrixImpl</ref>(</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01294_1a333c76dd0740ef9d6f4e8424021f0315" kindref="member">FERequirement</ref>&amp;<sp/>feRequirements,<sp/><ref refid="a00411_1a390d5311179ec61d163a29c943b3d1a0" kindref="member">MatrixAffordance</ref><sp/>affordance)<sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/>assembleRawMatrixImpl(feRequirements,<sp/>affordance,<sp/>matRaw_);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>matRaw_;</highlight></codeline>
<codeline lineno="310"><highlight class="normal">}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FEC&gt;</highlight></codeline>
<codeline lineno="313" refid="a01322_1aa6c8f8c9b75adac4d0f388f110663b9a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="a01322" kindref="compound">DenseFlatAssembler&lt;B, FEC&gt;::MatrixType</ref>&amp;<sp/><ref refid="a01322_1aa6c8f8c9b75adac4d0f388f110663b9a" kindref="member">DenseFlatAssembler&lt;B, FEC&gt;::getMatrixImpl</ref>(</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01294_1a333c76dd0740ef9d6f4e8424021f0315" kindref="member">FERequirement</ref>&amp;<sp/>feRequirements,<sp/><ref refid="a00411_1a390d5311179ec61d163a29c943b3d1a0" kindref="member">MatrixAffordance</ref><sp/>affordance)<sp/>{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/>assembleRawMatrixImpl(feRequirements,<sp/>affordance,<sp/>mat_);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0U;<sp/>i<sp/>&lt;<sp/>this-&gt;size();<sp/>++i)</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;isConstrained(i))</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mat_.col(i).setZero();</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0U;<sp/>i<sp/>&lt;<sp/>this-&gt;size();<sp/>++i)</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;isConstrained(i))</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mat_.row(i).setZero();</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0U;<sp/>i<sp/>&lt;<sp/>this-&gt;size();<sp/>++i)</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;isConstrained(i))</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mat_(i,<sp/>i)<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mat_;</highlight></codeline>
<codeline lineno="326"><highlight class="normal">}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FEC&gt;</highlight></codeline>
<codeline lineno="329" refid="a01322_1ab432c3af8014665b84934d7464eb234a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="a01322" kindref="compound">DenseFlatAssembler&lt;B, FEC&gt;::MatrixType</ref>&amp;<sp/><ref refid="a01322_1ab432c3af8014665b84934d7464eb234a" kindref="member">DenseFlatAssembler&lt;B, FEC&gt;::getReducedMatrixImpl</ref>(</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01294_1a333c76dd0740ef9d6f4e8424021f0315" kindref="member">FERequirement</ref>&amp;<sp/>feRequirements,<sp/><ref refid="a00411_1a390d5311179ec61d163a29c943b3d1a0" kindref="member">MatrixAffordance</ref><sp/>affordance)<sp/>{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/>matRed_.setZero(this-&gt;reducedSize(),<sp/>this-&gt;reducedSize());</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/>Eigen::MatrixXd<sp/>matLocal;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/>std::vector&lt;GlobalIndex&gt;<sp/>dofs;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>fe<sp/>:<sp/>this-&gt;finiteElements())<sp/>{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>matLocal.setZero(fe.size(),<sp/>fe.size());</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>dofs.resize(0);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>calculateMatrix(fe,<sp/>feRequirements,<sp/>affordance,<sp/>matLocal);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="a00415_1a44e16df41148f7e4538be224814a3423" kindref="member">FEHelper::globalIndices</ref>;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="a00415_1a44e16df41148f7e4538be224814a3423" kindref="member">globalIndices</ref>(fe,<sp/>dofs);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(dofs.size()<sp/>==<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(matLocal.rows())<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>returned<sp/>matrix<sp/>has<sp/>wrong<sp/>rowSize!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(dofs.size()<sp/>==<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(matLocal.cols())<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>returned<sp/>matrix<sp/>has<sp/>wrong<sp/>colSize!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>0U;<sp/>r<sp/>&lt;<sp/>dofs.size();<sp/>++r)<sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;isConstrained(dofs[r][0]))<sp/>{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>0U;<sp/>c<sp/>&lt;<sp/>dofs.size();<sp/>++c)<sp/>{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;isConstrained(dofs[c][0]))<sp/>{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matRed_(dofs[r][0]<sp/>-<sp/>this-&gt;constraintsBelow(dofs[r][0]),<sp/>dofs[c][0]<sp/>-<sp/>this-&gt;constraintsBelow(dofs[c][0]))<sp/>+=</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matLocal(r,<sp/>c);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>matRed_;</highlight></codeline>
<codeline lineno="357"><highlight class="normal">}</highlight></codeline>
<codeline lineno="358"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Ikarus</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/__w/ikarus/ikarus/repo/ikarus/assembler/simpleassemblers.inl"/>
  </compounddef>
</doxygen>
