<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="a01794" kind="class" language="C++" prot="public">
    <compoundname>ScalarWrapper</compoundname>
    <includes refid="a00146" local="no">ikarus/python/finiteelements/scalarwrapper.hh</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="a01794_1af539d8935624e801016ecdd02852e493" prot="public" static="no">
        <type>Dune::ResolveRef_t&lt; T &gt;</type>
        <definition>using ScalarWrapper&lt; T &gt;::RawScalarType =  Dune::ResolveRef_t&lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>RawScalarType</name>
        <qualifiedname>ScalarWrapper::RawScalarType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/python/finiteelements/scalarwrapper.hh" line="35" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/python/finiteelements/scalarwrapper.hh" bodystart="35" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="a01794_1ab0df51bf578d594ce93cc6631ee7124c" prot="private" static="no" mutable="no">
        <type>T</type>
        <definition>T ScalarWrapper&lt; T &gt;::val</definition>
        <argsstring></argsstring>
        <name>val</name>
        <qualifiedname>ScalarWrapper::val</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/python/finiteelements/scalarwrapper.hh" line="126" column="5" bodyfile="/__w/ikarus/ikarus/repo/ikarus/python/finiteelements/scalarwrapper.hh" bodystart="126" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="a01794_1a80b399092b2ac4564095a63271e34acd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>ScalarWrapper&lt; T &gt;::ScalarWrapper</definition>
        <argsstring>(T val)</argsstring>
        <name>ScalarWrapper</name>
        <qualifiedname>ScalarWrapper::ScalarWrapper</qualifiedname>
        <param>
          <type>T</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Constructs a <ref refid="a01794" kindref="compound">ScalarWrapper</ref> with the given value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The initial value of the wrapped scalar. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/python/finiteelements/scalarwrapper.hh" line="32" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/python/finiteelements/scalarwrapper.hh" bodystart="32" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="a01794_1a66478624f4d84c5223afc1cc339691ff" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>ScalarWrapper&lt; T &gt;::operator RawScalarType &amp;</definition>
        <argsstring>() const</argsstring>
        <name>operator RawScalarType &amp;</name>
        <qualifiedname>ScalarWrapper::operator RawScalarType &amp;</qualifiedname>
        <briefdescription>
<para>Implicitly converts the wrapper to a reference of the raw scalar type. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A reference to the wrapped scalar value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/python/finiteelements/scalarwrapper.hh" line="41" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/python/finiteelements/scalarwrapper.hh" bodystart="41" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="a01794_1a0f885d047f898e549e8ece9cac3adea8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="a01794_1af539d8935624e801016ecdd02852e493" kindref="member">RawScalarType</ref> &amp;</type>
        <definition>const RawScalarType &amp; ScalarWrapper&lt; T &gt;::value</definition>
        <argsstring>() const</argsstring>
        <name>value</name>
        <qualifiedname>ScalarWrapper::value</qualifiedname>
        <briefdescription>
<para>Gets the wrapped scalar value as a constant reference. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A constant reference to the wrapped scalar value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/python/finiteelements/scalarwrapper.hh" line="47" column="23" bodyfile="/__w/ikarus/ikarus/repo/ikarus/python/finiteelements/scalarwrapper.hh" bodystart="47" bodyend="47"/>
        <referencedby refid="a01794_1a01d184d748414b40f51b06e891bc309b" compoundref="a00146" startline="83" endline="83">ScalarWrapper&lt; T &gt;::operator*</referencedby>
        <referencedby refid="a00429_1a32c3989a8ef1dbc581313ef17a0c6f5b" compoundref="a00152" startline="14" endline="48">Ikarus::Python::registerFERequirement</referencedby>
      </memberdef>
      <memberdef kind="function" id="a01794_1a58aca37297368d4b3122461982ff3074" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="a01794_1af539d8935624e801016ecdd02852e493" kindref="member">RawScalarType</ref> &amp;</type>
        <definition>RawScalarType &amp; ScalarWrapper&lt; T &gt;::value</definition>
        <argsstring>()</argsstring>
        <name>value</name>
        <qualifiedname>ScalarWrapper::value</qualifiedname>
        <briefdescription>
<para>Gets the wrapped scalar value as a reference. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A reference to the wrapped scalar value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/python/finiteelements/scalarwrapper.hh" line="53" column="17" bodyfile="/__w/ikarus/ikarus/repo/ikarus/python/finiteelements/scalarwrapper.hh" bodystart="53" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="a01794_1a7c5087c50a8cda53bdb7dc0b1af65c7d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="a01794_1af539d8935624e801016ecdd02852e493" kindref="member">RawScalarType</ref></type>
        <definition>RawScalarType ScalarWrapper&lt; T &gt;::operator+</definition>
        <argsstring>(const ScalarWrapper &amp;v) const</argsstring>
        <name>operator+</name>
        <qualifiedname>ScalarWrapper::operator+</qualifiedname>
        <param>
          <type>const <ref refid="a01794" kindref="compound">ScalarWrapper</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Adds the values of two <ref refid="a01794" kindref="compound">ScalarWrapper</ref> instances. This returns the raw type since this makes makes no since when T is of reference_wrapper type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>Another <ref refid="a01794" kindref="compound">ScalarWrapper</ref> instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of the addition as a new scalar value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/python/finiteelements/scalarwrapper.hh" line="60" column="17" bodyfile="/__w/ikarus/ikarus/repo/ikarus/python/finiteelements/scalarwrapper.hh" bodystart="60" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="a01794_1a14f5de10abdaaa63ef31cf3398b75122" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="a01794_1af539d8935624e801016ecdd02852e493" kindref="member">RawScalarType</ref></type>
        <definition>RawScalarType ScalarWrapper&lt; T &gt;::operator-</definition>
        <argsstring>(const ScalarWrapper &amp;v) const</argsstring>
        <name>operator-</name>
        <qualifiedname>ScalarWrapper::operator-</qualifiedname>
        <param>
          <type>const <ref refid="a01794" kindref="compound">ScalarWrapper</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Subtracts the value of another <ref refid="a01794" kindref="compound">ScalarWrapper</ref> from this instance. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>Another <ref refid="a01794" kindref="compound">ScalarWrapper</ref> instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of the subtraction as a new scalar value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/python/finiteelements/scalarwrapper.hh" line="68" column="17" bodyfile="/__w/ikarus/ikarus/repo/ikarus/python/finiteelements/scalarwrapper.hh" bodystart="68" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="a01794_1afbdab913b105074552a44b4d05e4b8dc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="a01794_1af539d8935624e801016ecdd02852e493" kindref="member">RawScalarType</ref></type>
        <definition>RawScalarType ScalarWrapper&lt; T &gt;::operator-</definition>
        <argsstring>() const</argsstring>
        <name>operator-</name>
        <qualifiedname>ScalarWrapper::operator-</qualifiedname>
        <briefdescription>
<para>Negates the wrapped scalar value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The negated scalar value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/python/finiteelements/scalarwrapper.hh" line="76" column="17" bodyfile="/__w/ikarus/ikarus/repo/ikarus/python/finiteelements/scalarwrapper.hh" bodystart="76" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="a01794_1a01d184d748414b40f51b06e891bc309b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="a01794_1af539d8935624e801016ecdd02852e493" kindref="member">RawScalarType</ref></type>
        <definition>RawScalarType ScalarWrapper&lt; T &gt;::operator*</definition>
        <argsstring>(RawScalarType value) const</argsstring>
        <name>operator*</name>
        <qualifiedname>ScalarWrapper::operator*</qualifiedname>
        <param>
          <type><ref refid="a01794_1af539d8935624e801016ecdd02852e493" kindref="member">RawScalarType</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Multiplies the wrapped scalar value by another value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to multiply with. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of the multiplication. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/python/finiteelements/scalarwrapper.hh" line="83" column="17" bodyfile="/__w/ikarus/ikarus/repo/ikarus/python/finiteelements/scalarwrapper.hh" bodystart="83" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="a01794_1aedb7b9287f9b954fcb9759ef0aa7f803" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="a01794" kindref="compound">ScalarWrapper</ref> &amp;</type>
        <definition>ScalarWrapper &amp; ScalarWrapper&lt; T &gt;::operator+=</definition>
        <argsstring>(const ScalarWrapper &amp;v)</argsstring>
        <name>operator+=</name>
        <qualifiedname>ScalarWrapper::operator+=</qualifiedname>
        <param>
          <type>const <ref refid="a01794" kindref="compound">ScalarWrapper</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Adds another <ref refid="a01794" kindref="compound">ScalarWrapper</ref>&apos;s value to this instance. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>Another <ref refid="a01794" kindref="compound">ScalarWrapper</ref> instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to this instance after the addition. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/python/finiteelements/scalarwrapper.hh" line="90" column="17" bodyfile="/__w/ikarus/ikarus/repo/ikarus/python/finiteelements/scalarwrapper.hh" bodystart="90" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="a01794_1a1f3ea426a4264d9c26278e2ddfc605d1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="a01794" kindref="compound">ScalarWrapper</ref> &amp;</type>
        <definition>ScalarWrapper &amp; ScalarWrapper&lt; T &gt;::operator-=</definition>
        <argsstring>(const ScalarWrapper &amp;v)</argsstring>
        <name>operator-=</name>
        <qualifiedname>ScalarWrapper::operator-=</qualifiedname>
        <param>
          <type>const <ref refid="a01794" kindref="compound">ScalarWrapper</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Subtracts another <ref refid="a01794" kindref="compound">ScalarWrapper</ref>&apos;s value from this instance. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>Another <ref refid="a01794" kindref="compound">ScalarWrapper</ref> instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to this instance after the subtraction. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/python/finiteelements/scalarwrapper.hh" line="100" column="17" bodyfile="/__w/ikarus/ikarus/repo/ikarus/python/finiteelements/scalarwrapper.hh" bodystart="100" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="a01794_1ac43277d6068945530d445976aef3b5be" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="a01794" kindref="compound">ScalarWrapper</ref> &amp;</type>
        <definition>ScalarWrapper &amp; ScalarWrapper&lt; T &gt;::operator*=</definition>
        <argsstring>(RawScalarType v)</argsstring>
        <name>operator*=</name>
        <qualifiedname>ScalarWrapper::operator*=</qualifiedname>
        <param>
          <type><ref refid="a01794_1af539d8935624e801016ecdd02852e493" kindref="member">RawScalarType</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Multiplies the wrapped scalar value by another value and assigns the result. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to multiply with. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to this instance after the multiplication. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/python/finiteelements/scalarwrapper.hh" line="110" column="17" bodyfile="/__w/ikarus/ikarus/repo/ikarus/python/finiteelements/scalarwrapper.hh" bodystart="110" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="a01794_1abe4b2960b4cc9bd8546aed01a6e74f51" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="a01794" kindref="compound">ScalarWrapper</ref> &amp;</type>
        <definition>ScalarWrapper &amp; ScalarWrapper&lt; T &gt;::operator/=</definition>
        <argsstring>(RawScalarType v)</argsstring>
        <name>operator/=</name>
        <qualifiedname>ScalarWrapper::operator/=</qualifiedname>
        <param>
          <type><ref refid="a01794_1af539d8935624e801016ecdd02852e493" kindref="member">RawScalarType</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Divides the wrapped scalar value by another value and assigns the result. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to divide by. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to this instance after the division. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/python/finiteelements/scalarwrapper.hh" line="120" column="17" bodyfile="/__w/ikarus/ikarus/repo/ikarus/python/finiteelements/scalarwrapper.hh" bodystart="120" bodyend="123"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="a01794_1a93c93e03a96d5f1cbfa7e74ccb1e190e" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="a01794_1af539d8935624e801016ecdd02852e493" kindref="member">RawScalarType</ref></type>
        <definition>RawScalarType operator*</definition>
        <argsstring>(RawScalarType f, const ScalarWrapper &amp;v)</argsstring>
        <name>operator*</name>
        <qualifiedname>ScalarWrapper::operator*</qualifiedname>
        <param>
          <type><ref refid="a01794_1af539d8935624e801016ecdd02852e493" kindref="member">RawScalarType</ref></type>
          <declname>f</declname>
        </param>
        <param>
          <type>const <ref refid="a01794" kindref="compound">ScalarWrapper</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Multiplies a scalar value by a <ref refid="a01794" kindref="compound">ScalarWrapper</ref>&apos;s value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>A scalar value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="a01794" kindref="compound">ScalarWrapper</ref> instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of the multiplication. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/python/finiteelements/scalarwrapper.hh" line="134" column="24" bodyfile="/__w/ikarus/ikarus/repo/ikarus/python/finiteelements/scalarwrapper.hh" bodystart="134" bodyend="136"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A wrapper class for scalar types to facilitate reference passing in <ref refid="a00436" kindref="compound">Python</ref> bindings. </para>
    </briefdescription>
    <detaileddescription>
<para>This class resolves the limitations involving reference arguments in <ref refid="a00436" kindref="compound">Python</ref>, enabling seamless integration with C++ functions expecting reference types.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the scalar to be wrapped. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <location file="/__w/ikarus/ikarus/repo/ikarus/python/finiteelements/scalarwrapper.hh" line="26" column="1" bodyfile="/__w/ikarus/ikarus/repo/ikarus/python/finiteelements/scalarwrapper.hh" bodystart="27" bodyend="137"/>
    <listofallmembers>
      <member refid="a01794_1a66478624f4d84c5223afc1cc339691ff" prot="public" virt="non-virtual"><scope>ScalarWrapper</scope><name>operator RawScalarType &amp;</name></member>
      <member refid="a01794_1a01d184d748414b40f51b06e891bc309b" prot="public" virt="non-virtual"><scope>ScalarWrapper</scope><name>operator*</name></member>
      <member refid="a01794_1a93c93e03a96d5f1cbfa7e74ccb1e190e" prot="private" virt="non-virtual"><scope>ScalarWrapper</scope><name>operator*</name></member>
      <member refid="a01794_1ac43277d6068945530d445976aef3b5be" prot="public" virt="non-virtual"><scope>ScalarWrapper</scope><name>operator*=</name></member>
      <member refid="a01794_1a7c5087c50a8cda53bdb7dc0b1af65c7d" prot="public" virt="non-virtual"><scope>ScalarWrapper</scope><name>operator+</name></member>
      <member refid="a01794_1aedb7b9287f9b954fcb9759ef0aa7f803" prot="public" virt="non-virtual"><scope>ScalarWrapper</scope><name>operator+=</name></member>
      <member refid="a01794_1a14f5de10abdaaa63ef31cf3398b75122" prot="public" virt="non-virtual"><scope>ScalarWrapper</scope><name>operator-</name></member>
      <member refid="a01794_1afbdab913b105074552a44b4d05e4b8dc" prot="public" virt="non-virtual"><scope>ScalarWrapper</scope><name>operator-</name></member>
      <member refid="a01794_1a1f3ea426a4264d9c26278e2ddfc605d1" prot="public" virt="non-virtual"><scope>ScalarWrapper</scope><name>operator-=</name></member>
      <member refid="a01794_1abe4b2960b4cc9bd8546aed01a6e74f51" prot="public" virt="non-virtual"><scope>ScalarWrapper</scope><name>operator/=</name></member>
      <member refid="a01794_1af539d8935624e801016ecdd02852e493" prot="public" virt="non-virtual"><scope>ScalarWrapper</scope><name>RawScalarType</name></member>
      <member refid="a01794_1a80b399092b2ac4564095a63271e34acd" prot="public" virt="non-virtual"><scope>ScalarWrapper</scope><name>ScalarWrapper</name></member>
      <member refid="a01794_1ab0df51bf578d594ce93cc6631ee7124c" prot="private" virt="non-virtual"><scope>ScalarWrapper</scope><name>val</name></member>
      <member refid="a01794_1a0f885d047f898e549e8ece9cac3adea8" prot="public" virt="non-virtual"><scope>ScalarWrapper</scope><name>value</name></member>
      <member refid="a01794_1a58aca37297368d4b3122461982ff3074" prot="public" virt="non-virtual"><scope>ScalarWrapper</scope><name>value</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
