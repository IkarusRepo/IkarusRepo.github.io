<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="a00308" kind="file" language="C++">
    <compoundname>mixin.hh</compoundname>
    <includes local="no">dune/common/tuplevector.hh</includes>
    <includes refid="a00305" local="no">ikarus/finiteelements/fetraits.hh</includes>
    <includedby refid="a00221" local="no">enhancedassumedstrains.hh</includedby>
    <includedby refid="a00200" local="no">febase.hh</includedby>
    <incdepgraph>
      <node id="26">
        <label>ikarus/assembler/dirichletbcenforcement.hh</label>
        <link refid="a00347"/>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>ikarus/finiteelements/ferequirements.hh</label>
        <link refid="a00197"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>ikarus/finiteelements/feresulttypes.hh</label>
        <link refid="a00302"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>ikarus/finiteelements/fetraits.hh</label>
        <link refid="a00305"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>ikarus/finiteelements/mechanics/materials/tags.hh</label>
        <link refid="a00233"/>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>mixin.hh</label>
        <link refid="a00308"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>ikarus/utils/concepts.hh</label>
        <link refid="a03101"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>ikarus/utils/makeenum.hh</label>
        <link refid="a00011"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>ikarus/utils/math.hh</label>
        <link refid="a00044"/>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>ikarus/utils/tensorutils.hh</label>
        <link refid="a00032"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>ikarus/utils/traits.hh</label>
        <link refid="a00068"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>Eigen/Core</label>
      </node>
      <node id="23">
        <label>Eigen/Dense</label>
      </node>
      <node id="24">
        <label>Eigen/Sparse</label>
      </node>
      <node id="25">
        <label>autodiff/forward/dual/dual.hpp</label>
      </node>
      <node id="19">
        <label>concepts</label>
      </node>
      <node id="9">
        <label>dune/common/exceptions.hh</label>
      </node>
      <node id="32">
        <label>dune/common/hybridutilities.hh</label>
      </node>
      <node id="17">
        <label>dune/common/promotiontraits.hh</label>
      </node>
      <node id="2">
        <label>dune/common/tuplevector.hh</label>
      </node>
      <node id="21">
        <label>dune/functions/functionspacebases/basistags.hh</label>
      </node>
      <node id="22">
        <label>dune/functions/functionspacebases/lagrangebasis.hh</label>
      </node>
      <node id="30">
        <label>functional</label>
      </node>
      <node id="5">
        <label>iosfwd</label>
      </node>
      <node id="6">
        <label>map</label>
      </node>
      <node id="14">
        <label>numeric</label>
      </node>
      <node id="15">
        <label>ranges</label>
      </node>
      <node id="7">
        <label>set</label>
      </node>
      <node id="31">
        <label>tuple</label>
      </node>
      <node id="12">
        <label>type_traits</label>
      </node>
      <node id="16">
        <label>unsupported/Eigen/CXX11/Tensor</label>
      </node>
      <node id="20">
        <label>utility</label>
      </node>
      <node id="8">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="3">
        <label>febase.hh</label>
        <link refid="a00200"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>fefactory.hh</label>
        <link refid="a00206"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>enhancedassumedstrains.hh</label>
        <link refid="a00221"/>
      </node>
      <node id="6">
        <label>nonlinearelastic.hh</label>
        <link refid="a00290"/>
      </node>
      <node id="1">
        <label>mixin.hh</label>
        <link refid="a00308"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>fe.hh</label>
        <link refid="a00155"/>
      </node>
    </invincdepgraph>
    <innerclass refid="a01670" prot="public">Ikarus::FEMixin</innerclass>
    <innerclass refid="a01678" prot="public">Ikarus::FEMixin::RequirementType&lt; false, T &gt;</innerclass>
    <innerclass refid="a01682" prot="public">Ikarus::FEMixin::RequirementType&lt; true, T &gt;</innerclass>
    <innerclass refid="a01686" prot="public">Ikarus::Skills</innerclass>
    <innernamespace refid="a00411">Ikarus</innernamespace>
    <briefdescription>
<para>Implementation of the finite element CRTP mixin class. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>SPDX-FileCopyrightText:<sp/>2021-2025<sp/>The<sp/>Ikarus<sp/>Developers<sp/>mueller@ibb.uni-stuttgart.de</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPDX-License-Identifier:<sp/>LGPL-3.0-or-later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;dune/common/tuplevector.hh&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="a00305" kindref="compound">ikarus/finiteelements/fetraits.hh</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="a00411" kindref="compound">Ikarus</ref><sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>PreFE,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>Skills&gt;</highlight></codeline>
<codeline lineno="27" refid="a01670" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="a01670" kindref="compound">FEMixin</ref><sp/>:<sp/><ref refid="a01686" kindref="compound">Skills</ref>&lt;PreFE,<sp/>typename<sp/>PreFE::template<sp/>FE&lt;Skills...&gt;&gt;...</highlight></codeline>
<codeline lineno="28"><highlight class="normal">{</highlight></codeline>
<codeline lineno="34" refid="a01670_1a14fdffeb8d301d73b605ce7fc1732b98" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="a01670_1a14fdffeb8d301d73b605ce7fc1732b98" kindref="member">FEMixin</ref>(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="a01686" kindref="compound">Skills</ref>&lt;<ref refid="a01374" kindref="compound">PreFE</ref>,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>PreFE::template<sp/><ref refid="a01370" kindref="compound">FE&lt;Skills...&gt;</ref>&gt;::Pre&amp;&amp;...<sp/>skillsArgs)</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="a01686" kindref="compound">Skills</ref>&lt;<ref refid="a01374" kindref="compound">PreFE</ref>,<sp/>typename<sp/><ref refid="a01374" kindref="compound">PreFE</ref>::template<sp/><ref refid="a01370" kindref="compound">FE</ref>&lt;<ref refid="a01686" kindref="compound">Skills</ref>...&gt;&gt;(</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00410" kindref="compound">std</ref>::forward&lt;typename<sp/><ref refid="a01686" kindref="compound">Skills</ref>&lt;<ref refid="a01374" kindref="compound">PreFE</ref>,<sp/>typename<sp/><ref refid="a01374" kindref="compound">PreFE</ref>::template<sp/><ref refid="a01370" kindref="compound">FE</ref>&lt;<ref refid="a01686" kindref="compound">Skills</ref>...&gt;&gt;::Pre&gt;(skillsArgs))...<sp/>{}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Skill&gt;</highlight></codeline>
<codeline lineno="45" refid="a01670_1ad037d914bd0a3933ebe3fc11caa84e39" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">consteval</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="a01670_1ad037d914bd0a3933ebe3fc11caa84e39" kindref="member">hasSkill</ref>()<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="a02018" kindref="compound">Ikarus::traits::hasType</ref>&lt;Skill&lt;<ref refid="a01374" kindref="compound">PreFE</ref>,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>PreFE::template<sp/><ref refid="a01370" kindref="compound">FE</ref>&lt;<ref refid="a01686" kindref="compound">Skills</ref>...&gt;&gt;,</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::tuple&lt;<ref refid="a01686" kindref="compound">Skills</ref>&lt;<ref refid="a01374" kindref="compound">PreFE</ref>,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>PreFE::template<sp/><ref refid="a01370" kindref="compound">FE</ref>&lt;<ref refid="a01686" kindref="compound">Skills</ref>...&gt;&gt;...&gt;&gt;::value;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">consteval</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>computeSupportedResultTypes()<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::SupportedResultTypes;<sp/>})</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::SupportedResultTypes();</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::tuple();</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="63" refid="a01670_1ada59c15363d83f6e635ecd6e1672d6a4" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="a01670_1ada59c15363d83f6e635ecd6e1672d6a4" kindref="member">SupportedResultTypes</ref><sp/>=</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(std::tuple_cat(computeSupportedResultTypes&lt;<ref refid="a01686" kindref="compound">Skills</ref>&lt;<ref refid="a01374" kindref="compound">PreFE</ref>,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>PreFE::template<sp/><ref refid="a01370" kindref="compound">FE&lt;Skills...&gt;</ref>&gt;&gt;()...));</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="67" refid="a01674" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="a01674" kindref="compound">RequirementType</ref>;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="70" refid="a01678" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="a01674" kindref="compound">RequirementType</ref>&lt;false,<sp/>T&gt;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="72" refid="a01678_1a69cc762eb3e900d1ba5d511701304531" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="a01402" kindref="compound">type</ref><sp/>=<sp/><ref refid="a01402" kindref="compound">FERequirements&lt;FESolutions::noSolution, FEParameter::noParameter&gt;</ref>;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="76" refid="a01682" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="a01674" kindref="compound">RequirementType</ref>&lt;true,<sp/>T&gt;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="78" refid="a01682_1a2d4fc47d2a6bddddf07b74f415a2bd09" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="a01682_1a2d4fc47d2a6bddddf07b74f415a2bd09" kindref="member">type</ref><sp/>=<sp/>std::common_type_t&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="a01686" kindref="compound">Skills</ref>&lt;<ref refid="a01374" kindref="compound">PreFE</ref>,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>PreFE::template<sp/><ref refid="a01370" kindref="compound">FE</ref>&lt;<ref refid="a01686" kindref="compound">Skills</ref>...&gt;&gt;<ref refid="a01670_1a86c0fea1b37e487f3c78cde6facca9c3" kindref="member">::Requirement</ref>...&gt;;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>requirementDetected<sp/>=</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Dune::Std::is_detected_v&lt;std::common_type_t,</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="a01686" kindref="compound">Skills</ref>&lt;<ref refid="a01374" kindref="compound">PreFE</ref>,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>PreFE::template<sp/><ref refid="a01370" kindref="compound">FE</ref>&lt;<ref refid="a01686" kindref="compound">Skills</ref>...&gt;&gt;<ref refid="a01670_1a86c0fea1b37e487f3c78cde6facca9c3" kindref="member">::Requirement</ref>...&gt;;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(requirementDetected<sp/>or<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Skills)<sp/>==<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>skills<sp/>must<sp/>have<sp/>a<sp/>common<sp/>fe<sp/>requirement<sp/>type.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="88" refid="a01670_1a78dab4c9a5818baef9889f3e0523b562" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="a01442" kindref="compound">Traits</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="a01374_1a826c356a5afb013faffb5f7ac893cff4" kindref="member">PreFE::Traits</ref>;</highlight></codeline>
<codeline lineno="89" refid="a01670_1a86c0fea1b37e487f3c78cde6facca9c3" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="a01670_1a86c0fea1b37e487f3c78cde6facca9c3" kindref="member">Requirement</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="a01674" kindref="compound">RequirementType&lt;requirementDetected&gt;::type</ref>;</highlight></codeline>
<codeline lineno="90" refid="a01670_1af20e97c72e6f0bcec8e156aa367f126c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="a01670_1af20e97c72e6f0bcec8e156aa367f126c" kindref="member">LocalView</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="a01442_1a06bdad066f621e46875af45a22677a3c" kindref="member">Traits::LocalView</ref>;</highlight></codeline>
<codeline lineno="91" refid="a01670_1a1eeb8c1a6f93d0c7aa5f8f15b85a22d5" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="a01670_1a1eeb8c1a6f93d0c7aa5f8f15b85a22d5" kindref="member">worldDim</ref><sp/>=<sp/><ref refid="a01442_1a5d611e1d48285bac5c5ebd6fda9c7cc7" kindref="member">Traits::worlddim</ref>;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="98" refid="a01670_1a07c02c65a9217c32db0b6a974170b183" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="a01670_1a07c02c65a9217c32db0b6a974170b183" kindref="member">createRequirement</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="a01670_1a86c0fea1b37e487f3c78cde6facca9c3" kindref="member">Requirement</ref>();<sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="107" refid="a01670_1a3d6e31a4723c80716a64d4c7e17cf64f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="a01670_1a3d6e31a4723c80716a64d4c7e17cf64f" kindref="member">calculateScalar</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01670" kindref="compound">FEMixin</ref>&amp;<sp/>self,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01670_1a86c0fea1b37e487f3c78cde6facca9c3" kindref="member">Requirement</ref>&amp;<sp/>req,<sp/><ref refid="a00411_1af6f894084edd9109762b86222995ef2a" kindref="member">ScalarAffordance</ref><sp/>affordance)<sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.template<sp/>calculateScalarImpl&lt;double&gt;(req,<sp/>affordance);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="118" refid="a01670_1a1be683ed5a9229b30f147a13287599aa" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a01670_1a1be683ed5a9229b30f147a13287599aa" kindref="member">calculateVector</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01670" kindref="compound">FEMixin</ref>&amp;<sp/>self,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01670_1a86c0fea1b37e487f3c78cde6facca9c3" kindref="member">Requirement</ref>&amp;<sp/>req,<sp/><ref refid="a00411_1aab9e3e38507d1db7602bc750718c302a" kindref="member">VectorAffordance</ref><sp/>affordance,</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Traits::template<sp/>VectorType&lt;&gt;<sp/>force)<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>self.template<sp/>calculateVectorImpl&lt;double&gt;(req,<sp/>affordance,<sp/>force);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="130" refid="a01670_1abf08892de3cd7a36c87426f3e6160246" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a01670_1abf08892de3cd7a36c87426f3e6160246" kindref="member">calculateMatrix</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01670" kindref="compound">FEMixin</ref>&amp;<sp/>self,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01670_1a86c0fea1b37e487f3c78cde6facca9c3" kindref="member">Requirement</ref>&amp;<sp/>req,<sp/><ref refid="a00411_1a390d5311179ec61d163a29c943b3d1a0" kindref="member">MatrixAffordance</ref><sp/>affordance,</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Traits::template<sp/>MatrixType&lt;&gt;<sp/>K)<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>self.template<sp/>calculateMatrixImpl&lt;double&gt;(req,<sp/>affordance,<sp/>K);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="a01686" kindref="compound">Skills</ref>&lt;<ref refid="a01374" kindref="compound">PreFE</ref>,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>PreFE::template<sp/><ref refid="a01370" kindref="compound">FE</ref>&lt;<ref refid="a01686" kindref="compound">Skills</ref>...&gt;&gt;::calculateAtImpl...;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">RT&gt;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(<ref refid="a01670" kindref="compound">FEMixin</ref><sp/>m,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01670_1a86c0fea1b37e487f3c78cde6facca9c3" kindref="member">Requirement</ref>&amp;<sp/>req,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01910" kindref="compound">Dune::FieldVector&lt;double, Traits::mydim&gt;</ref>&amp;<sp/>local)<sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>m.template<sp/>calculateAtImpl&lt;RT&gt;(req,<sp/>local,<sp/>Dune::PriorityTag&lt;10&gt;());</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="149" refid="a01670_1a37abebcec6946305d6856dd03404f0e4" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="a01670_1a37abebcec6946305d6856dd03404f0e4" kindref="member">calculateAt</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01670_1a86c0fea1b37e487f3c78cde6facca9c3" kindref="member">Requirement</ref>&amp;<sp/>req,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01910" kindref="compound">Dune::FieldVector&lt;double, Traits::mydim&gt;</ref>&amp;<sp/>local)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;</highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>calculateAtImpl&lt;RT&gt;(req,<sp/>local,<sp/>Dune::PriorityTag&lt;10&gt;());</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Sk&gt;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>invokeBind()<sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>{<sp/>this-&gt;Sk::bindImpl();<sp/>})</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Sk::bindImpl();</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>implementsCalculateScalarImpl<sp/>=</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">requires</highlight><highlight class="normal">(<ref refid="a01670_1a14fdffeb8d301d73b605ce7fc1732b98" kindref="member">FEMixin</ref><sp/>m,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01670_1a86c0fea1b37e487f3c78cde6facca9c3" kindref="member">Requirement</ref>&amp;<sp/>par,<sp/><ref refid="a00411_1af6f894084edd9109762b86222995ef2a" kindref="member">ScalarAffordance</ref><sp/>affordance,</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::optional&lt;std::reference_wrapper&lt;const<sp/>Eigen::VectorX&lt;double&gt;&gt;&gt;&amp;<sp/>dx)<sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m.Skills&lt;PreFE,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>PreFE::template<sp/>FE&lt;Skills...&gt;&gt;<ref refid="a01670_1a07c69ffebd1df15028d130f238923451" kindref="member">::calculateScalarImpl</ref>(par,<sp/>affordance,<sp/>dx);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>||</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="171" refid="a01670_1ad64afd529f274032176261fea660b027" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a01670_1ad64afd529f274032176261fea660b027" kindref="member">bind</ref>()<sp/>{<sp/>(invokeBind&lt;<ref refid="a01686" kindref="compound">Skills</ref>&lt;<ref refid="a01374" kindref="compound">PreFE</ref>,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>PreFE::template<sp/><ref refid="a01370" kindref="compound">FE</ref>&lt;<ref refid="a01686" kindref="compound">Skills</ref>...&gt;&gt;&gt;(),<sp/>...);<sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ScalarType<sp/>=<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>implementsCalculateScalarImpl</highlight></codeline>
<codeline lineno="183" refid="a01670_1a07c69ffebd1df15028d130f238923451" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="a01670_1a07c69ffebd1df15028d130f238923451" kindref="member">calculateScalarImpl</ref>(</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01670_1a86c0fea1b37e487f3c78cde6facca9c3" kindref="member">Requirement</ref>&amp;<sp/>par,<sp/><ref refid="a00411_1af6f894084edd9109762b86222995ef2a" kindref="member">ScalarAffordance</ref><sp/>affordance,</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::optional&lt;std::reference_wrapper&lt;</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::VectorX&lt;ScalarType&gt;&gt;&gt;&amp;<sp/>dx<sp/>=<sp/>std::nullopt)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="a01686" kindref="compound">Skills</ref>&lt;<ref refid="a01374" kindref="compound">PreFE</ref>,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>PreFE::template<sp/><ref refid="a01370" kindref="compound">FE&lt;Skills...&gt;</ref>&gt;::template<sp/>calculateScalarImpl&lt;ScalarType&gt;(</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>par,<sp/>affordance,<sp/>dx)<sp/>+</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...<sp/>+<sp/>ScalarType{0});</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>implementsCalculateVectorImpl<sp/>=</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">requires</highlight><highlight class="normal">(<ref refid="a01670" kindref="compound">FEMixin</ref><sp/>m,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01670_1a86c0fea1b37e487f3c78cde6facca9c3" kindref="member">Requirement</ref>&amp;<sp/>par,<sp/><ref refid="a00411_1aab9e3e38507d1db7602bc750718c302a" kindref="member">VectorAffordance</ref><sp/>affordance,</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Traits::template<sp/>VectorType&lt;double&gt;<sp/>force,</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::optional&lt;std::reference_wrapper&lt;const<sp/>Eigen::VectorX&lt;double&gt;&gt;&gt;&amp;<sp/>dx)<sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m.Skills&lt;<ref refid="a01374" kindref="compound">PreFE</ref>,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>PreFE::template<sp/><ref refid="a01370" kindref="compound">FE</ref>&lt;<ref refid="a01686" kindref="compound">Skills</ref>...&gt;&gt;<ref refid="a01670_1a3dc0667f1f82059e4f11e5f60a75fb9c" kindref="member">::calculateVectorImpl</ref>(par,<sp/>affordance,<sp/>force,<sp/>dx);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>||</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ScalarType&gt;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>implementsCalculateVectorImpl</highlight></codeline>
<codeline lineno="211" refid="a01670_1a3dc0667f1f82059e4f11e5f60a75fb9c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a01670_1a3dc0667f1f82059e4f11e5f60a75fb9c" kindref="member">calculateVectorImpl</ref>(</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01670_1a86c0fea1b37e487f3c78cde6facca9c3" kindref="member">Requirement</ref>&amp;<sp/>par,<sp/><ref refid="a00411_1aab9e3e38507d1db7602bc750718c302a" kindref="member">VectorAffordance</ref><sp/>affordance,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Traits::template<sp/>VectorType&lt;ScalarType&gt;<sp/>force,</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::optional&lt;std::reference_wrapper&lt;</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::VectorX&lt;ScalarType&gt;&gt;&gt;&amp;<sp/>dx<sp/>=<sp/>std::nullopt)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="a01686" kindref="compound">Skills</ref>&lt;<ref refid="a01374" kindref="compound">PreFE</ref>,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>PreFE::template<sp/><ref refid="a01370" kindref="compound">FE</ref>&lt;<ref refid="a01686" kindref="compound">Skills</ref>...&gt;&gt;::template<sp/>calculateVectorImpl&lt;ScalarType&gt;(par,<sp/>affordance,</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>force,<sp/>dx),</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>...);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>implementsCalculateMatrixImpl<sp/>=</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">requires</highlight><highlight class="normal">(<ref refid="a01670" kindref="compound">FEMixin</ref><sp/>m,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01670_1a86c0fea1b37e487f3c78cde6facca9c3" kindref="member">Requirement</ref>&amp;<sp/>par,<sp/><ref refid="a00411_1a390d5311179ec61d163a29c943b3d1a0" kindref="member">MatrixAffordance</ref><sp/>affordance,</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Traits::template<sp/>MatrixType&lt;double&gt;<sp/>K,</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::optional&lt;std::reference_wrapper&lt;const<sp/>Eigen::VectorX&lt;double&gt;&gt;&gt;&amp;<sp/>dx)<sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m.Skills&lt;<ref refid="a01374" kindref="compound">PreFE</ref>,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>PreFE::template<sp/><ref refid="a01370" kindref="compound">FE</ref>&lt;<ref refid="a01686" kindref="compound">Skills</ref>...&gt;&gt;<ref refid="a01670_1a4e1004ea875e895c92e89a1f38e9ed16" kindref="member">::calculateMatrixImpl</ref>(par,<sp/>affordance,<sp/>K,<sp/>dx);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>||</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ScalarType&gt;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>implementsCalculateMatrixImpl</highlight></codeline>
<codeline lineno="239" refid="a01670_1a4e1004ea875e895c92e89a1f38e9ed16" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a01670_1a4e1004ea875e895c92e89a1f38e9ed16" kindref="member">calculateMatrixImpl</ref>(</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01670_1a86c0fea1b37e487f3c78cde6facca9c3" kindref="member">Requirement</ref>&amp;<sp/>par,<sp/><ref refid="a00411_1a390d5311179ec61d163a29c943b3d1a0" kindref="member">MatrixAffordance</ref><sp/>affordance,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Traits::template<sp/>MatrixType&lt;ScalarType&gt;<sp/>K,</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::optional&lt;std::reference_wrapper&lt;</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::VectorX&lt;ScalarType&gt;&gt;&gt;&amp;<sp/>dx<sp/>=<sp/>std::nullopt)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="a01686" kindref="compound">Skills</ref>&lt;<ref refid="a01374" kindref="compound">PreFE</ref>,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>PreFE::template<sp/><ref refid="a01370" kindref="compound">FE</ref>&lt;<ref refid="a01686" kindref="compound">Skills</ref>...&gt;&gt;::template<sp/>calculateMatrixImpl&lt;ScalarType&gt;(par,<sp/>affordance,<sp/>K,</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dx),</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>...);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="253" refid="a01670_1acbf5789e676110b6a812fbc67aca366d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/><ref refid="a01670_1acbf5789e676110b6a812fbc67aca366d" kindref="member">underlying</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">typename<sp/>PreFE::template<sp/><ref refid="a01370" kindref="compound">FE</ref>&lt;<ref refid="a01686" kindref="compound">Skills</ref>...</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">&amp;&gt;(*this);<sp/>}</highlight></codeline>
<codeline lineno="259" refid="a01670_1aa3008bb76b6b23ca15c55a1d1485d484" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/><ref refid="a01670_1aa3008bb76b6b23ca15c55a1d1485d484" kindref="member">underlying</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">typename<sp/>PreFE::template<sp/><ref refid="a01370" kindref="compound">FE</ref>&lt;<ref refid="a01686" kindref="compound">Skills</ref>...</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">&amp;&gt;(*this);<sp/>}</highlight></codeline>
<codeline lineno="260"><highlight class="normal">};</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>ARGS&gt;</highlight></codeline>
<codeline lineno="268" refid="a01686" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="a01686" kindref="compound">Skills</ref></highlight></codeline>
<codeline lineno="269"><highlight class="normal">{</highlight></codeline>
<codeline lineno="270" refid="a01686_1a2ad44dcb1253eaebcbc976a2725b9d02" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="a01686_1a2ad44dcb1253eaebcbc976a2725b9d02" kindref="member">Args</ref><sp/>=<sp/>std::tuple&lt;ARGS...&gt;;</highlight></codeline>
<codeline lineno="271" refid="a01686_1a2e8750088bcaddd3fba36e24ab06b099" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="a01686_1a2ad44dcb1253eaebcbc976a2725b9d02" kindref="member">Args</ref><sp/><ref refid="a01686_1a2e8750088bcaddd3fba36e24ab06b099" kindref="member">args</ref>;</highlight></codeline>
<codeline lineno="272"><highlight class="normal">};</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="282" refid="a00411_1aefa492686bced0d5d9235bdb112f482e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="a00411_1aefa492686bced0d5d9235bdb112f482e" kindref="member">skills</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Args&amp;...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="a01686" kindref="compound">Skills&lt;std::remove_cvref_t&lt;Args&gt;</ref>...&gt;{std::forward_as_tuple(std::remove_cvref_t&lt;Args&gt;(args)...)};</highlight></codeline>
<codeline lineno="284"><highlight class="normal">}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args2&gt;</highlight></codeline>
<codeline lineno="296" refid="a00411_1a4f5729471c2a5801482188e6d42009ea" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="a00411_1a4f5729471c2a5801482188e6d42009ea" kindref="member">merge</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01686" kindref="compound">Skills&lt;Args1...&gt;</ref>&amp;<sp/>sk1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01686" kindref="compound">Skills&lt;Args2...&gt;</ref>&amp;<sp/>sk2)<sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="a01686" kindref="compound">Skills&lt;std::remove_cvref_t&lt;Args1&gt;</ref>...,<sp/>std::remove_cvref_t&lt;Args2&gt;...&gt;{std::tuple_cat(sk1.<ref refid="a01686_1a2e8750088bcaddd3fba36e24ab06b099" kindref="member">args</ref>,<sp/>sk2.<ref refid="a01686_1a2e8750088bcaddd3fba36e24ab06b099" kindref="member">args</ref>)};</highlight></codeline>
<codeline lineno="298"><highlight class="normal">}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Ikarus</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mixin.hh"/>
  </compounddef>
</doxygen>
