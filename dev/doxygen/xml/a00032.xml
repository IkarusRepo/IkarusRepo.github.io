<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="a00032" kind="file" language="C++">
    <compoundname>tensorutils.hh</compoundname>
    <includes local="no">numeric</includes>
    <includes local="no">ranges</includes>
    <includes local="no">unsupported/Eigen/CXX11/Tensor</includes>
    <includes local="no">dune/common/promotiontraits.hh</includes>
    <includes refid="a00047" local="no">ikarus/utils/concepts.hh</includes>
    <includes refid="a00038" local="no">ikarus/utils/math.hh</includes>
    <includedby refid="a00266" local="no">eas2d.hh</includedby>
    <includedby refid="a00269" local="no">eas3d.hh</includedby>
    <includedby refid="a00281" local="no">easvariants.hh</includedby>
    <includedby refid="a00305" local="no">feresulttypes.hh</includedby>
    <includedby refid="a00251" local="no">neohooke.hh</includedby>
    <includedby refid="a00326" local="no">resultevaluators.hh</includedby>
    <includedby refid="a00263" local="no">strainconversions.hh</includedby>
    <includedby refid="a00260" local="no">svk.hh</includedby>
    <includedby refid="a00335" local="no">utils.hh</includedby>
    <incdepgraph>
      <node id="16">
        <label>ikarus/assembler/dirichletbcenforcement.hh</label>
        <link refid="a00176"/>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>ikarus/finiteelements/mechanics/materials/tags.hh</label>
        <link refid="a00242"/>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>ikarus/utils/concepts.hh</label>
        <link refid="a00047"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>ikarus/utils/makeenum.hh</label>
        <link refid="a00005"/>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>ikarus/utils/math.hh</label>
        <link refid="a00038"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>tensorutils.hh</label>
        <link refid="a00032"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>ikarus/utils/traits.hh</label>
        <link refid="a00011"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>Eigen/Dense</label>
      </node>
      <node id="14">
        <label>Eigen/Sparse</label>
      </node>
      <node id="15">
        <label>autodiff/forward/dual/dual.hpp</label>
      </node>
      <node id="7">
        <label>concepts</label>
      </node>
      <node id="18">
        <label>dune/common/exceptions.hh</label>
      </node>
      <node id="23">
        <label>dune/common/hybridutilities.hh</label>
      </node>
      <node id="5">
        <label>dune/common/promotiontraits.hh</label>
      </node>
      <node id="11">
        <label>dune/functions/functionspacebases/basistags.hh</label>
      </node>
      <node id="12">
        <label>dune/functions/functionspacebases/lagrangebasis.hh</label>
      </node>
      <node id="21">
        <label>functional</label>
      </node>
      <node id="2">
        <label>numeric</label>
      </node>
      <node id="3">
        <label>ranges</label>
      </node>
      <node id="22">
        <label>tuple</label>
      </node>
      <node id="8">
        <label>type_traits</label>
      </node>
      <node id="4">
        <label>unsupported/Eigen/CXX11/Tensor</label>
      </node>
      <node id="9">
        <label>utility</label>
      </node>
      <node id="10">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="9">
        <label>assemblermanipulatorbuildingblocks.hh</label>
        <link refid="a00164"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>assemblermanipulatorfuser.hh</label>
        <link refid="a00173"/>
      </node>
      <node id="22">
        <label>interface.hh</label>
        <link refid="a02855"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>simpleassemblers.hh</label>
        <link refid="a00170"/>
      </node>
      <node id="28">
        <label>pathfollowing.hh</label>
        <link refid="a00194"/>
      </node>
      <node id="11">
        <label>autodifffe.hh</label>
        <link refid="a00296"/>
      </node>
      <node id="14">
        <label>febase.hh</label>
        <link refid="a00317"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>fefactory.hh</label>
        <link refid="a00311"/>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>ferequirements.hh</label>
        <link refid="a00314"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>feresulttypes.hh</label>
        <link refid="a00305"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>fetraits.hh</label>
        <link refid="a00302"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>eas2d.hh</label>
        <link refid="a00266"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>eas3d.hh</label>
        <link refid="a00269"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>easvariants.hh</label>
        <link refid="a00281"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>enhancedassumedstrains.hh</label>
        <link refid="a00272"/>
      </node>
      <node id="24">
        <label>kirchhoffloveshell.hh</label>
        <link refid="a00290"/>
      </node>
      <node id="25">
        <label>linearelastic.hh</label>
        <link refid="a00284"/>
      </node>
      <node id="38">
        <label>loads.hh</label>
        <link refid="a00287"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>traction.hh</label>
        <link refid="a00233"/>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>volume.hh</label>
        <link refid="a00230"/>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>materials.hh</label>
        <link refid="a02861"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>interface.hh</label>
        <link refid="a02858"/>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>linearelasticity.hh</label>
        <link refid="a00257"/>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>neohooke.hh</label>
        <link refid="a00251"/>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>strainconversions.hh</label>
        <link refid="a00263"/>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>svk.hh</label>
        <link refid="a00260"/>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>vanishingstrain.hh</label>
        <link refid="a00254"/>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>vanishingstress.hh</label>
        <link refid="a00245"/>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>nonlinearelastic.hh</label>
        <link refid="a00239"/>
      </node>
      <node id="39">
        <label>truss.hh</label>
        <link refid="a00275"/>
      </node>
      <node id="19">
        <label>mixin.hh</label>
        <link refid="a00308"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>resultevaluators.hh</label>
        <link refid="a00326"/>
      </node>
      <node id="34">
        <label>resultfunction.hh</label>
        <link refid="a00323"/>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>vtkwriter.hh</label>
        <link refid="a02867"/>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>flatassembler.hh</label>
        <link refid="a00206"/>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>flatassemblermanipulator.hh</label>
        <link refid="a00209"/>
      </node>
      <node id="12">
        <label>basis.hh</label>
        <link refid="a02873"/>
      </node>
      <node id="13">
        <label>dirichletvalues.hh</label>
        <link refid="a02879"/>
      </node>
      <node id="16">
        <label>fe.hh</label>
        <link refid="a00221"/>
      </node>
      <node id="31">
        <label>material.hh</label>
        <link refid="a00218"/>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>vtkwriter.hh</label>
        <link refid="a02870"/>
      </node>
      <node id="27">
        <label>nonlinearsolverfactory.hh</label>
        <link refid="a00161"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>nonlinopfactory.hh</label>
        <link refid="a00026"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>tensorutils.hh</label>
        <link refid="a00032"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>_ikarus.cc</label>
        <link refid="a00347"/>
      </node>
      <node id="32">
        <label>materials.hh</label>
        <link refid="a02864"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>utils.hh</label>
        <link refid="a00335"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innernamespace refid="a00384">Ikarus</innernamespace>
    <briefdescription>
<para>Helper for the Eigen::Tensor types. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>SPDX-FileCopyrightText:<sp/>2021-2025<sp/>The<sp/>Ikarus<sp/>Developers<sp/>mueller@ibb.uni-stuttgart.de</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPDX-License-Identifier:<sp/>LGPL-3.0-or-later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;numeric&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ranges&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unsupported/Eigen/CXX11/Tensor&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;dune/common/promotiontraits.hh&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="a00047" kindref="compound">ikarus/utils/concepts.hh</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="a00038" kindref="compound">ikarus/utils/math.hh</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="a00384" kindref="compound">Ikarus</ref><sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Derived,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>auto<sp/>rank&gt;</highlight></codeline>
<codeline lineno="32" refid="a00380_1ga5cfd9d098384fb067d897b3c0499b447" refkind="member"><highlight class="normal">Eigen::Tensor&lt;typename<sp/>Derived::Scalar,<sp/>rank&gt;<sp/><ref refid="a00380_1ga5cfd9d098384fb067d897b3c0499b447" kindref="member">tensorView</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01748" kindref="compound">Eigen::EigenBase&lt;Derived&gt;</ref>&amp;<sp/>matrix,</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::array&lt;T,<sp/>rank&gt;&amp;<sp/>dims)<sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Eigen::TensorMap&lt;</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::TensorFixedSize&lt;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Derived::Scalar,<sp/>Eigen::Sizes&lt;Derived::RowsAtCompileTime,<sp/>Derived::ColsAtCompileTime&gt;&gt;&gt;(</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>matrix.derived().eval().data(),<sp/>dims);</highlight></codeline>
<codeline lineno="37"><highlight class="normal">}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="47" refid="a00380_1gab2cea9ac847cc3635812467c9d96ceb4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="a00380_1gab2cea9ac847cc3635812467c9d96ceb4" kindref="member">dyadic</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>A_ij,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>B_kl)<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>Eigen::array&lt;Eigen::IndexPair&lt;long&gt;,<sp/>0&gt;<sp/>empty_index_list<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>A_ij.contract(B_kl,<sp/>empty_index_list).eval();</highlight></codeline>
<codeline lineno="50"><highlight class="normal">}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ScalarType<sp/>=<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim<sp/>=<sp/>3&gt;</highlight></codeline>
<codeline lineno="60" refid="a00380_1ga1c9618ef351cd986d4f64fde7f52e860" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="a00380_1ga1c9618ef351cd986d4f64fde7f52e860" kindref="member">symmetricIdentityFourthOrder</ref>()<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>Eigen::TensorFixedSize&lt;ScalarType,<sp/>Eigen::Sizes&lt;dim,<sp/>dim,<sp/>dim,<sp/>dim&gt;&gt;<sp/>idTensor;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>dim;<sp/>++i)</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>dim;<sp/>++j)</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>dim;<sp/>++k)</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l<sp/>=<sp/>0;<sp/>l<sp/>&lt;<sp/>dim;<sp/>++l)</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idTensor(i,<sp/>j,<sp/>k,<sp/>l)<sp/>=<sp/>0.5<sp/>*<sp/>((i<sp/>==<sp/>k)<sp/>*<sp/>(j<sp/>==<sp/>l)<sp/>+<sp/>(i<sp/>==<sp/>l)<sp/>*<sp/>(j<sp/>==<sp/>k));</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>idTensor;</highlight></codeline>
<codeline lineno="68"><highlight class="normal">}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ScalarType<sp/>=<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim<sp/>=<sp/>3&gt;</highlight></codeline>
<codeline lineno="82" refid="a00380_1ga2368a572348c410fd7e7deb6c6e3964a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="a00380_1ga2368a572348c410fd7e7deb6c6e3964a" kindref="member">symmetricFourthOrder</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>A,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>B)<sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>Eigen::TensorFixedSize&lt;ScalarType,<sp/>Eigen::Sizes&lt;dim,<sp/>dim,<sp/>dim,<sp/>dim&gt;&gt;<sp/>res;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>dim;<sp/>++i)</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>dim;<sp/>++j)</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>dim;<sp/>++k)</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l<sp/>=<sp/>0;<sp/>l<sp/>&lt;<sp/>dim;<sp/>++l)</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res(i,<sp/>j,<sp/>k,<sp/>l)<sp/>=<sp/>0.5<sp/>*<sp/>(A(i,<sp/>k)<sp/>*<sp/>B(j,<sp/>l)<sp/>+<sp/>A(i,<sp/>l)<sp/>*<sp/>B(j,<sp/>k));</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="90"><highlight class="normal">}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ScalarType<sp/>=<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim<sp/>=<sp/>3&gt;</highlight></codeline>
<codeline lineno="101" refid="a00380_1gadb08b6f9cc40847b70286dc314a23000" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="a00380_1gadb08b6f9cc40847b70286dc314a23000" kindref="member">identityFourthOrder</ref>()<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>Eigen::TensorFixedSize&lt;ScalarType,<sp/>Eigen::Sizes&lt;dim,<sp/>dim,<sp/>dim,<sp/>dim&gt;&gt;<sp/>idTensor;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>idTensor.setZero();</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>dim;<sp/>++i)</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>dim;<sp/>++k)</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>idTensor(i,<sp/>i,<sp/>k,<sp/>k)<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>idTensor;</highlight></codeline>
<codeline lineno="108"><highlight class="normal">}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>AType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>BType&gt;</highlight></codeline>
<codeline lineno="122" refid="a00380_1ga8fa2b440586483c1ee0f9b90b9081da2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="a00380_1ga8fa2b440586483c1ee0f9b90b9081da2" kindref="member">fourthOrderIKJL</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::MatrixBase&lt;AType&gt;&amp;<sp/>A,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::MatrixBase&lt;BType&gt;&amp;<sp/>B)<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(AType::RowsAtCompileTime<sp/>==<sp/>BType::RowsAtCompileTime);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(AType::ColsAtCompileTime<sp/>==<sp/>BType::ColsAtCompileTime);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">ScalarResultType<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Dune::PromotionTraits&lt;typename<sp/>AType::Scalar,<sp/>typename<sp/>BType::Scalar&gt;::PromotedType;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>AType::RowsAtCompileTime;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>Eigen::TensorFixedSize&lt;ScalarResultType,<sp/>Eigen::Sizes&lt;dim,<sp/>dim,<sp/>dim,<sp/>dim&gt;&gt;<sp/>res;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>dim;<sp/>++i)</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>dim;<sp/>++j)</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>dim;<sp/>++k)</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l<sp/>=<sp/>0;<sp/>l<sp/>&lt;<sp/>dim;<sp/>++l)</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res(i,<sp/>j,<sp/>k,<sp/>l)<sp/>=<sp/>A(i,<sp/>k)<sp/>*<sp/>B(j,<sp/>l);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="134"><highlight class="normal">}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ScalarType,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim&gt;</highlight></codeline>
<codeline lineno="145" refid="a00380_1gaea03dbfcd8f85ef7af004c7e09244aa9" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="a00380_1gaea03dbfcd8f85ef7af004c7e09244aa9" kindref="member">symTwoSlots</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::TensorFixedSize&lt;ScalarType,<sp/>Eigen::Sizes&lt;dim,<sp/>dim,<sp/>dim,<sp/>dim&gt;&gt;&amp;<sp/>t,</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::array&lt;size_t,<sp/>2&gt;&amp;<sp/>slots)<sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>std::array&lt;size_t,<sp/>4&gt;<sp/>shuffleSlot;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>std::iota(shuffleSlot.begin(),<sp/>shuffleSlot.end(),<sp/>0);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>0,1,2,3<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>std::swap(shuffleSlot[slots[0]],<sp/>shuffleSlot[slots[1]]);<sp/></highlight><highlight class="comment">//<sp/>swap<sp/><sp/>the<sp/>given<sp/>slots</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(0.5<sp/>*<sp/>(t<sp/>+<sp/>t.shuffle(shuffleSlot))).eval();</highlight></codeline>
<codeline lineno="151"><highlight class="normal">}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="166" refid="a00380_1ga4304655095296ce9283e012587817a51" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>Eigen::Index<sp/><ref refid="a00380_1ga4304655095296ce9283e012587817a51" kindref="member">toVoigt</ref>(Eigen::Index<sp/>i,<sp/>Eigen::Index<sp/>j)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>j)<sp/></highlight><highlight class="comment">//<sp/>_00<sp/>-&gt;<sp/>0,<sp/>_11<sp/>-&gt;<sp/>1,<sp/><sp/>_22<sp/>-&gt;<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((i<sp/>==<sp/>1<sp/>and<sp/>j<sp/>==<sp/>2)<sp/>or<sp/>(i<sp/>==<sp/>2<sp/>and<sp/>j<sp/>==<sp/>1))<sp/></highlight><highlight class="comment">//<sp/>_12<sp/>and<sp/>_21<sp/>--&gt;<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>3;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((i<sp/>==<sp/>0<sp/>and<sp/>j<sp/>==<sp/>2)<sp/>or<sp/>(i<sp/>==<sp/>2<sp/>and<sp/>j<sp/>==<sp/>0))<sp/></highlight><highlight class="comment">//<sp/>_02<sp/>and<sp/>_20<sp/>--&gt;<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>4;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((i<sp/>==<sp/>0<sp/>and<sp/>j<sp/>==<sp/>1)<sp/>or<sp/>(i<sp/>==<sp/>1<sp/>and<sp/>j<sp/>==<sp/>0))<sp/></highlight><highlight class="comment">//<sp/>_01<sp/>and<sp/>_10<sp/>--&gt;<sp/>5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>5;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>assert(i<sp/>&lt;<sp/>3<sp/>and<sp/>j<sp/>&lt;<sp/>3<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;For<sp/>Voigt<sp/>notation<sp/>the<sp/>indices<sp/>need<sp/>to<sp/>be<sp/>0,1<sp/>or<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>__builtin_unreachable();</highlight></codeline>
<codeline lineno="177"><highlight class="normal">}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ScalarType<sp/>=<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="194" refid="a00380_1ga8777400d7d11c49d46f3c6be2698722e" refkind="member"><highlight class="normal">Eigen::Matrix&lt;ScalarType,<sp/>6,<sp/>6&gt;<sp/><ref refid="a00380_1ga4304655095296ce9283e012587817a51" kindref="member">toVoigt</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::TensorFixedSize&lt;ScalarType,<sp/>Eigen::Sizes&lt;3,<sp/>3,<sp/>3,<sp/>3&gt;&gt;&amp;<sp/>ft)<sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>Eigen::Matrix&lt;ScalarType,<sp/>6,<sp/>6&gt;<sp/>mat;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Eigen::Index<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>3;<sp/>++i)</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Eigen::Index<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>3;<sp/>++j)</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Eigen::Index<sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>3;<sp/>++k)</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Eigen::Index<sp/>l<sp/>=<sp/>0;<sp/>l<sp/>&lt;<sp/>3;<sp/>++l)</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat(<ref refid="a00380_1ga4304655095296ce9283e012587817a51" kindref="member">toVoigt</ref>(i,<sp/>j),<sp/><ref refid="a00380_1ga4304655095296ce9283e012587817a51" kindref="member">toVoigt</ref>(k,<sp/>l))<sp/>=<sp/>ft(i,<sp/>j,<sp/>k,<sp/>l);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mat;</highlight></codeline>
<codeline lineno="202"><highlight class="normal">}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ST,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Options,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxSize&gt;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="keyword">requires</highlight><highlight class="normal">((size<sp/>&gt;<sp/>0<sp/>and<sp/>size<sp/>&lt;=<sp/>3)<sp/>or<sp/>(maxSize<sp/>&gt;<sp/>0<sp/>and<sp/>maxSize<sp/>&lt;=<sp/>3<sp/>and<sp/>size<sp/>==<sp/>Eigen::Dynamic))</highlight></codeline>
<codeline lineno="225" refid="a00380_1ga130c456477155bd833fc6fd5b0223fd3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="a00380_1ga4304655095296ce9283e012587817a51" kindref="member">toVoigt</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Matrix&lt;ST,<sp/>size,<sp/>size,<sp/>Options,<sp/>maxSize,<sp/>maxSize&gt;&amp;<sp/>E,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isStrain<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isFixedSized<sp/><sp/><sp/>=<sp/>(size<sp/>!=<sp/>Eigen::Dynamic);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ST<sp/>possibleStrainFactor<sp/>=<sp/>isStrain<sp/>?<sp/>2.0<sp/>:<sp/>1.0;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>inputSize<sp/>=<sp/>isFixedSized<sp/>?<sp/>size<sp/>:<sp/>E.rows();</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>EVoigt<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>[&amp;]()<sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(isFixedSized)<sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Vector&lt;ST,<sp/>(size<sp/>*<sp/>(size<sp/>+<sp/>1))<sp/>/<sp/>2&gt;<sp/>EVoigt;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EVoigt.template<sp/>head&lt;size&gt;()<sp/>=<sp/>E.diagonal();</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EVoigt;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Matrix&lt;ST,<sp/>Eigen::Dynamic,<sp/>1,<sp/>Options,<sp/>6,<sp/>1&gt;<sp/>EVoigt;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EVoigt.resize((inputSize<sp/>*<sp/>(inputSize<sp/>+<sp/>1))<sp/>/<sp/>2);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EVoigt.template<sp/>head(inputSize)<sp/>=<sp/>E.diagonal();</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EVoigt;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>}();</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inputSize<sp/>==<sp/>2)</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>EVoigt(2)<sp/>=<sp/>E(0,<sp/>1)<sp/>*<sp/>possibleStrainFactor;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inputSize<sp/>==<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>EVoigt(inputSize)<sp/><sp/><sp/><sp/><sp/>=<sp/>E(1,<sp/>2)<sp/>*<sp/>possibleStrainFactor;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>EVoigt(inputSize<sp/>+<sp/>1)<sp/>=<sp/>E(0,<sp/>2)<sp/>*<sp/>possibleStrainFactor;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>EVoigt(inputSize<sp/>+<sp/>2)<sp/>=<sp/>E(0,<sp/>1)<sp/>*<sp/>possibleStrainFactor;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EVoigt;</highlight></codeline>
<codeline lineno="251"><highlight class="normal">}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ST,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Options,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxSize&gt;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="keyword">requires</highlight><highlight class="normal">((size<sp/>==<sp/>1<sp/>or<sp/>size<sp/>==<sp/>3<sp/>or<sp/>size<sp/>==<sp/>6)<sp/>or</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((maxSize<sp/>==<sp/>1<sp/>or<sp/>maxSize<sp/>==<sp/>3<sp/>or<sp/>maxSize<sp/>==<sp/>6)<sp/>and<sp/>size<sp/>==<sp/><ref refid="a00396" kindref="compound">Eigen</ref>::Dynamic))</highlight></codeline>
<codeline lineno="271" refid="a00380_1gadc8e9e9f3838d0392a5fcf1e11374ee9" refkind="member"><highlight class="normal">auto<sp/><ref refid="a00380_1gadc8e9e9f3838d0392a5fcf1e11374ee9" kindref="member">fromVoigt</ref>(const<sp/><ref refid="a00396" kindref="compound">Eigen</ref>::Matrix&lt;ST,<sp/>size,<sp/>1,<sp/>Options,<sp/>maxSize,<sp/>1&gt;&amp;<sp/>EVoigt,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isStrain<sp/>=<sp/>true)<sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isFixedSized<sp/><sp/><sp/>=<sp/>(size<sp/>!=<sp/>Eigen::Dynamic);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ST<sp/>possibleStrainFactor<sp/>=<sp/>isStrain<sp/>?<sp/>0.5<sp/>:<sp/>1.0;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>inputSize<sp/>=<sp/>isFixedSized<sp/>?<sp/>size<sp/>:<sp/>EVoigt.size();</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>matrixSize<sp/>=</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>isFixedSized<sp/>?<sp/>(-1<sp/>+<sp/><ref refid="a00384_1ae55d4d0c3478ab3ecf54ce905ddf223b" kindref="member">ct_sqrt</ref>(1<sp/>+<sp/>8<sp/>*<sp/>size))<sp/>/<sp/>2<sp/>:<sp/>(-1<sp/>+<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(std::sqrt(1<sp/>+<sp/>8<sp/>*<sp/>inputSize)))<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>E<sp/>=<sp/>[&amp;]()<sp/>{</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(isFixedSized)<sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Matrix&lt;ST,<sp/>matrixSize,<sp/>matrixSize&gt;<sp/>E;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>E.diagonal()<sp/>=<sp/>EVoigt.template<sp/>head&lt;matrixSize&gt;();</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>E;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Matrix&lt;ST,<sp/>Eigen::Dynamic,<sp/>Eigen::Dynamic,<sp/>Options,<sp/>3,<sp/>3&gt;<sp/>E;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>E.resize(matrixSize,<sp/>matrixSize);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>E.diagonal()<sp/>=<sp/>EVoigt.template<sp/>head(matrixSize);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>E;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/>}();</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(matrixSize<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>E(0,<sp/>1)<sp/>=<sp/>E(1,<sp/>0)<sp/>=<sp/>EVoigt(2)<sp/>*<sp/>possibleStrainFactor;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(matrixSize<sp/>==<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>E(2,<sp/>1)<sp/>=<sp/>E(1,<sp/>2)<sp/>=<sp/>EVoigt(matrixSize)<sp/>*<sp/>possibleStrainFactor;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>E(2,<sp/>0)<sp/>=<sp/>E(0,<sp/>2)<sp/>=<sp/>EVoigt(matrixSize<sp/>+<sp/>1)<sp/>*<sp/>possibleStrainFactor;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>E(1,<sp/>0)<sp/>=<sp/>E(0,<sp/>1)<sp/>=<sp/>EVoigt(matrixSize<sp/>+<sp/>2)<sp/>*<sp/>possibleStrainFactor;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>E;</highlight></codeline>
<codeline lineno="301"><highlight class="normal">}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="316" refid="a00380_1ga518e0394f7c90dbe798b6cb8d757b822" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>std::array&lt;size_t,<sp/>2&gt;<sp/><ref refid="a00380_1gadc8e9e9f3838d0392a5fcf1e11374ee9" kindref="member">fromVoigt</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>3)<sp/></highlight><highlight class="comment">//<sp/>_00<sp/>-&gt;<sp/>0,<sp/>_11<sp/>-&gt;<sp/>1,<sp/><sp/>_22<sp/>-&gt;<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{i,<sp/>i};</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>3)</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{1,<sp/>2};</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>4)</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{0,<sp/>2};</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>5)</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{0,<sp/>1};</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(i<sp/>&lt;<sp/>6<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;For<sp/>Voigt<sp/>notation<sp/>the<sp/>indices<sp/>need<sp/>to<sp/>be<sp/>0<sp/>and<sp/>5.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>__builtin_unreachable();</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="329"><highlight class="normal">}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ScalarType&gt;</highlight></codeline>
<codeline lineno="343" refid="a00380_1ga0afe53095f875017b5673a42e13e6f5a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="a00380_1gadc8e9e9f3838d0392a5fcf1e11374ee9" kindref="member">fromVoigt</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Matrix&lt;ScalarType,<sp/>6,<sp/>6&gt;&amp;<sp/>CVoigt)<sp/>{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/>Eigen::TensorFixedSize&lt;ScalarType,<sp/>Eigen::Sizes&lt;3,<sp/>3,<sp/>3,<sp/>3&gt;&gt;<sp/>C;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>size_t<sp/>iR=0,jR=0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>6;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>6;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>firstIndices<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="a00380_1gadc8e9e9f3838d0392a5fcf1e11374ee9" kindref="member">fromVoigt</ref>(i);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>secondIndices<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="a00380_1gadc8e9e9f3838d0392a5fcf1e11374ee9" kindref="member">fromVoigt</ref>(j);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>C(firstIndices[0],<sp/>firstIndices[1],<sp/>secondIndices[0],<sp/>secondIndices[1])<sp/>=<sp/>CVoigt(i,<sp/>j);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>C;</highlight></codeline>
<codeline lineno="354"><highlight class="normal">}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Geometry&gt;</highlight></codeline>
<codeline lineno="367" refid="a00384_1a7a5b9f5e83f6918ca1726fb4316c3b86" refkind="member"><highlight class="normal">Eigen::Matrix3d<sp/><ref refid="a00384_1a7a5b9f5e83f6918ca1726fb4316c3b86" kindref="member">calcTransformationMatrix2D</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Geometry&amp;<sp/>geometry)<sp/>{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>referenceElement<sp/>=<sp/>Dune::ReferenceElements&lt;double,<sp/>2&gt;::general(geometry.type());</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>quadPos0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>referenceElement.position(0,<sp/>0);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>jacobianinvT0<sp/>=<sp/>toEigen(geometry.jacobianInverseTransposed(quadPos0));</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>detJ0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>geometry.integrationElement(quadPos0);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>jaco<sp/>=<sp/>(jacobianinvT0).inverse().eval();</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>J11<sp/><sp/>=<sp/>jaco(0,<sp/>0);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>J12<sp/><sp/>=<sp/>jaco(0,<sp/>1);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>J21<sp/><sp/>=<sp/>jaco(1,<sp/>0);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>J22<sp/><sp/>=<sp/>jaco(1,<sp/>1);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/>Eigen::Matrix3d<sp/>T0{</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/>J11<sp/>*<sp/>J11,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>J12<sp/>*<sp/>J12,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J11<sp/>*<sp/>J12},</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/>J21<sp/>*<sp/>J21,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>J22<sp/>*<sp/>J22,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J21<sp/>*<sp/>J22},</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{2.0<sp/>*<sp/>J11<sp/>*<sp/>J21,<sp/>2.0<sp/>*<sp/>J12<sp/>*<sp/>J22,<sp/>J21<sp/>*<sp/>J12<sp/>+<sp/>J11<sp/>*<sp/>J22}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>T0.inverse()<sp/>*<sp/>detJ0;</highlight></codeline>
<codeline lineno="387"><highlight class="normal">}</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Geometry&gt;</highlight></codeline>
<codeline lineno="400" refid="a00384_1a95234ab8588ced83708c6e5a30e2368e" refkind="member"><highlight class="normal">Eigen::Matrix&lt;double,<sp/>6,<sp/>6&gt;<sp/><ref refid="a00384_1a95234ab8588ced83708c6e5a30e2368e" kindref="member">calcTransformationMatrix3D</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Geometry&amp;<sp/>geometry)<sp/>{</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>referenceElement<sp/>=<sp/>Dune::ReferenceElements&lt;double,<sp/>3&gt;::general(geometry.type());</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>quadPos0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>referenceElement.position(0,<sp/>0);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>jacobianinvT0<sp/>=<sp/>toEigen(geometry.jacobianInverseTransposed(quadPos0));</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>detJ0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>geometry.integrationElement(quadPos0);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>jaco<sp/>=<sp/>(jacobianinvT0).inverse().eval();</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>J11<sp/><sp/>=<sp/>jaco(0,<sp/>0);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>J12<sp/><sp/>=<sp/>jaco(0,<sp/>1);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>J13<sp/><sp/>=<sp/>jaco(0,<sp/>2);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>J21<sp/><sp/>=<sp/>jaco(1,<sp/>0);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>J22<sp/><sp/>=<sp/>jaco(1,<sp/>1);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>J23<sp/><sp/>=<sp/>jaco(1,<sp/>2);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>J31<sp/><sp/>=<sp/>jaco(2,<sp/>0);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>J32<sp/><sp/>=<sp/>jaco(2,<sp/>1);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>J33<sp/><sp/>=<sp/>jaco(2,<sp/>2);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>clang-format<sp/>off</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/>Eigen::Matrix&lt;double,<sp/>6,<sp/>6&gt;<sp/>T0<sp/><sp/>{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/>{J11<sp/>*<sp/>J11,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>J12<sp/>*<sp/>J12,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>J13<sp/>*<sp/>J13,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J11<sp/>*<sp/>J12,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J11<sp/>*<sp/>J13,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J12<sp/>*<sp/>J13},</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>{J21<sp/>*<sp/>J21,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>J22<sp/>*<sp/>J22,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>J23<sp/>*<sp/>J23,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J21<sp/>*<sp/>J22,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J21<sp/>*<sp/>J23,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J22<sp/>*<sp/>J23},</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>{J31<sp/>*<sp/>J31,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>J32<sp/>*<sp/>J32,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>J33<sp/>*<sp/>J33,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J31<sp/>*<sp/>J32,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J31<sp/>*<sp/>J33,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J32<sp/>*<sp/>J33},</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>{2.0<sp/>*<sp/>J11<sp/>*<sp/>J21,<sp/>2.0<sp/>*<sp/>J12<sp/>*<sp/>J22,<sp/>2.0<sp/>*<sp/>J13<sp/>*<sp/>J23,<sp/>J11<sp/>*<sp/>J22<sp/>+<sp/>J21<sp/>*<sp/>J12,<sp/>J11<sp/>*<sp/>J23<sp/>+<sp/>J21<sp/>*<sp/>J13,<sp/>J12<sp/>*<sp/>J23<sp/>+<sp/>J22<sp/>*<sp/>J13},</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/>{2.0<sp/>*<sp/>J11<sp/>*<sp/>J31,<sp/>2.0<sp/>*<sp/>J12<sp/>*<sp/>J32,<sp/>2.0<sp/>*<sp/>J13<sp/>*<sp/>J33,<sp/>J11<sp/>*<sp/>J32<sp/>+<sp/>J31<sp/>*<sp/>J12,<sp/>J11<sp/>*<sp/>J33<sp/>+<sp/>J31<sp/>*<sp/>J13,<sp/>J12<sp/>*<sp/>J33<sp/>+<sp/>J32<sp/>*<sp/>J13},</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>{2.0<sp/>*<sp/>J31<sp/>*<sp/>J21,<sp/>2.0<sp/>*<sp/>J32<sp/>*<sp/>J22,<sp/>2.0<sp/>*<sp/>J33<sp/>*<sp/>J23,<sp/>J31<sp/>*<sp/>J22<sp/>+<sp/>J21<sp/>*<sp/>J32,<sp/>J31<sp/>*<sp/>J23<sp/>+<sp/>J21<sp/>*<sp/>J33,<sp/>J32<sp/>*<sp/>J23<sp/>+<sp/>J22<sp/>*<sp/>J33}</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>clang-format<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>T0.inverse()<sp/>*<sp/>detJ0;</highlight></codeline>
<codeline lineno="430"><highlight class="normal">}</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Ikarus</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh"/>
  </compounddef>
</doxygen>
