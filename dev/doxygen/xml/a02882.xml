<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="a02882" kind="file" language="C++">
    <compoundname>utils/dirichletvalues.hh</compoundname>
    <includes local="no">algorithm</includes>
    <includes local="no">concepts</includes>
    <includes local="no">cstddef</includes>
    <includes local="no">functional</includes>
    <includes local="no">type_traits</includes>
    <includes local="no">utility</includes>
    <includes local="no">vector</includes>
    <includes local="no">dune/functions/backends/istlvectorbackend.hh</includes>
    <includes local="no">dune/functions/functionspacebases/boundarydofs.hh</includes>
    <includes local="no">dune/functions/functionspacebases/flatmultiindex.hh</includes>
    <includes local="no">dune/functions/functionspacebases/subspacebasis.hh</includes>
    <includes local="no">Eigen/Core</includes>
    <includes local="no">autodiff/forward/real/real.hpp</includes>
    <includes refid="a00047" local="no">ikarus/utils/concepts.hh</includes>
    <includedby refid="a00164" local="no">assemblermanipulatorbuildingblocks.hh</includedby>
    <includedby refid="a02855" local="no">interface.hh</includedby>
    <incdepgraph>
      <node id="21">
        <label>ikarus/assembler/dirichletbcenforcement.hh</label>
        <link refid="a00176"/>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>ikarus/finiteelements/mechanics/materials/tags.hh</label>
        <link refid="a00242"/>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>ikarus/utils/concepts.hh</label>
        <link refid="a00047"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>dirichletvalues.hh</label>
        <link refid="a02882"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>ikarus/utils/makeenum.hh</label>
        <link refid="a00005"/>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>ikarus/utils/traits.hh</label>
        <link refid="a00011"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>Eigen/Core</label>
      </node>
      <node id="18">
        <label>Eigen/Dense</label>
      </node>
      <node id="19">
        <label>Eigen/Sparse</label>
      </node>
      <node id="2">
        <label>algorithm</label>
      </node>
      <node id="20">
        <label>autodiff/forward/dual/dual.hpp</label>
      </node>
      <node id="14">
        <label>autodiff/forward/real/real.hpp</label>
      </node>
      <node id="3">
        <label>concepts</label>
      </node>
      <node id="4">
        <label>cstddef</label>
      </node>
      <node id="23">
        <label>dune/common/exceptions.hh</label>
      </node>
      <node id="27">
        <label>dune/common/hybridutilities.hh</label>
      </node>
      <node id="9">
        <label>dune/functions/backends/istlvectorbackend.hh</label>
      </node>
      <node id="16">
        <label>dune/functions/functionspacebases/basistags.hh</label>
      </node>
      <node id="10">
        <label>dune/functions/functionspacebases/boundarydofs.hh</label>
      </node>
      <node id="11">
        <label>dune/functions/functionspacebases/flatmultiindex.hh</label>
      </node>
      <node id="17">
        <label>dune/functions/functionspacebases/lagrangebasis.hh</label>
      </node>
      <node id="12">
        <label>dune/functions/functionspacebases/subspacebasis.hh</label>
      </node>
      <node id="5">
        <label>functional</label>
      </node>
      <node id="26">
        <label>tuple</label>
      </node>
      <node id="6">
        <label>type_traits</label>
      </node>
      <node id="7">
        <label>utility</label>
      </node>
      <node id="8">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>assemblermanipulatorbuildingblocks.hh</label>
        <link refid="a00164"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>assemblermanipulatorfuser.hh</label>
        <link refid="a00173"/>
      </node>
      <node id="4">
        <label>interface.hh</label>
        <link refid="a02855"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>simpleassemblers.hh</label>
        <link refid="a00170"/>
      </node>
      <node id="1">
        <label>dirichletvalues.hh</label>
        <link refid="a02882"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="a01792" prot="public">Ikarus::DeriveSizeType&lt; T &gt;</innerclass>
    <innerclass refid="a01796" prot="public">Ikarus::DeriveSizeType&lt; std::vector&lt; bool &gt; &gt;</innerclass>
    <innerclass refid="a01800" prot="public">Ikarus::DirichletValues</innerclass>
    <innerclass refid="a01804" prot="private">Ikarus::DirichletValues::DirichletFunctions</innerclass>
    <innernamespace refid="a00404">Dune</innernamespace>
    <innernamespace refid="a00384">Ikarus</innernamespace>
    <briefdescription>
<para>Definition of DirichletValues class for handling Dirichlet boundary conditions. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>SPDX-FileCopyrightText:<sp/>2021-2025<sp/>The<sp/>Ikarus<sp/>Developers<sp/>mueller@ibb.uni-stuttgart.de</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPDX-License-Identifier:<sp/>LGPL-3.0-or-later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;concepts&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstddef&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;dune/functions/backends/istlvectorbackend.hh&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;dune/functions/functionspacebases/boundarydofs.hh&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;dune/functions/functionspacebases/flatmultiindex.hh&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;dune/functions/functionspacebases/subspacebasis.hh&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Eigen/Core&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;autodiff/forward/real/real.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="a00047" kindref="compound">ikarus/utils/concepts.hh</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30" refid="a00404" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="a00404" kindref="compound">Dune</ref><sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>K,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="32" refid="a01784" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="a01784" kindref="compound">FieldVector</ref>;</highlight></codeline>
<codeline lineno="33"><highlight class="normal">}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="a00384" kindref="compound">Ikarus</ref><sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="41" refid="a01788" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="a01788" kindref="compound">DeriveSizeType</ref>;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;Concepts::EigenVector<sp/>T&gt;</highlight></codeline>
<codeline lineno="44" refid="a01792" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="a01788" kindref="compound">DeriveSizeType</ref>&lt;T&gt;</highlight></codeline>
<codeline lineno="45"><highlight class="normal">{</highlight></codeline>
<codeline lineno="46" refid="a01792_1ad2f15a80c92d0ac72c16edbe30b7e9ba" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="a01792_1ad2f15a80c92d0ac72c16edbe30b7e9ba" kindref="member">SizeType</ref><sp/>=<sp/>Eigen::Index;</highlight></codeline>
<codeline lineno="47"><highlight class="normal">};</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="50" refid="a01796" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="a01788" kindref="compound">DeriveSizeType</ref>&lt;<ref refid="a00383" kindref="compound">std</ref>::vector&lt;bool&gt;&gt;</highlight></codeline>
<codeline lineno="51"><highlight class="normal">{</highlight></codeline>
<codeline lineno="52" refid="a01796_1a737ba53080c8f2b8d01f458dd574de9c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="a01796_1a737ba53080c8f2b8d01f458dd574de9c" kindref="member">SizeType</ref><sp/>=<sp/>std::vector&lt;bool&gt;::size_type;</highlight></codeline>
<codeline lineno="53"><highlight class="normal">};</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FC<sp/>=<sp/>std::vector&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&gt;&gt;</highlight></codeline>
<codeline lineno="66" refid="a01800" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="a01800" kindref="compound">DirichletValues</ref></highlight></codeline>
<codeline lineno="67"><highlight class="normal">{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="69" refid="a01800_1a2e6f1ef4a810a7269303f54a6f74539f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="a01800_1a2e6f1ef4a810a7269303f54a6f74539f" kindref="member">Basis</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>std::remove_cvref_t&lt;B&gt;;</highlight></codeline>
<codeline lineno="70" refid="a01800_1aa71c2b94b37f2b4e83f9f1e059e6fe4c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="a01800_1aa71c2b94b37f2b4e83f9f1e059e6fe4c" kindref="member">FlagsType</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>FC;</highlight></codeline>
<codeline lineno="71" refid="a01800_1a79e90730d4ac67efb5e38590c0429df5" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="a01800_1a79e90730d4ac67efb5e38590c0429df5" kindref="member">worldDimension</ref><sp/>=<sp/>Basis::GridView::dimensionworld;</highlight></codeline>
<codeline lineno="72" refid="a01800_1a3db820fbcd2b7edf58ce3b21b261f621" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="a01800_1a3db820fbcd2b7edf58ce3b21b261f621" kindref="member">BackendType</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(Dune::Functions::istlVectorBackend(std::declval&lt;FlagsType&amp;&gt;()));</highlight></codeline>
<codeline lineno="73" refid="a01800_1ace0ece5adceb26d9db00c7c096568ea0" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="a01800_1ace0ece5adceb26d9db00c7c096568ea0" kindref="member">SizeType</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="a01788" kindref="compound">DeriveSizeType&lt;FlagsType&gt;::SizeType</ref>;</highlight></codeline>
<codeline lineno="74" refid="a01800_1aeb81ceb2617369a584dd12f4574ab1dc" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="a01800_1aeb81ceb2617369a584dd12f4574ab1dc" kindref="member">DirichletValues</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>B&amp;<sp/><ref refid="a01800_1ae783c95d2e4b55d9d37f4c141b1d719b" kindref="member">basis</ref>)</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>basis_{<ref refid="a01800_1ae783c95d2e4b55d9d37f4c141b1d719b" kindref="member">basis</ref>},</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dirichletFlagsBackend_{dirichletFlags_}<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>dirichletFlagsBackend_.resize(basis_);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>std::fill(dirichletFlags_.begin(),<sp/>dirichletFlags_.end(),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>inhomogeneousBoundaryVectorDummy_.setZero(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Eigen::Index</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(basis_.size()));</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TreePath<sp/>=<sp/>Dune::TypeTree::Hybr</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">TreePath&lt;&gt;&gt;</highlight></codeline>
<codeline lineno="92" refid="a01800_1a3b40113e1bf44f2e269242d677afcc55" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a01800_1a3b40113e1bf44f2e269242d677afcc55" kindref="member">fixBoundaryDOFs</ref>(F&amp;&amp;<sp/>f,<sp/>TreePath&amp;&amp;<sp/>treePath<sp/>=<sp/>{})<sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Dune::Functions;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">SubSpaceLocalView<sp/>=</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::remove_cvref_t&lt;decltype(subspaceBasis(basis_,<sp/>std::forward&lt;TreePath&gt;(treePath)))&gt;::LocalView;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(<ref refid="a01967" kindref="compound">Concepts::IsFunctorWithArgs&lt;F, BackendType, typename Basis::MultiIndex&gt;</ref>)<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lambda<sp/>=<sp/>[&amp;](</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>indexGlobal)<sp/>{<sp/>f(dirichletFlagsBackend_,<sp/>indexGlobal);<sp/>};</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Dune::Functions::forEachBoundaryDOF(subspaceBasis(basis_,<sp/>std::forward&lt;TreePath&gt;(treePath)),<sp/>lambda);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(Concepts::IsFunctorWithArgs&lt;F,<sp/>BackendType,<sp/>int,<sp/>SubSpaceLocalView&gt;)<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lambda<sp/>=<sp/>[&amp;](</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>localIndex,<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>localView)<sp/>{<sp/>f(dirichletFlagsBackend_,<sp/>localIndex,<sp/>localView);<sp/>};</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Dune::Functions::forEachBoundaryDOF(subspaceBasis(basis_,<sp/>std::forward&lt;TreePath&gt;(treePath)),<sp/>lambda);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(Concepts::IsFunctorWithArgs&lt;F,<sp/><ref refid="a01800_1a3db820fbcd2b7edf58ce3b21b261f621" kindref="member">BackendType</ref>,<sp/>int,<sp/>SubSpaceLocalView,</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Basis::GridView::Intersection&gt;)<sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lambda<sp/>=<sp/>[&amp;](</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>localIndex,<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>localView,<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>intersection)<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f(dirichletFlagsBackend_,<sp/>localIndex,<sp/>localView,<sp/>intersection);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Dune::Functions::forEachBoundaryDOF(subspaceBasis(basis_,<sp/>std::forward&lt;TreePath&gt;(treePath)),<sp/>lambda);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(Dune::AlwaysFalse&lt;F&gt;(),<sp/></highlight><highlight class="stringliteral">&quot;fixBoundaryDOFs:<sp/>A<sp/>function<sp/>with<sp/>this<sp/>signature<sp/>is<sp/>not<sp/>supported&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="123" refid="a01800_1a956ce2cdc09731f001821c7b59d49e85" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a01800_1a956ce2cdc09731f001821c7b59d49e85" kindref="member">fixDOFs</ref>(F&amp;&amp;<sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>f(basis_,<sp/>dirichletFlagsBackend_);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MultiIndex&gt;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(not<sp/>std::integral&lt;MultiIndex&gt;)</highlight></codeline>
<codeline lineno="135" refid="a01800_1a179a4b05a361fc9ea0a3e935dcf0e45a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a01800_1a179a4b05a361fc9ea0a3e935dcf0e45a" kindref="member">setSingleDOF</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MultiIndex<sp/>i,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>flag)<sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>dirichletFlagsBackend_[i]<sp/>=<sp/>flag;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="146" refid="a01800_1a2c8ce98339eddd3f3bf1cdbf4e07a45f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a01800_1a2c8ce98339eddd3f3bf1cdbf4e07a45f" kindref="member">setSingleDOF</ref>(std::size_t<sp/>i,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>flag)</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(std::same_as&lt;typename<sp/>Basis::MultiIndex,<sp/>Dune::Functions::FlatMultiIndex&lt;size_t&gt;&gt;)</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>dirichletFlags_[i]<sp/>=<sp/>flag;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="155" refid="a01800_1ab8ae184ec5c0c79a893a8111d7315442" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a01800_1ab8ae184ec5c0c79a893a8111d7315442" kindref="member">reset</ref>()<sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>std::fill(dirichletFlags_.begin(),<sp/>dirichletFlags_.end(),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>inhomogeneousBoundaryVectorDummy_.setZero(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Eigen::Index</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(basis_.size()));</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>\brief<sp/>Returns<sp/>the<sp/>local<sp/>basis<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161" refid="a01800_1ae783c95d2e4b55d9d37f4c141b1d719b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/><ref refid="a01800_1ae783c95d2e4b55d9d37f4c141b1d719b" kindref="member">basis</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>basis_;<sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>\brief<sp/>Returns<sp/>a<sp/>boolean<sp/>values,<sp/>if<sp/>the<sp/>give<sp/>multiIndex<sp/>is<sp/>constrained<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MultiIndex&gt;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(not<sp/>std::integral&lt;MultiIndex&gt;)</highlight></codeline>
<codeline lineno="166" refid="a01800_1a1b1fccdb71619c0a49aa24977682d43a" refkind="member"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="a01800_1a1b1fccdb71619c0a49aa24977682d43a" kindref="member">isConstrained</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MultiIndex&amp;<sp/>multiIndex)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dirichletFlagsBackend_[multiIndex];</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>\brief<sp/>Returns<sp/>a<sp/>boolean<sp/>values,<sp/>if<sp/>the<sp/>i-th<sp/>degree<sp/>of<sp/>freedom<sp/>is<sp/>constrained<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171" refid="a01800_1a1cdd766b0feb7e85ac3d3df10704e659" refkind="member"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="a01800_1a1cdd766b0feb7e85ac3d3df10704e659" kindref="member">isConstrained</ref>(std::size_t<sp/>i)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(std::same_as&lt;typename<sp/>Basis::MultiIndex,<sp/>Dune::Functions::FlatMultiIndex&lt;size_t&gt;&gt;)</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dirichletFlags_[i];</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>\brief<sp/>Returns<sp/>how<sp/>many<sp/>degrees<sp/>of<sp/>freedoms<sp/>are<sp/>fixed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178" refid="a01800_1aeb299b04b2777be56012b32a3b2e6a9c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="a01800_1aeb299b04b2777be56012b32a3b2e6a9c" kindref="member">fixedDOFsize</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::ranges::count(dirichletFlags_,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>\brief<sp/>Returns<sp/>how<sp/>many<sp/>degrees<sp/>of<sp/>freedom<sp/>there<sp/>are<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181" refid="a01800_1a010fa7b0721c137eb61221493e52dc92" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="a01800_1a010fa7b0721c137eb61221493e52dc92" kindref="member">size</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dirichletFlags_.size();<sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>\brief<sp/>Returns<sp/>the<sp/>underlying<sp/>dof<sp/>flag<sp/>container<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184" refid="a01800_1af8495b65eac223b7b6c64f07b31cc814" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/><ref refid="a01800_1af8495b65eac223b7b6c64f07b31cc814" kindref="member">container</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dirichletFlags_;<sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="196" refid="a01800_1abc3413114cb9272944e1b44606c6a0a1" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a01800_1abc3413114cb9272944e1b44606c6a0a1" kindref="member">storeInhomogeneousBoundaryCondition</ref>(F&amp;&amp;<sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>derivativeLambda<sp/>=<sp/>[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>globalCoord,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>lambda)<sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>autodiff::real<sp/>lambdaDual<sp/>=<sp/>lambda;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lambdaDual[1]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1;<sp/></highlight><highlight class="comment">//<sp/>Setting<sp/>the<sp/>derivative<sp/>in<sp/>lambda<sp/>direction<sp/>to<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>derivative(f(globalCoord,<sp/>lambdaDual));</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>dirichletFunctions_.push_back({f,<sp/>derivativeLambda});</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="214" refid="a01800_1ac3950f8821f8e8c1f2a8b8f8a7e86875" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a01800_1ac3950f8821f8e8c1f2a8b8f8a7e86875" kindref="member">evaluateInhomogeneousBoundaryCondition</ref>(Eigen::VectorXd&amp;<sp/>xIh,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>lambda)<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>inhomogeneousBoundaryVectorDummy_.setZero();</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>xIh.resizeLike(inhomogeneousBoundaryVectorDummy_);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>xIh.setZero();</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>f<sp/>:<sp/>dirichletFunctions_)<sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>interpolate(</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>basis_,<sp/>inhomogeneousBoundaryVectorDummy_,</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>globalCoord)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f.value(globalCoord,<sp/>lambda);<sp/>},<sp/>dirichletFlagsBackend_);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xIh<sp/>+=<sp/>inhomogeneousBoundaryVectorDummy_;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="235" refid="a01800_1a5d7fdc80dfd3ebdcb58f0770844f71da" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a01800_1a5d7fdc80dfd3ebdcb58f0770844f71da" kindref="member">evaluateInhomogeneousBoundaryConditionDerivative</ref>(Eigen::VectorXd&amp;<sp/>xIh,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>lambda)<sp/>{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>inhomogeneousBoundaryVectorDummy_.setZero();</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>xIh.resizeLike(inhomogeneousBoundaryVectorDummy_);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>xIh.setZero();</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>f<sp/>:<sp/>dirichletFunctions_)<sp/>{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>interpolate(</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>basis_,<sp/>inhomogeneousBoundaryVectorDummy_,</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>globalCoord)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f.derivative(globalCoord,<sp/>lambda);<sp/>},<sp/>dirichletFlagsBackend_);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xIh<sp/>+=<sp/>inhomogeneousBoundaryVectorDummy_;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>Eigen::VectorXd<sp/>inhomogeneousBoundaryVectorDummy_;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><ref refid="a01800_1a2e6f1ef4a810a7269303f54a6f74539f" kindref="member">Basis</ref><sp/>basis_;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><ref refid="a01800_1aa71c2b94b37f2b4e83f9f1e059e6fe4c" kindref="member">FlagsType</ref><sp/>dirichletFlags_;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><ref refid="a01800_1a3db820fbcd2b7edf58ce3b21b261f621" kindref="member">BackendType</ref><sp/>dirichletFlagsBackend_;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">DirichletFunctions</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Signature<sp/>=<sp/>std::function&lt;Eigen::Vector&lt;double,<sp/>worldDimension&gt;(</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01784" kindref="compound">Dune::FieldVector&lt;double, worldDimension&gt;</ref>&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;)&gt;;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>Signature<sp/>value;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>Signature<sp/>derivative;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>std::vector&lt;DirichletFunctions&gt;<sp/>dirichletFunctions_;</highlight></codeline>
<codeline lineno="260"><highlight class="normal">};</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Ikarus</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/__w/ikarus/ikarus/repo/ikarus/utils/dirichletvalues.hh"/>
  </compounddef>
</doxygen>
