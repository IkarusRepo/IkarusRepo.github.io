<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="a00275" kind="file" language="C++">
    <compoundname>materialhelpers.hh</compoundname>
    <includes local="no">ranges</includes>
    <includes local="no">dune/common/float_cmp.hh</includes>
    <includes local="no">Eigen/Dense</includes>
    <includes refid="a03101" local="no">ikarus/utils/concepts.hh</includes>
    <includes refid="a00032" local="no">ikarus/utils/tensorutils.hh</includes>
    <includedby refid="a00248" local="no">arrudaboyce.hh</includedby>
    <includedby refid="a00140" local="no">autodiffmat.hh</includedby>
    <includedby refid="a00251" local="no">blatzko.hh</includedby>
    <includedby refid="a00260" local="no">deviatoricinvariants.hh</includedby>
    <includedby refid="a00245" local="no">gent.hh</includedby>
    <includedby refid="a03071" local="no">interface.hh</includedby>
    <includedby refid="a00254" local="no">invariantbased.hh</includedby>
    <includedby refid="a00269" local="no">neohooke.hh</includedby>
    <includedby refid="a00263" local="no">ogden.hh</includedby>
    <includedby refid="a00242" local="yes">vanishingstrain.hh</includedby>
    <includedby refid="a00239" local="yes">vanishingstress.hh</includedby>
    <incdepgraph>
      <node id="14">
        <label>ikarus/assembler/dirichletbcenforcement.hh</label>
        <link refid="a00347"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>materialhelpers.hh</label>
        <link refid="a00275"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>ikarus/finiteelements/mechanics/materials/tags.hh</label>
        <link refid="a00233"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>ikarus/utils/concepts.hh</label>
        <link refid="a03101"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>ikarus/utils/makeenum.hh</label>
        <link refid="a00011"/>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>ikarus/utils/math.hh</label>
        <link refid="a00044"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>ikarus/utils/tensorutils.hh</label>
        <link refid="a00032"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>ikarus/utils/traits.hh</label>
        <link refid="a00068"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>Eigen/Dense</label>
      </node>
      <node id="12">
        <label>Eigen/Sparse</label>
      </node>
      <node id="13">
        <label>autodiff/forward/dual/dual.hpp</label>
      </node>
      <node id="6">
        <label>concepts</label>
      </node>
      <node id="16">
        <label>dune/common/exceptions.hh</label>
      </node>
      <node id="3">
        <label>dune/common/float_cmp.hh</label>
      </node>
      <node id="21">
        <label>dune/common/hybridutilities.hh</label>
      </node>
      <node id="25">
        <label>dune/common/promotiontraits.hh</label>
      </node>
      <node id="10">
        <label>dune/functions/functionspacebases/basistags.hh</label>
      </node>
      <node id="11">
        <label>dune/functions/functionspacebases/lagrangebasis.hh</label>
      </node>
      <node id="19">
        <label>functional</label>
      </node>
      <node id="23">
        <label>numeric</label>
      </node>
      <node id="2">
        <label>ranges</label>
      </node>
      <node id="20">
        <label>tuple</label>
      </node>
      <node id="7">
        <label>type_traits</label>
      </node>
      <node id="24">
        <label>unsupported/Eigen/CXX11/Tensor</label>
      </node>
      <node id="8">
        <label>utility</label>
      </node>
      <node id="9">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="10">
        <label>autodiffmat.hh</label>
        <link refid="a00140"/>
      </node>
      <node id="5">
        <label>linearelastic.hh</label>
        <link refid="a00224"/>
      </node>
      <node id="4">
        <label>materials.hh</label>
        <link refid="a03059"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>arrudaboyce.hh</label>
        <link refid="a00248"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>blatzko.hh</label>
        <link refid="a00251"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>deviatoricinvariants.hh</label>
        <link refid="a00260"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>gent.hh</label>
        <link refid="a00245"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>invariantbased.hh</label>
        <link refid="a00254"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>ogden.hh</label>
        <link refid="a00263"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>factory.hh</label>
        <link refid="a00266"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>interface.hh</label>
        <link refid="a03071"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>neohooke.hh</label>
        <link refid="a00269"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>materialhelpers.hh</label>
        <link refid="a00275"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>vanishingstrain.hh</label>
        <link refid="a00242"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>vanishingstress.hh</label>
        <link refid="a00239"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>resultevaluators.hh</label>
        <link refid="a00353"/>
      </node>
      <node id="6">
        <label>material.hh</label>
        <link refid="a00158"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>_ikarus.cc</label>
        <link refid="a00365"/>
      </node>
      <node id="7">
        <label>materials.hh</label>
        <link refid="a03062"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="a01630" prot="public">Ikarus::Materials::MatrixIndexPair</innerclass>
    <innernamespace refid="a00411">Ikarus</innernamespace>
    <innernamespace refid="a00422">Ikarus::Materials</innernamespace>
    <briefdescription>
<para>helper functions used by material model implementations. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>SPDX-FileCopyrightText:<sp/>2021-2025<sp/>The<sp/>Ikarus<sp/>Developers<sp/>mueller@ibb.uni-stuttgart.de</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPDX-License-Identifier:<sp/>LGPL-3.0-or-later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ranges&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;dune/common/float_cmp.hh&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Eigen/Dense&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="a03101" kindref="compound">ikarus/utils/concepts.hh</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="a00032" kindref="compound">ikarus/utils/tensorutils.hh</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="a00422" kindref="compound">Ikarus::Materials</ref><sp/>{</highlight></codeline>
<codeline lineno="25" refid="a01630" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="a01630" kindref="compound">MatrixIndexPair</ref></highlight></codeline>
<codeline lineno="26"><highlight class="normal">{</highlight></codeline>
<codeline lineno="27" refid="a01630_1aea06e613d6a158b8e197a5f79ef7f197" refkind="member"><highlight class="normal"><sp/><sp/>Eigen::Index<sp/><ref refid="a01630_1aea06e613d6a158b8e197a5f79ef7f197" kindref="member">row</ref>;<sp/></highlight></codeline>
<codeline lineno="28" refid="a01630_1a05834d6b2ab9428e4ecc645234ef9d34" refkind="member"><highlight class="normal"><sp/><sp/>Eigen::Index<sp/><ref refid="a01630_1a05834d6b2ab9428e4ecc645234ef9d34" kindref="member">col</ref>;<sp/></highlight></codeline>
<codeline lineno="29"><highlight class="normal">};</highlight></codeline>
<codeline lineno="30"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Ikarus::Materials</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Ikarus::Materials::Impl<sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size&gt;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">consteval</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>createfreeVoigtIndices(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::array&lt;MatrixIndexPair,<sp/>size&gt;&amp;<sp/>fixed)<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>std::array&lt;size_t,<sp/>6<sp/>-<sp/>size&gt;<sp/>res{};</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>std::array&lt;size_t,<sp/>size&gt;<sp/>voigtFixedIndices;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>std::ranges::transform(fixed,<sp/>voigtFixedIndices.begin(),<sp/>[](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pair)<sp/>{<sp/>return<sp/>toVoigt(pair.row,<sp/>pair.col);<sp/>});</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>std::ranges::sort(voigtFixedIndices);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>std::ranges::set_difference(std::ranges::iota_view(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">(0),<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">(6)),<sp/>voigtFixedIndices,<sp/>res.begin());</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>std::ranges::sort(res);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="48"><highlight class="normal">}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size&gt;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">consteval</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>createFixedVoigtIndices(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::array&lt;MatrixIndexPair,<sp/>size&gt;&amp;<sp/>fixed)<sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>std::array&lt;size_t,<sp/>size&gt;<sp/>fixedIndices;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>std::ranges::transform(fixed,<sp/>fixedIndices.begin(),<sp/>[](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pair)<sp/>{<sp/>return<sp/>toVoigt(pair.row,<sp/>pair.col);<sp/>});</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>std::ranges::sort(fixedIndices);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fixedIndices;</highlight></codeline>
<codeline lineno="62"><highlight class="normal">}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size&gt;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>countDiagonalIndices(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::array&lt;MatrixIndexPair,<sp/>size&gt;&amp;<sp/>fixed)<sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>v<sp/>:<sp/>fixed)<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v.col<sp/>==<sp/>v.row)</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++count;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>count;</highlight></codeline>
<codeline lineno="78"><highlight class="normal">}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Derived&gt;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">)<sp/>maybeFromVoigt(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::MatrixBase&lt;Derived&gt;&amp;<sp/>E)<sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(Concepts::EigenVector&lt;Derived&gt;)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>receiving<sp/>vector<sp/>means<sp/>Voigt<sp/>notation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="a00407_1gadc8e9e9f3838d0392a5fcf1e11374ee9" kindref="member">fromVoigt</ref>(E.derived(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>E.derived();</highlight></codeline>
<codeline lineno="92"><highlight class="normal">}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ScalarType&gt;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>checkPositiveOrAbort(ScalarType<sp/>det)<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Dune::FloatCmp::le(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(det),<sp/>0.0,<sp/>1e-10))<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Determinant<sp/>of<sp/>right<sp/>Cauchy<sp/>Green<sp/>tensor<sp/>C<sp/>must<sp/>be<sp/>greater<sp/>than<sp/>zero.<sp/>detC<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::to_string(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(det));</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>abort();</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ScalarType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Derived&gt;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>principalStretches(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::MatrixBase&lt;Derived&gt;&amp;<sp/>C,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>options<sp/>=<sp/>Eigen::ComputeEigenvectors)<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>Eigen::SelfAdjointEigenSolver&lt;Derived&gt;<sp/>eigensolver{};</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>eigensolver.compute(C,<sp/>options);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(eigensolver.info()<sp/>!=<sp/>Eigen::Success)</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>DUNE_THROW(Dune::MathError,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>compute<sp/>eigenvalues<sp/>and<sp/>eigenvectors<sp/>of<sp/>C.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>eigenvalues<sp/><sp/>=<sp/>eigensolver.eigenvalues();</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>eigenvectors<sp/>=<sp/>options<sp/>==<sp/>Eigen::ComputeEigenvectors<sp/>?<sp/>eigensolver.eigenvectors()<sp/>:<sp/>Derived::Zero();</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>principalStretches<sp/>=<sp/>eigenvalues.cwiseSqrt().eval();</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_pair(principalStretches,<sp/>eigenvectors);</highlight></codeline>
<codeline lineno="127"><highlight class="normal">}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;Concepts::EigenVector3<sp/>Vector&gt;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Vector::Scalar<sp/>determinantFromPrincipalValues(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&amp;<sp/>principalValues)<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>principalValues.prod();</highlight></codeline>
<codeline lineno="139"><highlight class="normal">}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;Concepts::EigenVector3<sp/>Vector&gt;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="a00411_1acfb09bb7db104db62d3d1d2dc3e009b2a57dea6f5039281b7fee517fc43bf3110" kindref="member">Vector</ref><sp/>deviatoricStretches(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&amp;<sp/>lambda)<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">ScalarType<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Vector::Scalar;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>ScalarType<sp/>J<sp/><sp/><sp/><sp/><sp/>=<sp/>determinantFromPrincipalValues(lambda);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>ScalarType<sp/>Jmod<sp/><sp/>=<sp/>pow(J,<sp/>-1.0<sp/>/<sp/>3.0);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Jmod<sp/>*<sp/>lambda;</highlight></codeline>
<codeline lineno="155"><highlight class="normal">}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;Concepts::EigenVector3<sp/>Vector&gt;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="a00411_1acfb09bb7db104db62d3d1d2dc3e009b2a57dea6f5039281b7fee517fc43bf3110" kindref="member">Vector</ref><sp/>invariants(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&amp;<sp/>lambda)<sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">ScalarType<sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Vector::Scalar;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lambdaSquared<sp/>=<sp/>lambda.array().square();</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>invariants<sp/><sp/><sp/><sp/>=<sp/>Vector::Zero().eval();</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>invariants[0]<sp/>=<sp/>lambdaSquared.sum();</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>invariants[1]<sp/>=</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lambdaSquared[0]<sp/>*<sp/>lambdaSquared[1]<sp/>+<sp/>lambdaSquared[1]<sp/>*<sp/>lambdaSquared[2]<sp/>+<sp/>lambdaSquared[0]<sp/>*<sp/>lambdaSquared[2];</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>invariants[2]<sp/>=<sp/>determinantFromPrincipalValues(lambdaSquared);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>invariants;</highlight></codeline>
<codeline lineno="176"><highlight class="normal">}</highlight></codeline>
<codeline lineno="177"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Ikarus::Materials::Impl</highlight></codeline>
    </programlisting>
    <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/materials/materialhelpers.hh"/>
  </compounddef>
</doxygen>
