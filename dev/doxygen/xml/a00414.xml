<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="a00414" kind="namespace" language="C++">
    <compoundname>Ikarus::Python</compoundname>
    <innerclass refid="a01747" prot="public">Ikarus::Python::SparseMatrixWrapper</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="a00388_1ga87d3c6e620be5df59ba6923751caae86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Assembler</type>
          </param>
          <param>
            <type>class...</type>
            <declname>options</declname>
            <defname>options</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Ikarus::Python::registerFlatAssembler</definition>
        <argsstring>(pybind11::handle scope, pybind11::class_&lt; Assembler, options... &gt; cls)</argsstring>
        <name>registerFlatAssembler</name>
        <qualifiedname>Ikarus::Python::registerFlatAssembler</qualifiedname>
        <param>
          <type>pybind11::handle</type>
          <declname>scope</declname>
        </param>
        <param>
          <type>pybind11::class_&lt; Assembler, options... &gt;</type>
          <declname>cls</declname>
        </param>
        <briefdescription>
<para>Register <ref refid="a00414" kindref="compound">Python</ref> bindings for a assembler class. <linebreak/>
. </para>
        </briefdescription>
        <detaileddescription>
<para>The registered class will have an initializer that takes a list of finite elements (<computeroutput>fes</computeroutput>) and a <computeroutput>DirichletValuesType</computeroutput> object. <linebreak/>
 It exposes several member functions to <ref refid="a00414" kindref="compound">Python</ref>: <linebreak/>
 <itemizedlist>
<listitem>
<para><computeroutput>matrix(req)</computeroutput>: Returns a dense matrix based on the specified <computeroutput>FERequirementType</computeroutput>. <linebreak/>
 </para>
</listitem>
<listitem>
<para><computeroutput>vector(req,affordance,dbcOption)</computeroutput>: Returns a vector based on the specified <computeroutput>FERequirementType</computeroutput>. <linebreak/>
 </para>
</listitem>
<listitem>
<para><computeroutput>scalar(req,affordance)</computeroutput>: Returns a scalar based on the specified <computeroutput>FERequirementType</computeroutput>. <linebreak/>
 </para>
</listitem>
<listitem>
<para><computeroutput>createFullVector(redVec)</computeroutput>: Creates a full vector from a reduced vector. <linebreak/>
 </para>
</listitem>
<listitem>
<para><computeroutput>reducedSize()</computeroutput>: Returns the size of the reduced space. <linebreak/>
</para>
</listitem>
</itemizedlist>
<linebreak/>
 <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Assembler</parametername>
</parameternamelist>
<parameterdescription>
<para>The assembler class to be registered. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>Variadic template parameters for additional options when defining the <ref refid="a00414" kindref="compound">Python</ref> class. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para>A Pybind11 handle representing the <ref refid="a00414" kindref="compound">Python</ref> scope where the class should be registered. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cls</parametername>
</parameternamelist>
<parameterdescription>
<para>The Pybind11 class template to be used for registering the assembler class. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/python/assembler/flatassembler.hh" line="41" column="6" bodyfile="/__w/ikarus/ikarus/repo/ikarus/python/assembler/flatassembler.hh" bodystart="41" bodyend="124"/>
        <referencedby refid="a00414_1aad35f78683b64303a28d3b8b4f83aa37" compoundref="a00209" startline="70" endline="111">registerAssemblerManipulator</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00414_1aeab1c5f959a22f95b40b0a7576f9c896" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Assembler</type>
          </param>
          <param>
            <type>class...</type>
            <declname>options</declname>
            <defname>options</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Ikarus::Python::registerSparseFlatAssembler</definition>
        <argsstring>(pybind11::handle scope, pybind11::class_&lt; Assembler, options... &gt; cls)</argsstring>
        <name>registerSparseFlatAssembler</name>
        <qualifiedname>Ikarus::Python::registerSparseFlatAssembler</qualifiedname>
        <param>
          <type>pybind11::handle</type>
          <declname>scope</declname>
        </param>
        <param>
          <type>pybind11::class_&lt; Assembler, options... &gt;</type>
          <declname>cls</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/python/assembler/flatassembler.hh" line="132" column="22" bodyfile="/__w/ikarus/ikarus/repo/ikarus/python/assembler/flatassembler.hh" bodystart="132" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="a00414_1a2b0faffde20690631657489c79ec809b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Assembler</type>
          </param>
          <param>
            <type>class...</type>
            <declname>options</declname>
            <defname>options</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Ikarus::Python::registerDenseFlatAssembler</definition>
        <argsstring>(pybind11::handle scope, pybind11::class_&lt; Assembler, options... &gt; cls)</argsstring>
        <name>registerDenseFlatAssembler</name>
        <qualifiedname>Ikarus::Python::registerDenseFlatAssembler</qualifiedname>
        <param>
          <type>pybind11::handle</type>
          <declname>scope</declname>
        </param>
        <param>
          <type>pybind11::class_&lt; Assembler, options... &gt;</type>
          <declname>cls</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/python/assembler/flatassembler.hh" line="133" column="22" bodyfile="/__w/ikarus/ikarus/repo/ikarus/python/assembler/flatassembler.hh" bodystart="133" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="a00414_1a09b4a81e2d6d0619406854f6dc3fc8f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Ikarus::Python::registerSparseMatrixWrapper</definition>
        <argsstring>(pybind11::handle scope)</argsstring>
        <name>registerSparseMatrixWrapper</name>
        <qualifiedname>Ikarus::Python::registerSparseMatrixWrapper</qualifiedname>
        <param>
          <type>pybind11::handle</type>
          <declname>scope</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/python/assembler/flatassemblermanipulator.hh" line="54" column="6" bodyfile="/__w/ikarus/ikarus/repo/ikarus/python/assembler/flatassemblermanipulator.hh" bodystart="54" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="a00414_1aad35f78683b64303a28d3b8b4f83aa37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class AssemblerManipulator</type>
          </param>
          <param>
            <type>class...</type>
            <declname>options</declname>
            <defname>options</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Ikarus::Python::registerAssemblerManipulator</definition>
        <argsstring>(pybind11::handle scope, pybind11::class_&lt; AssemblerManipulator, options... &gt; cls)</argsstring>
        <name>registerAssemblerManipulator</name>
        <qualifiedname>Ikarus::Python::registerAssemblerManipulator</qualifiedname>
        <param>
          <type>pybind11::handle</type>
          <declname>scope</declname>
        </param>
        <param>
          <type>pybind11::class_&lt; <ref refid="a01263" kindref="compound">AssemblerManipulator</ref>, options... &gt;</type>
          <declname>cls</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/python/assembler/flatassemblermanipulator.hh" line="70" column="6" bodyfile="/__w/ikarus/ikarus/repo/ikarus/python/assembler/flatassemblermanipulator.hh" bodystart="70" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="a00388_1ga2f6146bb687ad25cfb413fbcfd470788" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BasisHandler</type>
          </param>
          <param>
            <type>class...</type>
            <declname>options</declname>
            <defname>options</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Ikarus::Python::registerBasisHandler</definition>
        <argsstring>(pybind11::handle scope, pybind11::class_&lt; BasisHandler, options... &gt; cls)</argsstring>
        <name>registerBasisHandler</name>
        <qualifiedname>Ikarus::Python::registerBasisHandler</qualifiedname>
        <param>
          <type>pybind11::handle</type>
          <declname>scope</declname>
        </param>
        <param>
          <type>pybind11::class_&lt; <ref refid="a01827" kindref="compound">BasisHandler</ref>, options... &gt;</type>
          <declname>cls</declname>
        </param>
        <briefdescription>
<para>Register a <ref refid="a00414" kindref="compound">Python</ref> wrapper for an <ref refid="a00396" kindref="compound">Ikarus</ref> basis class. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername><ref refid="a01827" kindref="compound">BasisHandler</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="a00396" kindref="compound">Ikarus</ref> handler basis class to be registered. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>Variadic template parameters for additional options when defining the <ref refid="a00414" kindref="compound">Python</ref> class.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para>A Pybind11 handle representing the <ref refid="a00414" kindref="compound">Python</ref> scope where the class should be registered. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cls</parametername>
</parameternamelist>
<parameterdescription>
<para>The Pybind11 class template to be used for registering the <ref refid="a00396" kindref="compound">Ikarus</ref> basis handler class. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/python/basis/basis.hh" line="37" column="6" bodyfile="/__w/ikarus/ikarus/repo/ikarus/python/basis/basis.hh" bodystart="37" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="a00414_1a7f83fd37212b1411d1dbae8f7064882c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DirichletValues</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Ikarus::Python::forwardCorrectFunction</definition>
        <argsstring>(DirichletValues &amp;dirichletValues, const pybind11::function &amp;functor, auto &amp;&amp;cppFunction)</argsstring>
        <name>forwardCorrectFunction</name>
        <qualifiedname>Ikarus::Python::forwardCorrectFunction</qualifiedname>
        <param>
          <type><ref refid="a01883" kindref="compound">DirichletValues</ref> &amp;</type>
          <declname>dirichletValues</declname>
        </param>
        <param>
          <type>const pybind11::function &amp;</type>
          <declname>functor</declname>
        </param>
        <param>
          <type>auto &amp;&amp;</type>
          <declname>cppFunction</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/python/dirichletvalues/dirichletvalues.hh" line="67" column="6" bodyfile="/__w/ikarus/ikarus/repo/ikarus/python/dirichletvalues/dirichletvalues.hh" bodystart="67" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="a00388_1ga39b6df6adfe4858b13ac71f5830f29f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DirichletValues</type>
          </param>
          <param>
            <type>class...</type>
            <declname>options</declname>
            <defname>options</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Ikarus::Python::registerDirichletValues</definition>
        <argsstring>(pybind11::handle scope, pybind11::class_&lt; DirichletValues, options... &gt; cls)</argsstring>
        <name>registerDirichletValues</name>
        <qualifiedname>Ikarus::Python::registerDirichletValues</qualifiedname>
        <param>
          <type>pybind11::handle</type>
          <declname>scope</declname>
        </param>
        <param>
          <type>pybind11::class_&lt; <ref refid="a01883" kindref="compound">DirichletValues</ref>, options... &gt;</type>
          <declname>cls</declname>
        </param>
        <briefdescription>
<para>Register <ref refid="a00414" kindref="compound">Python</ref> bindings for a <ref refid="a01883" kindref="compound">DirichletValues</ref> class. </para>
        </briefdescription>
        <detaileddescription>
<para>This function registers <ref refid="a00414" kindref="compound">Python</ref> bindings for a <ref refid="a01883" kindref="compound">DirichletValues</ref> class, allowing it to be used in <ref refid="a00414" kindref="compound">Python</ref> scripts. The registered class will have an initializer that takes a <computeroutput>Basis</computeroutput> object. It exposes several member functions to <ref refid="a00414" kindref="compound">Python</ref>:<itemizedlist>
<listitem><para><computeroutput>fixBoundaryDOFs(f)</computeroutput>: Fixes boundary degrees of freedom using a user-defined function <computeroutput>f</computeroutput> than can be called with the following arguments:<itemizedlist>
<listitem><para>with the boolean vector and the global index.</para>
</listitem><listitem><para>with the boolean vector, the local index and the <computeroutput>LocalView</computeroutput>.</para>
</listitem><listitem><para>with the boolean vector, the local index, the <computeroutput>LocalView</computeroutput> and the <computeroutput>Intersection</computeroutput>.</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><computeroutput>fixDOFs(f)</computeroutput>: Fixes boundary degrees of freedom using a user-defined function <computeroutput>f</computeroutput> with the basis and the boolean vector as arguments.</para>
</listitem><listitem><para><computeroutput>setSingleDOF(i, flag: bool): Fixes or unfixes DOF with index i -</computeroutput>isConstrained(i)<computeroutput>: Checks whether index i is constrained -</computeroutput>reset()`: Resets the whole container</para>
</listitem></itemizedlist>
</para>
<para>The following properties can be accessed:<itemizedlist>
<listitem><para><computeroutput>container</computeroutput>: the underlying container of dirichlet flags (as a const reference)</para>
</listitem><listitem><para><computeroutput>size</computeroutput>: the size of the underlying basis</para>
</listitem><listitem><para><computeroutput>fixedDOFsize</computeroutput>: the amount of DOFs currently fixed</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername><ref refid="a01883" kindref="compound">DirichletValues</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="a01883" kindref="compound">DirichletValues</ref> class to be registered. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>Variadic template parameters for additional options when defining the <ref refid="a00414" kindref="compound">Python</ref> class.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para>A Pybind11 handle representing the <ref refid="a00414" kindref="compound">Python</ref> scope where the class should be registered. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cls</parametername>
</parameternamelist>
<parameterdescription>
<para>The Pybind11 class template to be used for registering the <ref refid="a01883" kindref="compound">DirichletValues</ref> class. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/python/dirichletvalues/dirichletvalues.hh" line="147" column="6" bodyfile="/__w/ikarus/ikarus/repo/ikarus/python/dirichletvalues/dirichletvalues.hh" bodystart="147" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="a00414_1a0c58c17676c73945cb11eff8a80309ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FE</type>
          </param>
          <param>
            <type>class...</type>
            <declname>options</declname>
            <defname>options</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Ikarus::Python::registerCalculateAt</definition>
        <argsstring>(pybind11::handle scope, pybind11::class_&lt; FE, options... &gt; cls, auto resultTypesTuple)</argsstring>
        <name>registerCalculateAt</name>
        <qualifiedname>Ikarus::Python::registerCalculateAt</qualifiedname>
        <param>
          <type>pybind11::handle</type>
          <declname>scope</declname>
        </param>
        <param>
          <type>pybind11::class_&lt; <ref refid="a01355" kindref="compound">FE</ref>, options... &gt;</type>
          <declname>cls</declname>
        </param>
        <param>
          <type>auto</type>
          <declname>resultTypesTuple</declname>
        </param>
        <briefdescription>
<para>Registers the calculateAt method for a finite element class in <ref refid="a00414" kindref="compound">Python</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is used to expose the calculateAt method of a finite element class to <ref refid="a00414" kindref="compound">Python</ref> using Pybind11.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername><ref refid="a01355" kindref="compound">FE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The finite element class type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>Variadic template parameters for additional options when defining the <ref refid="a00414" kindref="compound">Python</ref> class. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para>The Pybind11 handle to the <ref refid="a00414" kindref="compound">Python</ref> module or class where the method will be registered. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cls</parametername>
</parameternamelist>
<parameterdescription>
<para>The Pybind11 class wrapper for the finite element class. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>restultTypesTuple</parametername>
</parameternamelist>
<parameterdescription>
<para>A tuple containing the result types to be supported by the calculateAt method.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
The calculateAt method is exposed to <ref refid="a00414" kindref="compound">Python</ref>, allowing users to compute element values at a specific location.</para>
<para>Example usage in <ref refid="a00414" kindref="compound">Python</ref>: <programlisting filename=".py"><codeline><highlight class="normal">fe_instance<sp/>=<sp/>MyFiniteElementClass()</highlight></codeline>
<codeline><highlight class="normal">result<sp/>=<sp/>fe_instance.calculateAt(feRequirements,<sp/>local,<sp/></highlight><highlight class="stringliteral">&quot;linearStress&quot;</highlight><highlight class="normal">)</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>feRequirements</parametername>
</parameternamelist>
<parameterdescription>
<para>The requirements for the finite element calculation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>local</parametername>
</parameternamelist>
<parameterdescription>
<para>The local coordinates where the calculation is performed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resultType</parametername>
</parameternamelist>
<parameterdescription>
<para>A string specifying the desired result type for the calculation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The calculated result as a EigenType but NumPy array.</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>Dune::NotImplemented</parametername>
</parameternamelist>
<parameterdescription>
<para>If the specified resultType is not supported by the finite element. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/python/finiteelements/fe.hh" line="51" column="6" bodyfile="/__w/ikarus/ikarus/repo/ikarus/python/finiteelements/fe.hh" bodystart="51" bodyend="71"/>
        <referencedby refid="a00388_1gac8bb4a818dee7342efbc5e174e35b840" compoundref="a00221" startline="87" endline="147">registerFE</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00388_1gac8bb4a818dee7342efbc5e174e35b840" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FE</type>
          </param>
          <param>
            <type>class...</type>
            <declname>options</declname>
            <defname>options</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Ikarus::Python::registerFE</definition>
        <argsstring>(pybind11::handle scope, pybind11::class_&lt; FE, options... &gt; cls)</argsstring>
        <name>registerFE</name>
        <qualifiedname>Ikarus::Python::registerFE</qualifiedname>
        <param>
          <type>pybind11::handle</type>
          <declname>scope</declname>
        </param>
        <param>
          <type>pybind11::class_&lt; <ref refid="a01355" kindref="compound">FE</ref>, options... &gt;</type>
          <declname>cls</declname>
        </param>
        <briefdescription>
<para>Register <ref refid="a00414" kindref="compound">Python</ref> bindings for the <ref refid="a01355" kindref="compound">FE</ref> class. </para>
        </briefdescription>
        <detaileddescription>
<para>This function registers <ref refid="a00414" kindref="compound">Python</ref> bindings for a <ref refid="a01355" kindref="compound">FE</ref> class, allowing it to be used in <ref refid="a00414" kindref="compound">Python</ref> scripts.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername><ref refid="a01355" kindref="compound">FE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="a01355" kindref="compound">FE</ref> class to be registered. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>Variadic template parameters for additional options when defining the <ref refid="a00414" kindref="compound">Python</ref> class.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para>A Pybind11 handle representing the <ref refid="a00414" kindref="compound">Python</ref> scope where the class should be registered. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cls</parametername>
</parameternamelist>
<parameterdescription>
<para>The Pybind11 class template to be used for registering the <ref refid="a01471" kindref="compound">KirchhoffLoveShell</ref> class. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/python/finiteelements/fe.hh" line="87" column="6" bodyfile="/__w/ikarus/ikarus/repo/ikarus/python/finiteelements/fe.hh" bodystart="87" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="a00414_1a3a4831265d4a775b43c50c25242a2910" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Material</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>vecSize</declname>
            <defname>vecSize</defname>
          </param>
          <param>
            <type>class...</type>
            <declname>options</declname>
            <defname>options</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Ikarus::Python::registerMaterial</definition>
        <argsstring>(pybind11::handle scope, pybind11::class_&lt; Material, options... &gt; cls)</argsstring>
        <name>registerMaterial</name>
        <qualifiedname>Ikarus::Python::registerMaterial</qualifiedname>
        <param>
          <type>pybind11::handle</type>
          <declname>scope</declname>
        </param>
        <param>
          <type>pybind11::class_&lt; Material, options... &gt;</type>
          <declname>cls</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/python/finiteelements/material.hh" line="107" column="6" bodyfile="/__w/ikarus/ikarus/repo/ikarus/python/finiteelements/material.hh" bodystart="107" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="a00414_1ac81cd08ca4f7222df18c123d422c932d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Ikarus::Python::MAKE_MATERIAL_REGISTRY_FUNCTION</definition>
        <argsstring>(LinearElasticity, 6)</argsstring>
        <name>MAKE_MATERIAL_REGISTRY_FUNCTION</name>
        <qualifiedname>Ikarus::Python::MAKE_MATERIAL_REGISTRY_FUNCTION</qualifiedname>
        <param>
          <type>LinearElasticity</type>
        </param>
        <param>
          <type>6</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/python/finiteelements/material.hh" line="211" column="1" declfile="/__w/ikarus/ikarus/repo/ikarus/python/finiteelements/material.hh" declline="211" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="a00414_1aab3a7ce35fb7a2f4a8a9e4d6a92e1f31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Ikarus::Python::MAKE_MATERIAL_REGISTRY_FUNCTION</definition>
        <argsstring>(StVenantKirchhoff, 6)</argsstring>
        <name>MAKE_MATERIAL_REGISTRY_FUNCTION</name>
        <qualifiedname>Ikarus::Python::MAKE_MATERIAL_REGISTRY_FUNCTION</qualifiedname>
        <param>
          <type>StVenantKirchhoff</type>
        </param>
        <param>
          <type>6</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/python/finiteelements/material.hh" line="212" column="1" declfile="/__w/ikarus/ikarus/repo/ikarus/python/finiteelements/material.hh" declline="212" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="a00414_1a85c1412e5300ac194ff82ebd146c6229" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Ikarus::Python::MAKE_MATERIAL_REGISTRY_FUNCTION</definition>
        <argsstring>(NeoHooke, 6)</argsstring>
        <name>MAKE_MATERIAL_REGISTRY_FUNCTION</name>
        <qualifiedname>Ikarus::Python::MAKE_MATERIAL_REGISTRY_FUNCTION</qualifiedname>
        <param>
          <type>NeoHooke</type>
        </param>
        <param>
          <type>6</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/python/finiteelements/material.hh" line="213" column="1" declfile="/__w/ikarus/ikarus/repo/ikarus/python/finiteelements/material.hh" declline="213" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="a00414_1a32c3989a8ef1dbc581313ef17a0c6f5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FE</type>
          </param>
          <param>
            <type>class...</type>
            <declname>options</declname>
            <defname>options</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Ikarus::Python::registerFERequirement</definition>
        <argsstring>(pybind11::handle scope, pybind11::class_&lt; FE, options... &gt; cls)</argsstring>
        <name>registerFERequirement</name>
        <qualifiedname>Ikarus::Python::registerFERequirement</qualifiedname>
        <param>
          <type>pybind11::handle</type>
          <declname>scope</declname>
        </param>
        <param>
          <type>pybind11::class_&lt; <ref refid="a01355" kindref="compound">FE</ref>, options... &gt;</type>
          <declname>cls</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/python/finiteelements/registerferequirements.hh" line="14" column="6" bodyfile="/__w/ikarus/ikarus/repo/ikarus/python/finiteelements/registerferequirements.hh" bodystart="14" bodyend="48"/>
        <referencedby refid="a00388_1gac8bb4a818dee7342efbc5e174e35b840" compoundref="a00221" startline="87" endline="147">registerFE</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00414_1ab45b29a3ca18f1c8bf87263c60d14711" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class NonLinearElasticPre</type>
          </param>
          <param>
            <type>class...</type>
            <declname>options</declname>
            <defname>options</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Ikarus::Python::registerNonLinearElasticPre</definition>
        <argsstring>(pybind11::handle scope, pybind11::class_&lt; NonLinearElasticPre, options... &gt; cls)</argsstring>
        <name>registerNonLinearElasticPre</name>
        <qualifiedname>Ikarus::Python::registerNonLinearElasticPre</qualifiedname>
        <param>
          <type>pybind11::handle</type>
          <declname>scope</declname>
        </param>
        <param>
          <type>pybind11::class_&lt; <ref refid="a01611" kindref="compound">NonLinearElasticPre</ref>, options... &gt;</type>
          <declname>cls</declname>
        </param>
        <briefdescription>
<para>Registers a <ref refid="a01611" kindref="compound">NonLinearElasticPre</ref> class in <ref refid="a00414" kindref="compound">Python</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername><ref refid="a01611" kindref="compound">NonLinearElasticPre</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="a01611" kindref="compound">NonLinearElasticPre</ref> class. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>Additional options for the pybind11 class.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="a00414" kindref="compound">Python</ref> handle to the module or class scope. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cls</parametername>
</parameternamelist>
<parameterdescription>
<para>The pybind11 class to register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/python/finiteelements/registerpreelement.hh" line="20" column="6" bodyfile="/__w/ikarus/ikarus/repo/ikarus/python/finiteelements/registerpreelement.hh" bodystart="20" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="a00414_1a04d0c82e615a65a1ba027cb77bbf784d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class LinearElasticPre</type>
          </param>
          <param>
            <type>class...</type>
            <declname>options</declname>
            <defname>options</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Ikarus::Python::registerLinearElasticPre</definition>
        <argsstring>(pybind11::handle scope, pybind11::class_&lt; LinearElasticPre, options... &gt; cls)</argsstring>
        <name>registerLinearElasticPre</name>
        <qualifiedname>Ikarus::Python::registerLinearElasticPre</qualifiedname>
        <param>
          <type>pybind11::handle</type>
          <declname>scope</declname>
        </param>
        <param>
          <type>pybind11::class_&lt; <ref refid="a01491" kindref="compound">LinearElasticPre</ref>, options... &gt;</type>
          <declname>cls</declname>
        </param>
        <briefdescription>
<para>Registers a <ref refid="a01491" kindref="compound">LinearElasticPre</ref> class in <ref refid="a00414" kindref="compound">Python</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername><ref refid="a01491" kindref="compound">LinearElasticPre</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="a01491" kindref="compound">LinearElasticPre</ref> class. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>Additional options for the pybind11 class.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="a00414" kindref="compound">Python</ref> handle to the module or class scope. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cls</parametername>
</parameternamelist>
<parameterdescription>
<para>The pybind11 class to register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/python/finiteelements/registerpreelement.hh" line="35" column="6" bodyfile="/__w/ikarus/ikarus/repo/ikarus/python/finiteelements/registerpreelement.hh" bodystart="35" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="a00414_1a5004d72f594d4ceecaebb33ee71f80cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class TrussPre</type>
          </param>
          <param>
            <type>class...</type>
            <declname>options</declname>
            <defname>options</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Ikarus::Python::registerTrussPre</definition>
        <argsstring>(pybind11::handle scope, pybind11::class_&lt; TrussPre, options... &gt; cls)</argsstring>
        <name>registerTrussPre</name>
        <qualifiedname>Ikarus::Python::registerTrussPre</qualifiedname>
        <param>
          <type>pybind11::handle</type>
          <declname>scope</declname>
        </param>
        <param>
          <type>pybind11::class_&lt; <ref refid="a01619" kindref="compound">TrussPre</ref>, options... &gt;</type>
          <declname>cls</declname>
        </param>
        <briefdescription>
<para>Registers a <ref refid="a01619" kindref="compound">TrussPre</ref> class in <ref refid="a00414" kindref="compound">Python</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername><ref refid="a01619" kindref="compound">TrussPre</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="a01619" kindref="compound">TrussPre</ref> class. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>Additional options for the pybind11 class.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="a00414" kindref="compound">Python</ref> handle to the module or class scope. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cls</parametername>
</parameternamelist>
<parameterdescription>
<para>The pybind11 class to register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/python/finiteelements/registerpreelement.hh" line="50" column="6" bodyfile="/__w/ikarus/ikarus/repo/ikarus/python/finiteelements/registerpreelement.hh" bodystart="50" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="a00414_1a0ef1ab14030985bd8af2551f51ceeeb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class KirchhoffLoveShellPre</type>
          </param>
          <param>
            <type>class...</type>
            <declname>options</declname>
            <defname>options</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Ikarus::Python::registerKirchhoffLoveShellPre</definition>
        <argsstring>(pybind11::handle scope, pybind11::class_&lt; KirchhoffLoveShellPre, options... &gt; cls)</argsstring>
        <name>registerKirchhoffLoveShellPre</name>
        <qualifiedname>Ikarus::Python::registerKirchhoffLoveShellPre</qualifiedname>
        <param>
          <type>pybind11::handle</type>
          <declname>scope</declname>
        </param>
        <param>
          <type>pybind11::class_&lt; <ref refid="a01475" kindref="compound">KirchhoffLoveShellPre</ref>, options... &gt;</type>
          <declname>cls</declname>
        </param>
        <briefdescription>
<para>Registers a <ref refid="a01475" kindref="compound">KirchhoffLoveShellPre</ref> class in <ref refid="a00414" kindref="compound">Python</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername><ref refid="a01475" kindref="compound">KirchhoffLoveShellPre</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="a01475" kindref="compound">KirchhoffLoveShellPre</ref> class. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>Additional options for the pybind11 class.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="a00414" kindref="compound">Python</ref> handle to the module or class scope. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cls</parametername>
</parameternamelist>
<parameterdescription>
<para>The pybind11 class to register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/python/finiteelements/registerpreelement.hh" line="64" column="6" bodyfile="/__w/ikarus/ikarus/repo/ikarus/python/finiteelements/registerpreelement.hh" bodystart="64" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="a00414_1a79dfab8379c15a5c5da0d3e5a415f0a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class EASPre</type>
          </param>
          <param>
            <type>class...</type>
            <declname>options</declname>
            <defname>options</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Ikarus::Python::registerEnhancedAssumedStrainsPre</definition>
        <argsstring>(pybind11::handle scope, pybind11::class_&lt; EASPre, options... &gt; cls)</argsstring>
        <name>registerEnhancedAssumedStrainsPre</name>
        <qualifiedname>Ikarus::Python::registerEnhancedAssumedStrainsPre</qualifiedname>
        <param>
          <type>pybind11::handle</type>
          <declname>scope</declname>
        </param>
        <param>
          <type>pybind11::class_&lt; EASPre, options... &gt;</type>
          <declname>cls</declname>
        </param>
        <briefdescription>
<para>Registers an <ref refid="a01467" kindref="compound">EnhancedAssumedStrainsPre</ref> class in <ref refid="a00414" kindref="compound">Python</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>EASPre</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="a01467" kindref="compound">EnhancedAssumedStrainsPre</ref> class. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>Additional options for the pybind11 class.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="a00414" kindref="compound">Python</ref> handle to the module or class scope. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cls</parametername>
</parameternamelist>
<parameterdescription>
<para>The pybind11 class to register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/python/finiteelements/registerpreelement.hh" line="79" column="6" bodyfile="/__w/ikarus/ikarus/repo/ikarus/python/finiteelements/registerpreelement.hh" bodystart="79" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="a00414_1a813121e686b5d64d6ef1e11bd4bfc59b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class NeumannBoundaryLoadPre</type>
          </param>
          <param>
            <type>class...</type>
            <declname>options</declname>
            <defname>options</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Ikarus::Python::registerNeumannBoundaryLoadPre</definition>
        <argsstring>(pybind11::handle scope, pybind11::class_&lt; NeumannBoundaryLoadPre, options... &gt; cls)</argsstring>
        <name>registerNeumannBoundaryLoadPre</name>
        <qualifiedname>Ikarus::Python::registerNeumannBoundaryLoadPre</qualifiedname>
        <param>
          <type>pybind11::handle</type>
          <declname>scope</declname>
        </param>
        <param>
          <type>pybind11::class_&lt; <ref refid="a01499" kindref="compound">NeumannBoundaryLoadPre</ref>, options... &gt;</type>
          <declname>cls</declname>
        </param>
        <briefdescription>
<para>Registers a <ref refid="a01499" kindref="compound">NeumannBoundaryLoadPre</ref> class in <ref refid="a00414" kindref="compound">Python</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername><ref refid="a01499" kindref="compound">NeumannBoundaryLoadPre</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="a01499" kindref="compound">NeumannBoundaryLoadPre</ref> class. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>Additional options for the pybind11 class.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="a00414" kindref="compound">Python</ref> handle to the module or class scope. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cls</parametername>
</parameternamelist>
<parameterdescription>
<para>The pybind11 class to register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/python/finiteelements/registerpreelement.hh" line="93" column="6" bodyfile="/__w/ikarus/ikarus/repo/ikarus/python/finiteelements/registerpreelement.hh" bodystart="93" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="a00414_1a1f597ae7aac82dc24a8a2669f86fc12b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class VolumeLoadPre</type>
          </param>
          <param>
            <type>class...</type>
            <declname>options</declname>
            <defname>options</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Ikarus::Python::registerVolumeLoadPre</definition>
        <argsstring>(pybind11::handle scope, pybind11::class_&lt; VolumeLoadPre, options... &gt; cls)</argsstring>
        <name>registerVolumeLoadPre</name>
        <qualifiedname>Ikarus::Python::registerVolumeLoadPre</qualifiedname>
        <param>
          <type>pybind11::handle</type>
          <declname>scope</declname>
        </param>
        <param>
          <type>pybind11::class_&lt; <ref refid="a01507" kindref="compound">VolumeLoadPre</ref>, options... &gt;</type>
          <declname>cls</declname>
        </param>
        <briefdescription>
<para>Registers a <ref refid="a01507" kindref="compound">VolumeLoadPre</ref> class in <ref refid="a00414" kindref="compound">Python</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername><ref refid="a01507" kindref="compound">VolumeLoadPre</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="a01507" kindref="compound">VolumeLoadPre</ref> class. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>Additional options for the pybind11 class.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="a00414" kindref="compound">Python</ref> handle to the module or class scope. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cls</parametername>
</parameternamelist>
<parameterdescription>
<para>The pybind11 class to register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/python/finiteelements/registerpreelement.hh" line="115" column="6" bodyfile="/__w/ikarus/ikarus/repo/ikarus/python/finiteelements/registerpreelement.hh" bodystart="115" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="a00388_1ga9f62f91fc33b1f9e17756c2ac7b30077" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Writer</type>
          </param>
          <param>
            <type>class...</type>
            <declname>options</declname>
            <defname>options</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Ikarus::Python::registerVtkWriter</definition>
        <argsstring>(pybind11::handle scope, pybind11::class_&lt; Writer, options... &gt; cls)</argsstring>
        <name>registerVtkWriter</name>
        <qualifiedname>Ikarus::Python::registerVtkWriter</qualifiedname>
        <param>
          <type>pybind11::handle</type>
          <declname>scope</declname>
        </param>
        <param>
          <type>pybind11::class_&lt; Writer, options... &gt;</type>
          <declname>cls</declname>
        </param>
        <briefdescription>
<para>Register <ref refid="a00414" kindref="compound">Python</ref> bindings for a VtkWriter class. <linebreak/>
. </para>
        </briefdescription>
        <detaileddescription>
<para>The registered VtkWriter class provides functionalities for writing VTK files from assembled data. This class supports adding result data as cell or point data and configuring VTK output formats.</para>
<para>This function registers the following methods for the VtkWriter class:<itemizedlist>
<listitem><para><computeroutput>addAllResults(dataTag: DataTag)</computeroutput></para>
</listitem><listitem><para><computeroutput>addResult(resType: str, dataTag: ikarus.io.DataTag)</computeroutput></para>
</listitem><listitem><para><computeroutput>write(fileName)</computeroutput>, returns actual fileName</para>
</listitem><listitem><para><computeroutput>addInterpolation(writer, vals_::np.array, basis, name: str, dataTag: ikarus.io.DataTag)</computeroutput></para>
</listitem><listitem><para><computeroutput>addPointData()</computeroutput> (multiple overloads)</para>
</listitem><listitem><para><computeroutput>addCellData()</computeroutput> (multiple overloads)</para>
</listitem><listitem><para><computeroutput>setFormat(type: dune.vtk.FormatTypes)</computeroutput></para>
</listitem><listitem><para><computeroutput>setDatatype(type: dune.vtk.DataTypes)</computeroutput></para>
</listitem><listitem><para><computeroutput>setHeadertype(type: dune.vtk.DataTypes)</computeroutput></para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Writer</parametername>
</parameternamelist>
<parameterdescription>
<para>The writer class type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>Additional options for the writer class. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para>The scope in which to register the class. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cls</parametername>
</parameternamelist>
<parameterdescription>
<para>The class object to register the methods with. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/python/io/vtkwriter.hh" line="50" column="6" bodyfile="/__w/ikarus/ikarus/repo/ikarus/python/io/vtkwriter.hh" bodystart="50" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="a00414_1a331fd78be5a4155963abe5829282c8f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BoundaryPatch</type>
          </param>
          <param>
            <type>class...</type>
            <declname>options</declname>
            <defname>options</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Ikarus::Python::registerBoundaryPatch</definition>
        <argsstring>(pybind11::handle scope, pybind11::class_&lt; BoundaryPatch, options... &gt; cls)</argsstring>
        <name>registerBoundaryPatch</name>
        <qualifiedname>Ikarus::Python::registerBoundaryPatch</qualifiedname>
        <param>
          <type>pybind11::handle</type>
          <declname>scope</declname>
        </param>
        <param>
          <type>pybind11::class_&lt; BoundaryPatch, options... &gt;</type>
          <declname>cls</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/python/utils/boundarypatch.hh" line="16" column="6" bodyfile="/__w/ikarus/ikarus/repo/ikarus/python/utils/boundarypatch.hh" bodystart="16" bodyend="31"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/__w/ikarus/ikarus/repo/ikarus/python/assembler/flatassembler.hh" line="21" column="1"/>
  </compounddef>
</doxygen>
