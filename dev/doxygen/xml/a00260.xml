<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="a00260" kind="file" language="C++">
    <compoundname>deviatoricinvariants.hh</compoundname>
    <includes refid="a00275" local="no">ikarus/finiteelements/mechanics/materials/materialhelpers.hh</includes>
    <includes refid="a00233" local="no">ikarus/finiteelements/mechanics/materials/tags.hh</includes>
    <includes refid="a00032" local="no">ikarus/utils/tensorutils.hh</includes>
    <includedby refid="a00248" local="no">arrudaboyce.hh</includedby>
    <includedby refid="a00245" local="no">gent.hh</includedby>
    <includedby refid="a00254" local="no">invariantbased.hh</includedby>
    <incdepgraph>
      <node id="15">
        <label>ikarus/assembler/dirichletbcenforcement.hh</label>
        <link refid="a00347"/>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>deviatoricinvariants.hh</label>
        <link refid="a00260"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>ikarus/finiteelements/mechanics/materials/materialhelpers.hh</label>
        <link refid="a00275"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>ikarus/finiteelements/mechanics/materials/tags.hh</label>
        <link refid="a00233"/>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>ikarus/utils/concepts.hh</label>
        <link refid="a03101"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>ikarus/utils/makeenum.hh</label>
        <link refid="a00011"/>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>ikarus/utils/math.hh</label>
        <link refid="a00044"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>ikarus/utils/tensorutils.hh</label>
        <link refid="a00032"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>ikarus/utils/traits.hh</label>
        <link refid="a00068"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>Eigen/Dense</label>
      </node>
      <node id="13">
        <label>Eigen/Sparse</label>
      </node>
      <node id="14">
        <label>autodiff/forward/dual/dual.hpp</label>
      </node>
      <node id="7">
        <label>concepts</label>
      </node>
      <node id="17">
        <label>dune/common/exceptions.hh</label>
      </node>
      <node id="4">
        <label>dune/common/float_cmp.hh</label>
      </node>
      <node id="22">
        <label>dune/common/hybridutilities.hh</label>
      </node>
      <node id="26">
        <label>dune/common/promotiontraits.hh</label>
      </node>
      <node id="11">
        <label>dune/functions/functionspacebases/basistags.hh</label>
      </node>
      <node id="12">
        <label>dune/functions/functionspacebases/lagrangebasis.hh</label>
      </node>
      <node id="20">
        <label>functional</label>
      </node>
      <node id="24">
        <label>numeric</label>
      </node>
      <node id="3">
        <label>ranges</label>
      </node>
      <node id="21">
        <label>tuple</label>
      </node>
      <node id="8">
        <label>type_traits</label>
      </node>
      <node id="25">
        <label>unsupported/Eigen/CXX11/Tensor</label>
      </node>
      <node id="9">
        <label>utility</label>
      </node>
      <node id="10">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="5">
        <label>linearelastic.hh</label>
        <link refid="a00224"/>
      </node>
      <node id="4">
        <label>materials.hh</label>
        <link refid="a03059"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>arrudaboyce.hh</label>
        <link refid="a00248"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>deviatoricinvariants.hh</label>
        <link refid="a00260"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>gent.hh</label>
        <link refid="a00245"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>invariantbased.hh</label>
        <link refid="a00254"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>factory.hh</label>
        <link refid="a00266"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>resultevaluators.hh</label>
        <link refid="a00353"/>
      </node>
      <node id="6">
        <label>material.hh</label>
        <link refid="a00158"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>_ikarus.cc</label>
        <link refid="a00365"/>
      </node>
      <node id="7">
        <label>materials.hh</label>
        <link refid="a03062"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="a01538" prot="public">Ikarus::Materials::DeviatoricInvariants</innerclass>
    <innernamespace refid="a00411">Ikarus</innernamespace>
    <innernamespace refid="a00422">Ikarus::Materials</innernamespace>
    <briefdescription>
<para>Implementation of the computation of the deviatoric invariants and its derivatives. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>SPDX-FileCopyrightText:<sp/>2021-2025<sp/>The<sp/>Ikarus<sp/>Developers<sp/>mueller@ibb.uni-stuttgart.de</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPDX-License-Identifier:<sp/>LGPL-3.0-or-later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="a00275" kindref="compound">ikarus/finiteelements/mechanics/materials/materialhelpers.hh</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="a00233" kindref="compound">ikarus/finiteelements/mechanics/materials/tags.hh</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="a00032" kindref="compound">ikarus/utils/tensorutils.hh</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="a00422" kindref="compound">Ikarus::Materials</ref><sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>PS&gt;</highlight></codeline>
<codeline lineno="34" refid="a01538" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="a01538" kindref="compound">DeviatoricInvariants</ref></highlight></codeline>
<codeline lineno="35"><highlight class="normal">{</highlight></codeline>
<codeline lineno="36" refid="a01538_1a594b1e1baa67392c9a6ed38d0cec9656" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="a01538_1a594b1e1baa67392c9a6ed38d0cec9656" kindref="member">PrincipalStretches</ref><sp/>=<sp/>PS;</highlight></codeline>
<codeline lineno="37" refid="a01538_1aa49ae6eeb1a2d0b8135ae48c5a3eff05" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="a01538_1aa49ae6eeb1a2d0b8135ae48c5a3eff05" kindref="member">ScalarType</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>PrincipalStretches::value_type;</highlight></codeline>
<codeline lineno="38" refid="a01538_1a255955dbd34611bebcea229cd2bdc99c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="a01538_1a255955dbd34611bebcea229cd2bdc99c" kindref="member">dim</ref><sp/>=<sp/>PrincipalStretches::RowsAtCompileTime;</highlight></codeline>
<codeline lineno="39" refid="a01538_1aaf9d0408fc09fd6a079e4da57429babd" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="a01538_1aaf9d0408fc09fd6a079e4da57429babd" kindref="member">Invariants</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="a01538_1a594b1e1baa67392c9a6ed38d0cec9656" kindref="member">PrincipalStretches</ref>;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41" refid="a01538_1a917eb1c93dec4d24ac5c72ee53500f8a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="a01538_1a917eb1c93dec4d24ac5c72ee53500f8a" kindref="member">FirstDerivative</ref><sp/><sp/>=<sp/>Eigen::Vector&lt;ScalarType,<sp/>dim&gt;;</highlight></codeline>
<codeline lineno="42" refid="a01538_1a4f189b9d6a9e468c63d5095e0c037cde" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="a01538_1a4f189b9d6a9e468c63d5095e0c037cde" kindref="member">SecondDerivative</ref><sp/>=<sp/>Eigen::Matrix&lt;ScalarType,<sp/>dim,<sp/>dim&gt;;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="a01538_1a1e4087df2fd42f21f14f18e4d9d768fc" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="a01538_1a1e4087df2fd42f21f14f18e4d9d768fc" kindref="member">DeviatoricInvariants</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01538_1a594b1e1baa67392c9a6ed38d0cec9656" kindref="member">PrincipalStretches</ref>&amp;<sp/>lambda)</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>lambda_{lambda}<sp/>{}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="a01538_1a9c016a61bba2d581b57c0f373a7f822c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="a01538_1a9c016a61bba2d581b57c0f373a7f822c" kindref="member">value</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01538_1aaf9d0408fc09fd6a079e4da57429babd" kindref="member">Invariants</ref>&amp;<sp/>invariants<sp/>=<sp/>Impl::invariants(lambda_);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="a01538_1aa49ae6eeb1a2d0b8135ae48c5a3eff05" kindref="member">ScalarType</ref><sp/>W1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>invariants[0]<sp/>*<sp/>pow(invariants[2],<sp/>-1.0<sp/>/<sp/>3.0);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="a01538_1aa49ae6eeb1a2d0b8135ae48c5a3eff05" kindref="member">ScalarType</ref><sp/>W2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>invariants[1]<sp/>*<sp/>pow(invariants[2],<sp/>-2.0<sp/>/<sp/>3.0);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::array&lt;ScalarType,<sp/>2&gt;{W1,<sp/>W2};</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="65" refid="a01538_1a981e70dd52fc55dcd29e0bfe6507b214" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="a01538_1a981e70dd52fc55dcd29e0bfe6507b214" kindref="member">firstDerivative</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01538_1aaf9d0408fc09fd6a079e4da57429babd" kindref="member">Invariants</ref>&amp;<sp/>invariants<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>Impl::invariants(lambda_);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[I1,<sp/>I2,<sp/>I3,<sp/>I3Pow1by3,<sp/>I3Pow2by3]<sp/>=<sp/>computeInvariants(invariants);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="a01538_1a917eb1c93dec4d24ac5c72ee53500f8a" kindref="member">FirstDerivative</ref><sp/>dW1dLambda<sp/>=<sp/>2.0<sp/>*<sp/>(3.0<sp/>*<sp/>lambda_.cwisePow(2).array()<sp/>-<sp/>I1)<sp/>/<sp/>(3.0<sp/>*<sp/>lambda_.array()<sp/>*<sp/>I3Pow1by3);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="a01538_1a917eb1c93dec4d24ac5c72ee53500f8a" kindref="member">FirstDerivative</ref><sp/>dW2dLambda<sp/>=</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-2.0<sp/>*<sp/>(3.0<sp/>*<sp/>I3<sp/>*<sp/>lambda_.cwisePow(2).cwiseInverse().array()<sp/>-<sp/>I2)<sp/>/<sp/>(3.0<sp/>*<sp/>lambda_.array()<sp/>*<sp/>I3Pow2by3);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_pair(dW1dLambda,<sp/>dW2dLambda);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="79" refid="a01538_1abc7cc84b8755a39dc78821033998f666" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="a01538_1abc7cc84b8755a39dc78821033998f666" kindref="member">secondDerivative</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01538_1aaf9d0408fc09fd6a079e4da57429babd" kindref="member">Invariants</ref>&amp;<sp/>invariants<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>Impl::invariants(lambda_);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ddW1dLambda<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>SecondDerivative::Zero().eval();</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ddW2dLambda<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>SecondDerivative::Zero().eval();</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[I1,<sp/>I2,<sp/>I3,<sp/>I3Pow1by3,<sp/>I3Pow2by3]<sp/>=<sp/>computeInvariants(invariants);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lam<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>lambda_.array();</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>ddW1dLambda.diagonal()<sp/>=<sp/>(2.0<sp/>/<sp/>9.0)<sp/>*<sp/>(5<sp/>*<sp/>I1<sp/>-<sp/>3<sp/>*<sp/>lam.square())<sp/>/<sp/>(lam.square()<sp/>*<sp/>I3Pow1by3);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>ddW2dLambda.diagonal()<sp/>=<sp/>(2.0<sp/>/<sp/>9.0)<sp/>*<sp/>((15.0<sp/>*<sp/>I3<sp/>/<sp/>lam.square())<sp/>-<sp/>I2)<sp/>/<sp/>(lam.square()<sp/>*<sp/>I3Pow2by3);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>j<sp/>:<sp/>dimensionRange())<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>:<sp/>dimensionRange())</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>!=<sp/>j)<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ddW1dLambda(i,<sp/>j)<sp/>=<sp/>(4.0<sp/>/<sp/>9.0)<sp/>*<sp/>(I1<sp/>-<sp/>3<sp/>*<sp/>(pow(lambda_[i],<sp/>2.0)<sp/>+<sp/>pow(lambda_[j],<sp/>2.0)))<sp/>/</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(lambda_[i]<sp/>*<sp/>lambda_[j]<sp/>*<sp/>I3Pow1by3);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ddW2dLambda(i,<sp/>j)<sp/>=<sp/>(-4.0<sp/>/<sp/>9.0)<sp/>*<sp/>(2.0<sp/>*<sp/>I2<sp/>-<sp/>3<sp/>*<sp/>pow(lambda_[i],<sp/>2.0)<sp/>*<sp/>pow(lambda_[j],<sp/>2.0))<sp/>/</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(lambda_[i]<sp/>*<sp/>lambda_[j]<sp/>*<sp/>I3Pow2by3);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_pair(ddW1dLambda,<sp/>ddW2dLambda);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><ref refid="a01538_1a594b1e1baa67392c9a6ed38d0cec9656" kindref="member">PrincipalStretches</ref><sp/>lambda_;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dimensionRange()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Dune::range(<ref refid="a01538_1a255955dbd34611bebcea229cd2bdc99c" kindref="member">dim</ref>);<sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>computeInvariants(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01538_1aaf9d0408fc09fd6a079e4da57429babd" kindref="member">Invariants</ref>&amp;<sp/>invariants)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="a01538_1aa49ae6eeb1a2d0b8135ae48c5a3eff05" kindref="member">ScalarType</ref><sp/>I1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>invariants[0];</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="a01538_1aa49ae6eeb1a2d0b8135ae48c5a3eff05" kindref="member">ScalarType</ref><sp/>I2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>invariants[1];</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="a01538_1aa49ae6eeb1a2d0b8135ae48c5a3eff05" kindref="member">ScalarType</ref><sp/>I3<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>invariants[2];</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="a01538_1aa49ae6eeb1a2d0b8135ae48c5a3eff05" kindref="member">ScalarType</ref><sp/>I3Pow1by3<sp/>=<sp/>pow(I3,<sp/>1.0<sp/>/<sp/>3.0);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="a01538_1aa49ae6eeb1a2d0b8135ae48c5a3eff05" kindref="member">ScalarType</ref><sp/>I3Pow2by3<sp/>=<sp/>pow(I3,<sp/>2.0<sp/>/<sp/>3.0);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_tuple(I1,<sp/>I2,<sp/>I3,<sp/>I3Pow1by3,<sp/>I3Pow2by3);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal">};</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Ikarus::Materials</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/materials/hyperelastic/deviatoric/deviatoricinvariants.hh"/>
  </compounddef>
</doxygen>
