<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="a03086" kind="file" language="C++">
    <compoundname>python/dirichletvalues/dirichletvalues.hh</compoundname>
    <includes local="no">cstdlib</includes>
    <includes local="no">string</includes>
    <includes local="yes">dune/common/classname.hh</includes>
    <includes local="no">dune/functions/functionspacebases/lagrangebasis.hh</includes>
    <includes local="no">dune/functions/functionspacebases/powerbasis.hh</includes>
    <includes local="no">dune/grid/yaspgrid.hh</includes>
    <includes local="no">dune/python/common/typeregistry.hh</includes>
    <includes local="no">dune/python/functions/globalbasis.hh</includes>
    <includes local="no">dune/python/functions/subspacebasis.hh</includes>
    <includes local="no">dune/python/pybind11/eigen.h</includes>
    <includes local="no">dune/python/pybind11/functional.h</includes>
    <includes local="no">dune/python/pybind11/pybind11.h</includes>
    <includes local="no">dune/python/pybind11/stl.h</includes>
    <includes local="no">dune/python/pybind11/stl_bind.h</includes>
    <includes refid="a00197" local="no">ikarus/finiteelements/ferequirements.hh</includes>
    <incdepgraph>
      <node id="37">
        <label>ikarus/assembler/dirichletbcenforcement.hh</label>
        <link refid="a00347"/>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>ikarus/finiteelements/ferequirements.hh</label>
        <link refid="a00197"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>ikarus/finiteelements/feresulttypes.hh</label>
        <link refid="a00302"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>ikarus/finiteelements/mechanics/materials/tags.hh</label>
        <link refid="a00233"/>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>dirichletvalues.hh</label>
        <link refid="a03086"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>ikarus/utils/concepts.hh</label>
        <link refid="a03101"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>ikarus/utils/makeenum.hh</label>
        <link refid="a00011"/>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>ikarus/utils/math.hh</label>
        <link refid="a00044"/>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>ikarus/utils/tensorutils.hh</label>
        <link refid="a00032"/>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>ikarus/utils/traits.hh</label>
        <link refid="a00068"/>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>Eigen/Core</label>
      </node>
      <node id="34">
        <label>Eigen/Dense</label>
      </node>
      <node id="35">
        <label>Eigen/Sparse</label>
      </node>
      <node id="36">
        <label>autodiff/forward/dual/dual.hpp</label>
      </node>
      <node id="31">
        <label>concepts</label>
      </node>
      <node id="2">
        <label>cstdlib</label>
      </node>
      <node id="4">
        <label>dune/common/classname.hh</label>
      </node>
      <node id="21">
        <label>dune/common/exceptions.hh</label>
      </node>
      <node id="43">
        <label>dune/common/hybridutilities.hh</label>
      </node>
      <node id="29">
        <label>dune/common/promotiontraits.hh</label>
      </node>
      <node id="33">
        <label>dune/functions/functionspacebases/basistags.hh</label>
      </node>
      <node id="5">
        <label>dune/functions/functionspacebases/lagrangebasis.hh</label>
      </node>
      <node id="6">
        <label>dune/functions/functionspacebases/powerbasis.hh</label>
      </node>
      <node id="7">
        <label>dune/grid/yaspgrid.hh</label>
      </node>
      <node id="8">
        <label>dune/python/common/typeregistry.hh</label>
      </node>
      <node id="9">
        <label>dune/python/functions/globalbasis.hh</label>
      </node>
      <node id="10">
        <label>dune/python/functions/subspacebasis.hh</label>
      </node>
      <node id="11">
        <label>dune/python/pybind11/eigen.h</label>
      </node>
      <node id="12">
        <label>dune/python/pybind11/functional.h</label>
      </node>
      <node id="13">
        <label>dune/python/pybind11/pybind11.h</label>
      </node>
      <node id="14">
        <label>dune/python/pybind11/stl.h</label>
      </node>
      <node id="15">
        <label>dune/python/pybind11/stl_bind.h</label>
      </node>
      <node id="41">
        <label>functional</label>
      </node>
      <node id="17">
        <label>iosfwd</label>
      </node>
      <node id="18">
        <label>map</label>
      </node>
      <node id="26">
        <label>numeric</label>
      </node>
      <node id="27">
        <label>ranges</label>
      </node>
      <node id="19">
        <label>set</label>
      </node>
      <node id="3">
        <label>string</label>
      </node>
      <node id="42">
        <label>tuple</label>
      </node>
      <node id="24">
        <label>type_traits</label>
      </node>
      <node id="28">
        <label>unsupported/Eigen/CXX11/Tensor</label>
      </node>
      <node id="32">
        <label>utility</label>
      </node>
      <node id="20">
        <label>vector</label>
      </node>
    </incdepgraph>
    <innernamespace refid="a00411">Ikarus</innernamespace>
    <innernamespace refid="a00429">Ikarus::Python</innernamespace>
    <briefdescription>
<para><ref refid="a00436" kindref="compound">Python</ref> bindings for DirichletValues. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>SPDX-FileCopyrightText:<sp/>2021-2025<sp/>The<sp/>Ikarus<sp/>Developers<sp/>mueller@ibb.uni-stuttgart.de</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPDX-License-Identifier:<sp/>LGPL-3.0-or-later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdlib&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;dune/common/classname.hh&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;dune/functions/functionspacebases/lagrangebasis.hh&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;dune/functions/functionspacebases/powerbasis.hh&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;dune/grid/yaspgrid.hh&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;dune/python/common/typeregistry.hh&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;dune/python/functions/globalbasis.hh&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;dune/python/functions/subspacebasis.hh&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;dune/python/pybind11/eigen.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;dune/python/pybind11/functional.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;dune/python/pybind11/pybind11.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;dune/python/pybind11/stl.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;dune/python/pybind11/stl_bind.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="a00197" kindref="compound">ikarus/finiteelements/ferequirements.hh</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="a00429" kindref="compound">Ikarus::Python</ref><sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Impl<sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">FixBoundaryDOFsWithGlobalIndexFunction<sp/>=<sp/>std::function&lt;void(Eigen::Ref&lt;Eigen::VectorX&lt;bool&gt;&gt;,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)&gt;;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>LV&gt;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">FixBoundaryDOFsWithLocalViewFunction<sp/>=<sp/>std::function&lt;void(Eigen::Ref&lt;Eigen::VectorX&lt;bool&gt;&gt;,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>LV&amp;)&gt;;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>LV,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IS&gt;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">FixBoundaryDOFsWithIntersectionFunction<sp/>=</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::function&lt;void(Eigen::Ref&lt;Eigen::VectorX&lt;bool&gt;&gt;,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>LV&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IS&amp;)&gt;;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Basis&gt;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>registerSubSpaceLocalView()<sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>pybind11::module<sp/>scopedf<sp/>=<sp/>pybind11::module::import(</highlight><highlight class="stringliteral">&quot;dune.functions&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">LocalViewWrapper<sp/><sp/><sp/>=<sp/>Dune::Python::LocalViewWrapper&lt;Basis&gt;;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>includes<sp/>=<sp/>Dune::Python::IncludeFiles{</highlight><highlight class="stringliteral">&quot;dune/python/functions/globalbasis.hh&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>Dune::Python::insertClass&lt;Basis&gt;(scopedf,<sp/></highlight><highlight class="stringliteral">&quot;SubspaceBasis_&quot;</highlight><highlight class="normal"><sp/>+<sp/>Dune::className&lt;typename<sp/>Basis::PrefixPath&gt;(),</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Dune::Python::GenerateTypeName(Dune::className&lt;Basis&gt;()),<sp/>includes);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[lv,<sp/>isNew]<sp/>=<sp/>Dune::Python::insertClass&lt;LocalViewWrapper&gt;(</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scopedf,<sp/></highlight><highlight class="stringliteral">&quot;LocalView_&quot;</highlight><highlight class="normal"><sp/>+<sp/>Dune::className&lt;typename<sp/>Basis::PrefixPath&gt;(),</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Dune::Python::GenerateTypeName(</highlight><highlight class="stringliteral">&quot;Dune::Python::LocalViewWrapper&quot;</highlight><highlight class="normal">,<sp/>Dune::MetaType&lt;Basis&gt;()),<sp/>includes);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isNew)<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lv.def(</highlight><highlight class="stringliteral">&quot;bind&quot;</highlight><highlight class="normal">,<sp/>&amp;LocalViewWrapper::bind);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lv.def(</highlight><highlight class="stringliteral">&quot;unbind&quot;</highlight><highlight class="normal">,<sp/>&amp;LocalViewWrapper::unbind);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lv.def(</highlight><highlight class="stringliteral">&quot;index&quot;</highlight><highlight class="normal">,<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LocalViewWrapper&amp;<sp/>localView,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>localView.index(index);<sp/>});</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lv.def(</highlight><highlight class="stringliteral">&quot;__len__&quot;</highlight><highlight class="normal">,<sp/>[](LocalViewWrapper&amp;<sp/>self)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.size();<sp/>});</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Dune::Python::Functions::registerTree&lt;typename<sp/>LocalViewWrapper::Tree&gt;(lv);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lv.def(</highlight><highlight class="stringliteral">&quot;tree&quot;</highlight><highlight class="normal">,<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LocalViewWrapper&amp;<sp/>view)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>view.tree();<sp/>});</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Impl</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DirichletValues&gt;</highlight></codeline>
<codeline lineno="67" refid="a00429_1a7f83fd37212b1411d1dbae8f7064882c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a00429_1a7f83fd37212b1411d1dbae8f7064882c" kindref="member">forwardCorrectFunction</ref>(<ref refid="a01926" kindref="compound">DirichletValues</ref>&amp;<sp/><ref refid="a00441_1a453691a9a22118c4736e30240481a281" kindref="member">dirichletValues</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pybind11::function&amp;<sp/>functor,<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>cppFunction)<sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Basis<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="a01926_1a2e6f1ef4a810a7269303f54a6f74539f" kindref="member">DirichletValues::Basis</ref>;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Intersection<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Basis::GridView::Intersection;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">BackendType<sp/><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="a01926_1a3db820fbcd2b7edf58ce3b21b261f621" kindref="member">DirichletValues::BackendType</ref>;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">MultiIndex<sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Basis::MultiIndex;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Disambiguate<sp/>by<sp/>number<sp/>of<sp/>arguments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>pybind11::module<sp/>inspect_module<sp/>=<sp/>pybind11::module::import(</highlight><highlight class="stringliteral">&quot;inspect&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>pybind11::object<sp/>result<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>inspect_module.attr(</highlight><highlight class="stringliteral">&quot;signature&quot;</highlight><highlight class="normal">)(functor).attr(</highlight><highlight class="stringliteral">&quot;parameters&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>numParams<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>pybind11::len(result);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numParams<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>function<sp/>=<sp/>functor.template<sp/>cast&lt;const<sp/>Impl::FixBoundaryDOFsWithGlobalIndexFunction&gt;();</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lambda<sp/><sp/><sp/>=<sp/>[&amp;](BackendType&amp;<sp/>vec,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MultiIndex&amp;<sp/>indexGlobal)<sp/>{<sp/>function(vec.vector(),<sp/>indexGlobal);<sp/>};</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>cppFunction(lambda);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numParams<sp/>==<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lambda<sp/>=<sp/>[&amp;](BackendType&amp;<sp/>vec,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>localIndex,<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>lv)<sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">SubSpaceBasis<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::remove_cvref_t&lt;</highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(lv)&gt;::GlobalBasis;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Impl::registerSubSpaceLocalView&lt;SubSpaceBasis&gt;();</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">SubSpaceLocalViewWrapper<sp/>=<sp/>Dune::Python::LocalViewWrapper&lt;SubSpaceBasis&gt;;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lvWrapper<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>SubSpaceLocalViewWrapper(lv);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>function<sp/>=</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>functor.template<sp/>cast&lt;const<sp/>Impl::FixBoundaryDOFsWithLocalViewFunction&lt;SubSpaceLocalViewWrapper&gt;&gt;();</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>function(vec.vector(),<sp/>localIndex,<sp/>lvWrapper);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>cppFunction(lambda);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numParams<sp/>==<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lambda<sp/>=<sp/>[&amp;](BackendType&amp;<sp/>vec,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>localIndex,<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>lv,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Intersection&amp;<sp/>intersection)<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">SubSpaceBasis<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::remove_cvref_t&lt;</highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(lv)&gt;::GlobalBasis;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Impl::registerSubSpaceLocalView&lt;SubSpaceBasis&gt;();</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">SubSpaceLocalViewWrapper<sp/>=<sp/>Dune::Python::LocalViewWrapper&lt;SubSpaceBasis&gt;;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lvWrapper<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>SubSpaceLocalViewWrapper(lv);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>function<sp/>=<sp/>functor.template<sp/>cast&lt;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Impl::FixBoundaryDOFsWithIntersectionFunction&lt;SubSpaceLocalViewWrapper,<sp/>Intersection&gt;&gt;();</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>function(vec.vector(),<sp/>localIndex,<sp/>lvWrapper,<sp/>intersection);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>cppFunction(lambda);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>DUNE_THROW(Dune::NotImplemented,<sp/></highlight><highlight class="stringliteral">&quot;fixBoundaryDOFs:<sp/>A<sp/>function<sp/>with<sp/>this<sp/>signature<sp/>is<sp/>not<sp/>supported&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal">}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="a01926" kindref="compound">DirichletValues</ref>,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>options&gt;</highlight></codeline>
<codeline lineno="147" refid="a00403_1ga39b6df6adfe4858b13ac71f5830f29f6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a00403_1ga39b6df6adfe4858b13ac71f5830f29f6" kindref="member">registerDirichletValues</ref>(pybind11::handle<sp/>scope,<sp/>pybind11::class_&lt;DirichletValues,<sp/>options...&gt;<sp/>cls)<sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">pybind11::operator</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">_a;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Basis<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="a01926_1a2e6f1ef4a810a7269303f54a6f74539f" kindref="member">DirichletValues::Basis</ref>;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">BackendType<sp/><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="a01926_1a3db820fbcd2b7edf58ce3b21b261f621" kindref="member">DirichletValues::BackendType</ref>;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">FlagsType<sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="a01926_1aa71c2b94b37f2b4e83f9f1e059e6fe4c" kindref="member">DirichletValues::FlagsType</ref>;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">MultiIndex<sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Basis::MultiIndex;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">LocalView<sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Basis::LocalView;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Intersection<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Basis::GridView::Intersection;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>pybind11::module<sp/>scopedf<sp/>=<sp/>pybind11::module::import(</highlight><highlight class="stringliteral">&quot;dune.functions&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">LocalViewWrapper<sp/><sp/><sp/>=<sp/>Dune::Python::LocalViewWrapper&lt;Basis&gt;;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>includes<sp/><sp/><sp/><sp/>=<sp/>Dune::Python::IncludeFiles{</highlight><highlight class="stringliteral">&quot;dune/python/functions/globalbasis.hh&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[lv,<sp/>isNew]<sp/>=<sp/>Dune::Python::insertClass&lt;LocalViewWrapper&gt;(</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>scopedf,<sp/></highlight><highlight class="stringliteral">&quot;LocalView&quot;</highlight><highlight class="normal">,<sp/>Dune::Python::GenerateTypeName(</highlight><highlight class="stringliteral">&quot;Dune::Python::LocalViewWrapper&quot;</highlight><highlight class="normal">,<sp/>Dune::MetaType&lt;Basis&gt;()),</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>includes);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isNew)<sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>lv.def(</highlight><highlight class="stringliteral">&quot;bind&quot;</highlight><highlight class="normal">,<sp/>&amp;LocalViewWrapper::bind);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>lv.def(</highlight><highlight class="stringliteral">&quot;unbind&quot;</highlight><highlight class="normal">,<sp/>&amp;LocalViewWrapper::unbind);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>lv.def(</highlight><highlight class="stringliteral">&quot;index&quot;</highlight><highlight class="normal">,<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LocalViewWrapper&amp;<sp/>localView,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>localView.index(index);<sp/>});</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>lv.def(</highlight><highlight class="stringliteral">&quot;__len__&quot;</highlight><highlight class="normal">,<sp/>[](LocalViewWrapper&amp;<sp/>self)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.size();<sp/>});</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>Dune::Python::Functions::registerTree&lt;typename<sp/>LocalViewWrapper::Tree&gt;(lv);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>lv.def(</highlight><highlight class="stringliteral">&quot;tree&quot;</highlight><highlight class="normal">,<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LocalViewWrapper&amp;<sp/>view)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>view.tree();<sp/>});</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>cls.def(<ref refid="a00411_1ac8243891c1b961e50a066140ab79a142" kindref="member">pybind11::init</ref>([](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Basis&amp;<sp/><ref refid="a00440_1a0f9f04fa9d98e890cb6d4fe62ff889a4" kindref="member">basis</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="a01926" kindref="compound">DirichletValues</ref>(<ref refid="a00440_1a0f9f04fa9d98e890cb6d4fe62ff889a4" kindref="member">basis</ref>);<sp/>}),<sp/>pybind11::keep_alive&lt;1,<sp/>2&gt;());</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>cls.def_property_readonly(</highlight><highlight class="stringliteral">&quot;container&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="a01926_1af8495b65eac223b7b6c64f07b31cc814" kindref="member">DirichletValues::container</ref>);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>cls.def_property_readonly(</highlight><highlight class="stringliteral">&quot;size&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="a01926_1a010fa7b0721c137eb61221493e52dc92" kindref="member">DirichletValues::size</ref>);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>cls.def(</highlight><highlight class="stringliteral">&quot;__len__&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="a01926_1a010fa7b0721c137eb61221493e52dc92" kindref="member">DirichletValues::size</ref>);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>cls.def_property_readonly(</highlight><highlight class="stringliteral">&quot;fixedDOFsize&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="a01926_1aeb299b04b2777be56012b32a3b2e6a9c" kindref="member">DirichletValues::fixedDOFsize</ref>);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>cls.def(</highlight><highlight class="stringliteral">&quot;isConstrained&quot;</highlight><highlight class="normal">,<sp/>[](<ref refid="a01926" kindref="compound">DirichletValues</ref>&amp;<sp/>self,<sp/>std::size_t<sp/>i)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.<ref refid="a01926_1a1b1fccdb71619c0a49aa24977682d43a" kindref="member">isConstrained</ref>(i);<sp/>});</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>cls.def(</highlight><highlight class="stringliteral">&quot;setSingleDOF&quot;</highlight><highlight class="normal">,<sp/>[](<ref refid="a01926" kindref="compound">DirichletValues</ref>&amp;<sp/>self,<sp/>std::size_t<sp/>i,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>flag)<sp/>{<sp/>self.<ref refid="a01926_1a179a4b05a361fc9ea0a3e935dcf0e45a" kindref="member">setSingleDOF</ref>(i,<sp/>flag);<sp/>});</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>cls.def(</highlight><highlight class="stringliteral">&quot;isConstrained&quot;</highlight><highlight class="normal">,<sp/>[](<ref refid="a01926" kindref="compound">DirichletValues</ref>&amp;<sp/>self,<sp/>MultiIndex<sp/>i)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.<ref refid="a01926_1a1b1fccdb71619c0a49aa24977682d43a" kindref="member">isConstrained</ref>(i);<sp/>});</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>cls.def(</highlight><highlight class="stringliteral">&quot;setSingleDOF&quot;</highlight><highlight class="normal">,<sp/>[](<ref refid="a01926" kindref="compound">DirichletValues</ref>&amp;<sp/>self,<sp/>MultiIndex<sp/>i,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>flag)<sp/>{<sp/>self.<ref refid="a01926_1a179a4b05a361fc9ea0a3e935dcf0e45a" kindref="member">setSingleDOF</ref>(i,<sp/>flag);<sp/>});</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>cls.def(</highlight><highlight class="stringliteral">&quot;reset&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="a01926_1ab8ae184ec5c0c79a893a8111d7315442" kindref="member">DirichletValues::reset</ref>);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>cls.def(</highlight><highlight class="stringliteral">&quot;fixDOFs&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](<ref refid="a01926" kindref="compound">DirichletValues</ref>&amp;<sp/>self,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::function&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Basis&amp;,<sp/>Eigen::Ref&lt;Eigen::VectorX&lt;bool&gt;&gt;)&gt;&amp;<sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lambda<sp/>=<sp/>[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Basis&amp;<sp/><ref refid="a00440_1a0f9f04fa9d98e890cb6d4fe62ff889a4" kindref="member">basis</ref>,<sp/>BackendType&amp;<sp/>vec)<sp/>{<sp/>f(<ref refid="a00440_1a0f9f04fa9d98e890cb6d4fe62ff889a4" kindref="member">basis</ref>,<sp/>vec.vector());<sp/>};</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="a01926_1a956ce2cdc09731f001821c7b59d49e85" kindref="member">fixDOFs</ref>(lambda);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="192"><highlight class="normal">}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Ikarus::Python</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/__w/ikarus/ikarus/repo/ikarus/python/dirichletvalues/dirichletvalues.hh"/>
  </compounddef>
</doxygen>
