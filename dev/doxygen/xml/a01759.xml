<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="a01759" kind="struct" language="C++" prot="private" abstract="yes">
    <compoundname>Ikarus::LinearSolverTemplate::SolverBase</compoundname>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="a01759_1a728f77df6abe009fa902bbb240c114b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual Ikarus::LinearSolverTemplate&lt; ST &gt;::SolverBase::~SolverBase</definition>
        <argsstring>()=default</argsstring>
        <name>~SolverBase</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::SolverBase::~SolverBase</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="105" column="13"/>
      </memberdef>
      <memberdef kind="function" id="a01759_1aceced28f5dec687e06187605d129de42" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void Ikarus::LinearSolverTemplate&lt; ST &gt;::SolverBase::analyzePattern</definition>
        <argsstring>(const DenseMatrixType &amp;) const</argsstring>
        <name>analyzePattern</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::SolverBase::analyzePattern</qualifiedname>
        <param>
          <type>const <ref refid="a01755_1a9f52825b9226c080976fa759fc0f5a1b" kindref="member">DenseMatrixType</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="106" column="18" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" bodystart="106" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="a01759_1aaa20651cb571be4d163c0f345b4ba7ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void Ikarus::LinearSolverTemplate&lt; ST &gt;::SolverBase::analyzePattern</definition>
        <argsstring>(const SparseMatrixType &amp;)=0</argsstring>
        <name>analyzePattern</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::SolverBase::analyzePattern</qualifiedname>
        <param>
          <type>const <ref refid="a01755_1ab653f5550c90008600c77abe785963a0" kindref="member">SparseMatrixType</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="107" column="18"/>
      </memberdef>
      <memberdef kind="function" id="a01759_1a90591ab31c65d4e396d6e6b5c985debb" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void Ikarus::LinearSolverTemplate&lt; ST &gt;::SolverBase::factorize</definition>
        <argsstring>(const DenseMatrixType &amp;)=0</argsstring>
        <name>factorize</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::SolverBase::factorize</qualifiedname>
        <param>
          <type>const <ref refid="a01755_1a9f52825b9226c080976fa759fc0f5a1b" kindref="member">DenseMatrixType</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="108" column="18"/>
      </memberdef>
      <memberdef kind="function" id="a01759_1a76ba13ad67519ceaa6e3cae030c99b17" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void Ikarus::LinearSolverTemplate&lt; ST &gt;::SolverBase::factorize</definition>
        <argsstring>(const SparseMatrixType &amp;)=0</argsstring>
        <name>factorize</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::SolverBase::factorize</qualifiedname>
        <param>
          <type>const <ref refid="a01755_1ab653f5550c90008600c77abe785963a0" kindref="member">SparseMatrixType</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="109" column="18"/>
      </memberdef>
      <memberdef kind="function" id="a01759_1afbb8f598205624ecedb8a3f989879c20" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void Ikarus::LinearSolverTemplate&lt; ST &gt;::SolverBase::compute</definition>
        <argsstring>(const SparseMatrixType &amp;)=0</argsstring>
        <name>compute</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::SolverBase::compute</qualifiedname>
        <param>
          <type>const <ref refid="a01755_1ab653f5550c90008600c77abe785963a0" kindref="member">SparseMatrixType</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="110" column="18"/>
      </memberdef>
      <memberdef kind="function" id="a01759_1ad55b4986e772b1175d0ec92284911a14" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void Ikarus::LinearSolverTemplate&lt; ST &gt;::SolverBase::compute</definition>
        <argsstring>(const DenseMatrixType &amp;)=0</argsstring>
        <name>compute</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::SolverBase::compute</qualifiedname>
        <param>
          <type>const <ref refid="a01755_1a9f52825b9226c080976fa759fc0f5a1b" kindref="member">DenseMatrixType</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="111" column="18"/>
      </memberdef>
      <memberdef kind="function" id="a01759_1a67c4a5f602ad7d8f0975fb6bfacc0473" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void Ikarus::LinearSolverTemplate&lt; ST &gt;::SolverBase::solve</definition>
        <argsstring>(Eigen::VectorX&lt; ScalarType &gt; &amp;x, const Eigen::VectorX&lt; ScalarType &gt; &amp;) const =0</argsstring>
        <name>solve</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::SolverBase::solve</qualifiedname>
        <param>
          <type>Eigen::VectorX&lt; <ref refid="a01755_1ab222fb68571b860471b41e2c707d5637" kindref="member">ScalarType</ref> &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const Eigen::VectorX&lt; <ref refid="a01755_1ab222fb68571b860471b41e2c707d5637" kindref="member">ScalarType</ref> &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="112" column="18"/>
      </memberdef>
      <memberdef kind="function" id="a01759_1ae76ebaed56768511609734e30068b9e2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void Ikarus::LinearSolverTemplate&lt; ST &gt;::SolverBase::solve</definition>
        <argsstring>(Eigen::MatrixX2&lt; ScalarType &gt; &amp;x, const Eigen::MatrixX2&lt; ScalarType &gt; &amp;) const =0</argsstring>
        <name>solve</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::SolverBase::solve</qualifiedname>
        <param>
          <type>Eigen::MatrixX2&lt; <ref refid="a01755_1ab222fb68571b860471b41e2c707d5637" kindref="member">ScalarType</ref> &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const Eigen::MatrixX2&lt; <ref refid="a01755_1ab222fb68571b860471b41e2c707d5637" kindref="member">ScalarType</ref> &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="113" column="18"/>
      </memberdef>
      <memberdef kind="function" id="a01759_1aa6dcdc6cfca18d5527127880c548055f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void Ikarus::LinearSolverTemplate&lt; ST &gt;::SolverBase::solve</definition>
        <argsstring>(Eigen::MatrixX3&lt; ScalarType &gt; &amp;x, const Eigen::MatrixX3&lt; ScalarType &gt; &amp;) const =0</argsstring>
        <name>solve</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::SolverBase::solve</qualifiedname>
        <param>
          <type>Eigen::MatrixX3&lt; <ref refid="a01755_1ab222fb68571b860471b41e2c707d5637" kindref="member">ScalarType</ref> &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const Eigen::MatrixX3&lt; <ref refid="a01755_1ab222fb68571b860471b41e2c707d5637" kindref="member">ScalarType</ref> &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="114" column="18"/>
      </memberdef>
      <memberdef kind="function" id="a01759_1a4e6b81a93699c92e5444105a5ad5a412" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void Ikarus::LinearSolverTemplate&lt; ST &gt;::SolverBase::solve</definition>
        <argsstring>(Eigen::MatrixX&lt; ScalarType &gt; &amp;x, const Eigen::MatrixX&lt; ScalarType &gt; &amp;) const =0</argsstring>
        <name>solve</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::SolverBase::solve</qualifiedname>
        <param>
          <type>Eigen::MatrixX&lt; <ref refid="a01755_1ab222fb68571b860471b41e2c707d5637" kindref="member">ScalarType</ref> &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const Eigen::MatrixX&lt; <ref refid="a01755_1ab222fb68571b860471b41e2c707d5637" kindref="member">ScalarType</ref> &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="115" column="18"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="103" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" bodystart="104" bodyend="116"/>
    <listofallmembers>
      <member refid="a01759_1aceced28f5dec687e06187605d129de42" prot="public" virt="virtual"><scope>Ikarus::LinearSolverTemplate::SolverBase</scope><name>analyzePattern</name></member>
      <member refid="a01759_1aaa20651cb571be4d163c0f345b4ba7ba" prot="public" virt="pure-virtual"><scope>Ikarus::LinearSolverTemplate::SolverBase</scope><name>analyzePattern</name></member>
      <member refid="a01759_1afbb8f598205624ecedb8a3f989879c20" prot="public" virt="pure-virtual"><scope>Ikarus::LinearSolverTemplate::SolverBase</scope><name>compute</name></member>
      <member refid="a01759_1ad55b4986e772b1175d0ec92284911a14" prot="public" virt="pure-virtual"><scope>Ikarus::LinearSolverTemplate::SolverBase</scope><name>compute</name></member>
      <member refid="a01759_1a90591ab31c65d4e396d6e6b5c985debb" prot="public" virt="pure-virtual"><scope>Ikarus::LinearSolverTemplate::SolverBase</scope><name>factorize</name></member>
      <member refid="a01759_1a76ba13ad67519ceaa6e3cae030c99b17" prot="public" virt="pure-virtual"><scope>Ikarus::LinearSolverTemplate::SolverBase</scope><name>factorize</name></member>
      <member refid="a01759_1a67c4a5f602ad7d8f0975fb6bfacc0473" prot="public" virt="pure-virtual"><scope>Ikarus::LinearSolverTemplate::SolverBase</scope><name>solve</name></member>
      <member refid="a01759_1ae76ebaed56768511609734e30068b9e2" prot="public" virt="pure-virtual"><scope>Ikarus::LinearSolverTemplate::SolverBase</scope><name>solve</name></member>
      <member refid="a01759_1aa6dcdc6cfca18d5527127880c548055f" prot="public" virt="pure-virtual"><scope>Ikarus::LinearSolverTemplate::SolverBase</scope><name>solve</name></member>
      <member refid="a01759_1a4e6b81a93699c92e5444105a5ad5a412" prot="public" virt="pure-virtual"><scope>Ikarus::LinearSolverTemplate::SolverBase</scope><name>solve</name></member>
      <member refid="a01759_1a728f77df6abe009fa902bbb240c114b8" prot="public" virt="virtual"><scope>Ikarus::LinearSolverTemplate::SolverBase</scope><name>~SolverBase</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
