<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="a01327" kind="class" language="C++" prot="public">
    <compoundname>Ikarus::PathFollowing</compoundname>
    <basecompoundref refid="a01963" prot="public" virt="non-virtual">Ikarus::IObservable&lt; ControlMessages &gt;</basecompoundref>
    <includes refid="a00194" local="no">ikarus/controlroutines/pathfollowing.hh</includes>
    <templateparamlist>
      <param>
        <type>typename NLS</type>
      </param>
      <param>
        <type>typename PF</type>
        <defval><ref refid="a01335" kindref="compound">ArcLength</ref></defval>
      </param>
      <param>
        <type>typename ASS</type>
        <defval><ref refid="a01311" kindref="compound">AdaptiveStepSizing::NoOp</ref></defval>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="a01327_1aa2db583b9273c0a49983dcdd55c7bc8e" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; NLS &gt;</type>
        <definition>std::shared_ptr&lt;NLS&gt; Ikarus::PathFollowing&lt; NLS, PF, ASS &gt;::nonLinearSolver_</definition>
        <argsstring></argsstring>
        <name>nonLinearSolver_</name>
        <qualifiedname>Ikarus::PathFollowing::nonLinearSolver_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/controlroutines/pathfollowing.hh" line="112" column="19" bodyfile="/__w/ikarus/ikarus/repo/ikarus/controlroutines/pathfollowing.hh" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a01327_1ab1b95965f795d827c647f4ec06890815" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int Ikarus::PathFollowing&lt; NLS, PF, ASS &gt;::steps_</definition>
        <argsstring></argsstring>
        <name>steps_</name>
        <qualifiedname>Ikarus::PathFollowing::steps_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/controlroutines/pathfollowing.hh" line="114" column="7" bodyfile="/__w/ikarus/ikarus/repo/ikarus/controlroutines/pathfollowing.hh" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a01327_1a7938564ea419e54d96283cd854e6fd61" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double Ikarus::PathFollowing&lt; NLS, PF, ASS &gt;::stepSize_</definition>
        <argsstring></argsstring>
        <name>stepSize_</name>
        <qualifiedname>Ikarus::PathFollowing::stepSize_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/controlroutines/pathfollowing.hh" line="115" column="10" bodyfile="/__w/ikarus/ikarus/repo/ikarus/controlroutines/pathfollowing.hh" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a01327_1a581d3e476f7f6b3e665a65cacbe2d220" prot="private" static="no" mutable="no">
        <type>PF</type>
        <definition>PF Ikarus::PathFollowing&lt; NLS, PF, ASS &gt;::pathFollowingType_</definition>
        <argsstring></argsstring>
        <name>pathFollowingType_</name>
        <qualifiedname>Ikarus::PathFollowing::pathFollowingType_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/controlroutines/pathfollowing.hh" line="116" column="6" bodyfile="/__w/ikarus/ikarus/repo/ikarus/controlroutines/pathfollowing.hh" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a01327_1aec08e1a221c489cd33a2f070ba8f69a8" prot="private" static="no" mutable="no">
        <type>ASS</type>
        <definition>ASS Ikarus::PathFollowing&lt; NLS, PF, ASS &gt;::adaptiveStepSizing_</definition>
        <argsstring></argsstring>
        <name>adaptiveStepSizing_</name>
        <qualifiedname>Ikarus::PathFollowing::adaptiveStepSizing_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/controlroutines/pathfollowing.hh" line="117" column="7" bodyfile="/__w/ikarus/ikarus/repo/ikarus/controlroutines/pathfollowing.hh" bodystart="117" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="a01327_1a31b9c556cef2540c66676589b230ef5d" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto Ikarus::PathFollowing&lt; NLS, PF, ASS &gt;::name</definition>
        <argsstring>() const</argsstring>
        <name>name</name>
        <qualifiedname>Ikarus::PathFollowing::name</qualifiedname>
        <briefdescription>
<para>The name of the <ref refid="a01327" kindref="compound">PathFollowing</ref> method. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/controlroutines/pathfollowing.hh" line="83" column="18" bodyfile="/__w/ikarus/ikarus/repo/ikarus/controlroutines/pathfollowing.hh" bodystart="83" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="a01327_1af73474b0eccdddd65e046ebe813566f9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Ikarus::PathFollowing&lt; NLS, PF, ASS &gt;::PathFollowing</definition>
        <argsstring>(const std::shared_ptr&lt; NLS &gt; &amp;nls, int steps, double stepSize, PF pathFollowingType=ArcLength{}, ASS adaptiveStepSizing={})</argsstring>
        <name>PathFollowing</name>
        <qualifiedname>Ikarus::PathFollowing::PathFollowing</qualifiedname>
        <param>
          <type>const std::shared_ptr&lt; NLS &gt; &amp;</type>
          <declname>nls</declname>
        </param>
        <param>
          <type>int</type>
          <declname>steps</declname>
        </param>
        <param>
          <type>double</type>
          <declname>stepSize</declname>
        </param>
        <param>
          <type>PF</type>
          <declname>pathFollowingType</declname>
          <defval><ref refid="a01335" kindref="compound">ArcLength</ref>{}</defval>
        </param>
        <param>
          <type>ASS</type>
          <declname>adaptiveStepSizing</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Constructor for <ref refid="a01327" kindref="compound">PathFollowing</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nls</parametername>
</parameternamelist>
<parameterdescription>
<para>The non linear solver. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>steps</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of steps in the control routine. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stepSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of each step. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pathFollowingType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the path-following function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>adaptiveStepSizing</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the adaptive step sizing strategy. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/controlroutines/pathfollowing.hh" line="93" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/controlroutines/pathfollowing.hh" bodystart="93" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="a01327_1a9fa5e99c1a3e23b526939be2c6ee87bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a01319" kindref="compound">ControlInformation</ref></type>
        <definition>ControlInformation Ikarus::PathFollowing&lt; NLS, PF, ASS &gt;::run</definition>
        <argsstring>()</argsstring>
        <name>run</name>
        <qualifiedname>Ikarus::PathFollowing::run</qualifiedname>
    <requiresclause>(Impl::checkPathFollowingTemplates&lt;NLS, PF, ASS&gt;())    </requiresclause>
        <briefdescription>
<para>Executes the <ref refid="a01327" kindref="compound">PathFollowing</ref> routine. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="a01319" kindref="compound">ControlInformation</ref> structure containing information about the control results. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>Initializing solver</para>
<para>Calculate predictor for a particular step</para>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/controlroutines/pathfollowing.hh" line="106" column="22" bodyfile="/__w/ikarus/ikarus/repo/ikarus/controlroutines/pathfollowing.inl" bodystart="26" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="a01327_1a2328797dde819d93175e4552880d8d3e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>NLS &amp;</type>
        <definition>NLS &amp; Ikarus::PathFollowing&lt; NLS, PF, ASS &gt;::nonlinearSolver</definition>
        <argsstring>()</argsstring>
        <name>nonlinearSolver</name>
        <qualifiedname>Ikarus::PathFollowing::nonlinearSolver</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/controlroutines/pathfollowing.hh" line="109" column="7" bodyfile="/__w/ikarus/ikarus/repo/ikarus/controlroutines/pathfollowing.hh" bodystart="109" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="a01963_1ad67c98f02c195b788f78a229e1898006" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; MT &gt;::subscribe</definition>
        <argsstring>(ControlMessages message, std::shared_ptr&lt; IObserver&lt; ControlMessages &gt; &gt; observer)</argsstring>
        <name>subscribe</name>
        <qualifiedname>Ikarus::IObservable&lt; ControlMessages &gt;::subscribe</qualifiedname>
        <param>
          <type><ref refid="a00390_1ga35fa62fd2d4186a9750af3d0692f2893" kindref="member">ControlMessages</ref></type>
          <declname>message</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="a01959" kindref="compound">IObserver</ref>&lt; <ref refid="a00390_1ga35fa62fd2d4186a9750af3d0692f2893" kindref="member">ControlMessages</ref> &gt; &gt;</type>
          <declname>observer</declname>
        </param>
        <briefdescription>
<para>Subscribe an observer to receive notifications for a specific message type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The message type to subscribe to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>observer</parametername>
</parameternamelist>
<parameterdescription>
<para>The observer to be subscribed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="141" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="225" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="a01963_1a13bd8d73b485186680f640786e2682e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; ControlMessages  &gt;::subscribeAll</definition>
        <argsstring>(std::shared_ptr&lt; IObserver&lt; ControlMessages &gt; &gt; observer)</argsstring>
        <name>subscribeAll</name>
        <qualifiedname>Ikarus::IObservable&lt; ControlMessages &gt;::subscribeAll</qualifiedname>
        <param>
          <type>std::shared_ptr&lt; <ref refid="a01959" kindref="compound">IObserver</ref>&lt; <ref refid="a00390_1ga35fa62fd2d4186a9750af3d0692f2893" kindref="member">ControlMessages</ref> &gt; &gt;</type>
          <declname>observer</declname>
        </param>
        <briefdescription>
<para>Subscribe an observer to receive notifications for all message types. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>observer</parametername>
</parameternamelist>
<parameterdescription>
<para>The observer to be subscribed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="146" column="8"/>
      </memberdef>
      <memberdef kind="function" id="a01963_1a026462a1a050728e37bc24e33d2edd9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; ControlMessages  &gt;::subscribeAll</definition>
        <argsstring>(std::initializer_list&lt; std::shared_ptr&lt; IObserver&lt; ControlMessages &gt; &gt; &gt; observers)</argsstring>
        <name>subscribeAll</name>
        <qualifiedname>Ikarus::IObservable&lt; ControlMessages &gt;::subscribeAll</qualifiedname>
        <param>
          <type>std::initializer_list&lt; std::shared_ptr&lt; <ref refid="a01959" kindref="compound">IObserver</ref>&lt; <ref refid="a00390_1ga35fa62fd2d4186a9750af3d0692f2893" kindref="member">ControlMessages</ref> &gt; &gt; &gt;</type>
          <declname>observers</declname>
        </param>
        <briefdescription>
<para>Subscribe multiple observers to receive notifications for all message types. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>observers</parametername>
</parameternamelist>
<parameterdescription>
<para>List of observers to be subscribed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="151" column="8"/>
      </memberdef>
      <memberdef kind="function" id="a01963_1a3eb718b8fa1ecc373371a6751a316b24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; MT &gt;::unSubscribe</definition>
        <argsstring>(ControlMessages message, std::shared_ptr&lt; IObserver&lt; ControlMessages &gt; &gt; observer)</argsstring>
        <name>unSubscribe</name>
        <qualifiedname>Ikarus::IObservable&lt; ControlMessages &gt;::unSubscribe</qualifiedname>
        <param>
          <type><ref refid="a00390_1ga35fa62fd2d4186a9750af3d0692f2893" kindref="member">ControlMessages</ref></type>
          <declname>message</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="a01959" kindref="compound">IObserver</ref>&lt; <ref refid="a00390_1ga35fa62fd2d4186a9750af3d0692f2893" kindref="member">ControlMessages</ref> &gt; &gt;</type>
          <declname>observer</declname>
        </param>
        <briefdescription>
<para>Unsubscribe an observer from receiving notifications for a specific message type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The message type to unsubscribe from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>observer</parametername>
</parameternamelist>
<parameterdescription>
<para>The observer to be unsubscribed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="157" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="245" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="a01963_1a378a520833df0d6e27dbb35b621c838d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; MT &gt;::unSubscribeAll</definition>
        <argsstring>(std::shared_ptr&lt; IObserver&lt; ControlMessages &gt; &gt; observer)</argsstring>
        <name>unSubscribeAll</name>
        <qualifiedname>Ikarus::IObservable&lt; ControlMessages &gt;::unSubscribeAll</qualifiedname>
        <param>
          <type>std::shared_ptr&lt; <ref refid="a01959" kindref="compound">IObserver</ref>&lt; <ref refid="a00390_1ga35fa62fd2d4186a9750af3d0692f2893" kindref="member">ControlMessages</ref> &gt; &gt;</type>
          <declname>observer</declname>
        </param>
        <briefdescription>
<para>Unsubscribe an observer from receiving notifications for all message types. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>observer</parametername>
</parameternamelist>
<parameterdescription>
<para>The observer to be unsubscribed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="162" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="251" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="a01963_1a4bce3750aa7d52aff9baf122a54e16b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; ControlMessages  &gt;::notify</definition>
        <argsstring>(ControlMessages message)</argsstring>
        <name>notify</name>
        <qualifiedname>Ikarus::IObservable&lt; ControlMessages &gt;::notify</qualifiedname>
        <param>
          <type><ref refid="a00390_1ga35fa62fd2d4186a9750af3d0692f2893" kindref="member">ControlMessages</ref></type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>Notify observers about a specific message type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The message type to notify about. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="167" column="8"/>
      </memberdef>
      <memberdef kind="function" id="a01963_1ac035ba934c33e090c4a45128ac13f190" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; ControlMessages  &gt;::notify</definition>
        <argsstring>(ControlMessages message, ScalarType val)</argsstring>
        <name>notify</name>
        <qualifiedname>Ikarus::IObservable&lt; ControlMessages &gt;::notify</qualifiedname>
        <param>
          <type><ref refid="a00390_1ga35fa62fd2d4186a9750af3d0692f2893" kindref="member">ControlMessages</ref></type>
          <declname>message</declname>
        </param>
        <param>
          <type>ScalarType</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Notify observers about a specific message type with a floating-point value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ScalarType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the floating-point value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The message type to notify about. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The floating-point value to be sent with the notification. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="176" column="8"/>
      </memberdef>
      <memberdef kind="function" id="a01963_1a47ac8ae7cc4e9304cfb220f1d93ce1fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; ControlMessages  &gt;::notify</definition>
        <argsstring>(ControlMessages message, int val)</argsstring>
        <name>notify</name>
        <qualifiedname>Ikarus::IObservable&lt; ControlMessages &gt;::notify</qualifiedname>
        <param>
          <type><ref refid="a00390_1ga35fa62fd2d4186a9750af3d0692f2893" kindref="member">ControlMessages</ref></type>
          <declname>message</declname>
        </param>
        <param>
          <type>int</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Notify observers about a specific message type with an integer value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The message type to notify about. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The integer value to be sent with the notification. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="183" column="8"/>
      </memberdef>
      <memberdef kind="function" id="a01963_1a2f93322aa7327069dd4469983933bd16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; ControlMessages  &gt;::notify</definition>
        <argsstring>(ControlMessages message, const std::string &amp;val)</argsstring>
        <name>notify</name>
        <qualifiedname>Ikarus::IObservable&lt; ControlMessages &gt;::notify</qualifiedname>
        <param>
          <type><ref refid="a00390_1ga35fa62fd2d4186a9750af3d0692f2893" kindref="member">ControlMessages</ref></type>
          <declname>message</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Notify observers about a specific message type with a string value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The message type to notify about. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The string value to be sent with the notification. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="190" column="8"/>
      </memberdef>
      <memberdef kind="function" id="a01963_1ae0c6cec757e540f22b65fce1f782e380" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; ControlMessages  &gt;::notify</definition>
        <argsstring>(ControlMessages message, int val1, double val2)</argsstring>
        <name>notify</name>
        <qualifiedname>Ikarus::IObservable&lt; ControlMessages &gt;::notify</qualifiedname>
        <param>
          <type><ref refid="a00390_1ga35fa62fd2d4186a9750af3d0692f2893" kindref="member">ControlMessages</ref></type>
          <declname>message</declname>
        </param>
        <param>
          <type>int</type>
          <declname>val1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>val2</declname>
        </param>
        <briefdescription>
<para>Notify observers about a specific message type with an integer and a double value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The message type to notify about. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val1</parametername>
</parameternamelist>
<parameterdescription>
<para>The integer value to be sent with the notification. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val2</parametername>
</parameternamelist>
<parameterdescription>
<para>The double value to be sent with the notification. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="198" column="8"/>
      </memberdef>
      <memberdef kind="function" id="a01963_1a72e3156874ce81a1c7548b9f74db522c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; ControlMessages  &gt;::notify</definition>
        <argsstring>(ControlMessages message, int val1, const std::string &amp;val2)</argsstring>
        <name>notify</name>
        <qualifiedname>Ikarus::IObservable&lt; ControlMessages &gt;::notify</qualifiedname>
        <param>
          <type><ref refid="a00390_1ga35fa62fd2d4186a9750af3d0692f2893" kindref="member">ControlMessages</ref></type>
          <declname>message</declname>
        </param>
        <param>
          <type>int</type>
          <declname>val1</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>val2</declname>
        </param>
        <briefdescription>
<para>Notify observers about a specific message type with an integer value and a string value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The message type to notify about. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val1</parametername>
</parameternamelist>
<parameterdescription>
<para>The integer value to be sent with the notification. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val2</parametername>
</parameternamelist>
<parameterdescription>
<para>The string value to be sent with the notification. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="206" column="8"/>
      </memberdef>
      <memberdef kind="function" id="a01963_1ac72b261cd2af7f59e98f1504814bc785" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; ControlMessages  &gt;::notify</definition>
        <argsstring>(ControlMessages message, Eigen::VectorX&lt; ScalarType &gt; vec)</argsstring>
        <name>notify</name>
        <qualifiedname>Ikarus::IObservable&lt; ControlMessages &gt;::notify</qualifiedname>
        <param>
          <type><ref refid="a00390_1ga35fa62fd2d4186a9750af3d0692f2893" kindref="member">ControlMessages</ref></type>
          <declname>message</declname>
        </param>
        <param>
          <type>Eigen::VectorX&lt; ScalarType &gt;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
<para>Notify observers about a specific message type with an Eigen::VectorX. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ScalarType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the elements in the Eigen::VectorX. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The message type to notify about. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vec</parametername>
</parameternamelist>
<parameterdescription>
<para>The Eigen::VectorX to be sent with the notification. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="215" column="8"/>
      </memberdef>
      <memberdef kind="function" id="a01963_1a19047649c66f704c2ba2f1276c1a0e8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; ControlMessages  &gt;::notify</definition>
        <argsstring>(MT message)</argsstring>
        <name>notify</name>
        <qualifiedname>Ikarus::IObservable&lt; ControlMessages &gt;::notify</qualifiedname>
        <param>
          <type>MT</type>
          <declname>message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="257" column="18" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="257" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="a01963_1a03d4668b7111180f0427e8382359f3bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; ControlMessages  &gt;::notify</definition>
        <argsstring>(MT message, ScalarType val)</argsstring>
        <name>notify</name>
        <qualifiedname>Ikarus::IObservable&lt; ControlMessages &gt;::notify</qualifiedname>
        <param>
          <type>MT</type>
          <declname>message</declname>
        </param>
        <param>
          <type>ScalarType</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="265" column="18" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="265" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="a01963_1ad758bd6f15e8228a3439f52ee2ad6aaa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; ControlMessages  &gt;::notify</definition>
        <argsstring>(MT message, int val)</argsstring>
        <name>notify</name>
        <qualifiedname>Ikarus::IObservable&lt; ControlMessages &gt;::notify</qualifiedname>
        <param>
          <type>MT</type>
          <declname>message</declname>
        </param>
        <param>
          <type>int</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="272" column="18" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="272" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="a01963_1acf19e220bc71c046619dd21b3f50e8bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; ControlMessages  &gt;::notify</definition>
        <argsstring>(MT message, const std::string &amp;val)</argsstring>
        <name>notify</name>
        <qualifiedname>Ikarus::IObservable&lt; ControlMessages &gt;::notify</qualifiedname>
        <param>
          <type>MT</type>
          <declname>message</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="279" column="18" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="279" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="a01963_1aae4ef907815822352e07fe25cefa8980" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; ControlMessages  &gt;::notify</definition>
        <argsstring>(MT message, int val1, double val2)</argsstring>
        <name>notify</name>
        <qualifiedname>Ikarus::IObservable&lt; ControlMessages &gt;::notify</qualifiedname>
        <param>
          <type>MT</type>
          <declname>message</declname>
        </param>
        <param>
          <type>int</type>
          <declname>val1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>val2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="286" column="18" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="286" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="a01963_1ae12cb2deb2aa20f0cbc3d78b9a562eb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; ControlMessages  &gt;::notify</definition>
        <argsstring>(MT message, int val1, const std::string &amp;val2)</argsstring>
        <name>notify</name>
        <qualifiedname>Ikarus::IObservable&lt; ControlMessages &gt;::notify</qualifiedname>
        <param>
          <type>MT</type>
          <declname>message</declname>
        </param>
        <param>
          <type>int</type>
          <declname>val1</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>val2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="293" column="18" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="293" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="a01963_1aa5a60c5b81bb92de527c49ea8fce147d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; ControlMessages  &gt;::notify</definition>
        <argsstring>(MT message, Eigen::VectorX&lt; ScalarType &gt; vec)</argsstring>
        <name>notify</name>
        <qualifiedname>Ikarus::IObservable&lt; ControlMessages &gt;::notify</qualifiedname>
        <param>
          <type>MT</type>
          <declname>message</declname>
        </param>
        <param>
          <type>Eigen::VectorX&lt; ScalarType &gt;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="301" column="18" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="301" bodyend="305"/>
      </memberdef>
      </sectiondef>
    <requiresclause>(Impl::checkPathFollowingTemplates&lt;NLS, PF, ASS&gt;())    </requiresclause>
    <briefdescription>
<para>The <ref refid="a01327" kindref="compound">PathFollowing</ref> control routine for path-following analysis. </para>
    </briefdescription>
    <detaileddescription>
<para>This class represents the <ref refid="a01327" kindref="compound">PathFollowing</ref> control routine, which utilizes a nonlinear solver, such as Newton&apos;s method with scalar subsidiary function, which has to be fulfilled for solving the system along a predefined path.</para>
<para>Consider a non-linear system of equations <formula id="4">\[\mathbf{R}: \require{cases}\begin{cases}\mathbb{R}^n \times \mathbb{R} &amp;\rightarrow \mathbb{R}^n
\\ (\mathbf{D},\lambda)
&amp;\mapsto \mathbf{R}(\mathbf{D},\lambda) \end{cases}.\]</formula></para>
<para>Then in each step <formula id="5">$k+1$</formula> of the path following algorithm, the following problem is solved <formula id="6">\[ \begin{align}
\mathbf{R}(\mathbf{D}_k+ \mathrm{D}\mathbf{D}, \lambda_k+ \mathrm{D} \lambda) &amp;= \mathbf{0} \\
f(\mathrm{D}\mathbf{D}, \mathrm{D} \lambda) &amp;= 0 \end{align} \]</formula></para>
<para>where <formula id="7">$\mathrm{D}\mathbf{D}$</formula> is the increment of the solution vector and <formula id="8">$\mathrm{D} \lambda$</formula> is the load factor increment. The subsidiary function <formula id="9">$f$</formula> is provided by the user and needs to fulfill the concept Concepts::PathFollowingStrategy. This subsidiary function makes the given problem well-posed.</para>
<para>Currently the following subsidiary functions are implemented <ref refid="a01339" kindref="compound">LoadControlSubsidiaryFunction</ref>, <ref refid="a01335" kindref="compound">ArcLength</ref> and <ref refid="a01343" kindref="compound">DisplacementControl</ref></para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>NLS</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the nonlinear solver used in the control routine. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PF</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the path-following strategy. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ASS</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the adaptive step sizing strategy. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>Ikarus::IObservable&lt; ControlMessages &gt;</label>
        <link refid="a01963"/>
        <childnode refid="3" relation="template-instance">
          <edgelabel>&lt; ControlMessages &gt;</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>Ikarus::IObservable&lt; MessageType &gt;</label>
        <link refid="a01963"/>
      </node>
      <node id="1">
        <label>Ikarus::PathFollowing&lt; NLS, PF, ASS &gt;</label>
        <link refid="a01327"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>Ikarus::IObservable&lt; ControlMessages &gt;</label>
        <link refid="a01963"/>
        <childnode refid="3" relation="template-instance">
          <edgelabel>&lt; ControlMessages &gt;</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>Ikarus::IObservable&lt; MessageType &gt;</label>
        <link refid="a01963"/>
      </node>
      <node id="1">
        <label>Ikarus::PathFollowing&lt; NLS, PF, ASS &gt;</label>
        <link refid="a01327"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/__w/ikarus/ikarus/repo/ikarus/controlroutines/pathfollowing.hh" line="79" column="1" bodyfile="/__w/ikarus/ikarus/repo/ikarus/controlroutines/pathfollowing.hh" bodystart="80" bodyend="118"/>
    <listofallmembers>
      <member refid="a01327_1aec08e1a221c489cd33a2f070ba8f69a8" prot="private" virt="non-virtual"><scope>Ikarus::PathFollowing</scope><name>adaptiveStepSizing_</name></member>
      <member refid="a01963_1ac8058d5b1ebb462a10712ba598154e23" prot="public" virt="non-virtual"><scope>Ikarus::PathFollowing</scope><name>IObservable</name></member>
      <member refid="a01327_1a31b9c556cef2540c66676589b230ef5d" prot="public" virt="non-virtual"><scope>Ikarus::PathFollowing</scope><name>name</name></member>
      <member refid="a01327_1a2328797dde819d93175e4552880d8d3e" prot="public" virt="non-virtual"><scope>Ikarus::PathFollowing</scope><name>nonlinearSolver</name></member>
      <member refid="a01327_1aa2db583b9273c0a49983dcdd55c7bc8e" prot="private" virt="non-virtual"><scope>Ikarus::PathFollowing</scope><name>nonLinearSolver_</name></member>
      <member refid="a01963_1a4bce3750aa7d52aff9baf122a54e16b5" prot="public" virt="non-virtual"><scope>Ikarus::PathFollowing</scope><name>notify</name></member>
      <member refid="a01963_1ac035ba934c33e090c4a45128ac13f190" prot="public" virt="non-virtual"><scope>Ikarus::PathFollowing</scope><name>notify</name></member>
      <member refid="a01963_1a47ac8ae7cc4e9304cfb220f1d93ce1fc" prot="public" virt="non-virtual"><scope>Ikarus::PathFollowing</scope><name>notify</name></member>
      <member refid="a01963_1a2f93322aa7327069dd4469983933bd16" prot="public" virt="non-virtual"><scope>Ikarus::PathFollowing</scope><name>notify</name></member>
      <member refid="a01963_1ae0c6cec757e540f22b65fce1f782e380" prot="public" virt="non-virtual"><scope>Ikarus::PathFollowing</scope><name>notify</name></member>
      <member refid="a01963_1a72e3156874ce81a1c7548b9f74db522c" prot="public" virt="non-virtual"><scope>Ikarus::PathFollowing</scope><name>notify</name></member>
      <member refid="a01963_1ac72b261cd2af7f59e98f1504814bc785" prot="public" virt="non-virtual"><scope>Ikarus::PathFollowing</scope><name>notify</name></member>
      <member refid="a01963_1a19047649c66f704c2ba2f1276c1a0e8b" prot="public" virt="non-virtual"><scope>Ikarus::PathFollowing</scope><name>notify</name></member>
      <member refid="a01963_1a03d4668b7111180f0427e8382359f3bf" prot="public" virt="non-virtual"><scope>Ikarus::PathFollowing</scope><name>notify</name></member>
      <member refid="a01963_1ad758bd6f15e8228a3439f52ee2ad6aaa" prot="public" virt="non-virtual"><scope>Ikarus::PathFollowing</scope><name>notify</name></member>
      <member refid="a01963_1acf19e220bc71c046619dd21b3f50e8bb" prot="public" virt="non-virtual"><scope>Ikarus::PathFollowing</scope><name>notify</name></member>
      <member refid="a01963_1aae4ef907815822352e07fe25cefa8980" prot="public" virt="non-virtual"><scope>Ikarus::PathFollowing</scope><name>notify</name></member>
      <member refid="a01963_1ae12cb2deb2aa20f0cbc3d78b9a562eb3" prot="public" virt="non-virtual"><scope>Ikarus::PathFollowing</scope><name>notify</name></member>
      <member refid="a01963_1aa5a60c5b81bb92de527c49ea8fce147d" prot="public" virt="non-virtual"><scope>Ikarus::PathFollowing</scope><name>notify</name></member>
      <member refid="a01327_1af73474b0eccdddd65e046ebe813566f9" prot="public" virt="non-virtual"><scope>Ikarus::PathFollowing</scope><name>PathFollowing</name></member>
      <member refid="a01327_1a581d3e476f7f6b3e665a65cacbe2d220" prot="private" virt="non-virtual"><scope>Ikarus::PathFollowing</scope><name>pathFollowingType_</name></member>
      <member refid="a01327_1a9fa5e99c1a3e23b526939be2c6ee87bf" prot="public" virt="non-virtual"><scope>Ikarus::PathFollowing</scope><name>run</name></member>
      <member refid="a01327_1ab1b95965f795d827c647f4ec06890815" prot="private" virt="non-virtual"><scope>Ikarus::PathFollowing</scope><name>steps_</name></member>
      <member refid="a01327_1a7938564ea419e54d96283cd854e6fd61" prot="private" virt="non-virtual"><scope>Ikarus::PathFollowing</scope><name>stepSize_</name></member>
      <member refid="a01963_1ad67c98f02c195b788f78a229e1898006" prot="public" virt="non-virtual"><scope>Ikarus::PathFollowing</scope><name>subscribe</name></member>
      <member refid="a01963_1a13bd8d73b485186680f640786e2682e5" prot="public" virt="non-virtual"><scope>Ikarus::PathFollowing</scope><name>subscribeAll</name></member>
      <member refid="a01963_1a026462a1a050728e37bc24e33d2edd9c" prot="public" virt="non-virtual"><scope>Ikarus::PathFollowing</scope><name>subscribeAll</name></member>
      <member refid="a01963_1a3eb718b8fa1ecc373371a6751a316b24" prot="public" virt="non-virtual"><scope>Ikarus::PathFollowing</scope><name>unSubscribe</name></member>
      <member refid="a01963_1a378a520833df0d6e27dbb35b621c838d" prot="public" virt="non-virtual"><scope>Ikarus::PathFollowing</scope><name>unSubscribeAll</name></member>
      <member refid="a01963_1ad1fe15b31cccec8e44c695af550938ed" prot="public" virt="virtual"><scope>Ikarus::PathFollowing</scope><name>~IObservable</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
