<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="a01323" kind="class" language="C++" prot="public">
    <compoundname>Ikarus::LoadControl</compoundname>
    <basecompoundref refid="a01963" prot="public" virt="non-virtual">Ikarus::IObservable&lt; ControlMessages &gt;</basecompoundref>
    <includes refid="a00191" local="no">ikarus/controlroutines/loadcontrol.hh</includes>
    <templateparamlist>
      <param>
        <type>typename NLS</type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="a01323_1a60794dbbb23d5c32b33df485e154ca8d" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; NLS &gt;</type>
        <definition>std::shared_ptr&lt;NLS&gt; Ikarus::LoadControl&lt; NLS &gt;::nonLinearSolver_</definition>
        <argsstring></argsstring>
        <name>nonLinearSolver_</name>
        <qualifiedname>Ikarus::LoadControl::nonLinearSolver_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/controlroutines/loadcontrol.hh" line="67" column="19" bodyfile="/__w/ikarus/ikarus/repo/ikarus/controlroutines/loadcontrol.hh" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a01323_1a209877cc47ea6aae53ac33a75b3d92a6" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int Ikarus::LoadControl&lt; NLS &gt;::loadSteps_</definition>
        <argsstring></argsstring>
        <name>loadSteps_</name>
        <qualifiedname>Ikarus::LoadControl::loadSteps_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/controlroutines/loadcontrol.hh" line="68" column="7" bodyfile="/__w/ikarus/ikarus/repo/ikarus/controlroutines/loadcontrol.hh" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a01323_1a68b3b714b07ac2ddd8ee68ee0deb0589" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double Ikarus::LoadControl&lt; NLS &gt;::parameterBegin_</definition>
        <argsstring></argsstring>
        <name>parameterBegin_</name>
        <qualifiedname>Ikarus::LoadControl::parameterBegin_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/controlroutines/loadcontrol.hh" line="69" column="10" bodyfile="/__w/ikarus/ikarus/repo/ikarus/controlroutines/loadcontrol.hh" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a01323_1a1df3486d6ff6df41037915ff7d6fa859" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double Ikarus::LoadControl&lt; NLS &gt;::parameterEnd_</definition>
        <argsstring></argsstring>
        <name>parameterEnd_</name>
        <qualifiedname>Ikarus::LoadControl::parameterEnd_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/controlroutines/loadcontrol.hh" line="70" column="10" bodyfile="/__w/ikarus/ikarus/repo/ikarus/controlroutines/loadcontrol.hh" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a01323_1a14dee9200be762c50283ef25a647dde4" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double Ikarus::LoadControl&lt; NLS &gt;::stepSize_</definition>
        <argsstring></argsstring>
        <name>stepSize_</name>
        <qualifiedname>Ikarus::LoadControl::stepSize_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/controlroutines/loadcontrol.hh" line="71" column="10" bodyfile="/__w/ikarus/ikarus/repo/ikarus/controlroutines/loadcontrol.hh" bodystart="71" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="a01323_1ab0c5144a3b5d67f3c582772a48271105" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto Ikarus::LoadControl&lt; NLS &gt;::name</definition>
        <argsstring>() const</argsstring>
        <name>name</name>
        <qualifiedname>Ikarus::LoadControl::name</qualifiedname>
        <briefdescription>
<para>The name of the <ref refid="a01323" kindref="compound">LoadControl</ref> method. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/controlroutines/loadcontrol.hh" line="34" column="18" bodyfile="/__w/ikarus/ikarus/repo/ikarus/controlroutines/loadcontrol.hh" bodystart="34" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="a01323_1a073af96d9cd179a918cf18656be19947" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Ikarus::LoadControl&lt; NLS &gt;::LoadControl</definition>
        <argsstring>(const std::shared_ptr&lt; NLS &gt; &amp;nonLinearSolver, int loadSteps, const std::array&lt; double, 2 &gt; &amp;tbeginEnd)</argsstring>
        <name>LoadControl</name>
        <qualifiedname>Ikarus::LoadControl::LoadControl</qualifiedname>
        <param>
          <type>const std::shared_ptr&lt; NLS &gt; &amp;</type>
          <declname>nonLinearSolver</declname>
        </param>
        <param>
          <type>int</type>
          <declname>loadSteps</declname>
        </param>
        <param>
          <type>const std::array&lt; double, 2 &gt; &amp;</type>
          <declname>tbeginEnd</declname>
        </param>
        <briefdescription>
<para>Constructor for <ref refid="a01323" kindref="compound">LoadControl</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nonLinearSolver</parametername>
</parameternamelist>
<parameterdescription>
<para>Shared pointer to the nonlinear solver. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>loadSteps</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of load steps in the control routine. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tbeginEnd</parametername>
</parameternamelist>
<parameterdescription>
<para>Array representing the range of load parameters [tbegin, tend]. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/controlroutines/loadcontrol.hh" line="43" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/controlroutines/loadcontrol.hh" bodystart="43" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="a01323_1aea1be825e746e898092e83a41efaedac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a01319" kindref="compound">ControlInformation</ref></type>
        <definition>ControlInformation Ikarus::LoadControl&lt; NLS &gt;::run</definition>
        <argsstring>()</argsstring>
        <name>run</name>
        <qualifiedname>Ikarus::LoadControl::run</qualifiedname>
        <briefdescription>
<para>Executes the <ref refid="a01323" kindref="compound">LoadControl</ref> routine. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="a01319" kindref="compound">ControlInformation</ref> structure containing information about the control results. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/controlroutines/loadcontrol.hh" line="61" column="22" bodyfile="/__w/ikarus/ikarus/repo/ikarus/controlroutines/loadcontrol.inl" bodystart="14" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="a01323_1ade475c73548ea470b41a641c3458584a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>NLS &amp;</type>
        <definition>NLS &amp; Ikarus::LoadControl&lt; NLS &gt;::nonlinearSolver</definition>
        <argsstring>()</argsstring>
        <name>nonlinearSolver</name>
        <qualifiedname>Ikarus::LoadControl::nonlinearSolver</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/controlroutines/loadcontrol.hh" line="64" column="7" bodyfile="/__w/ikarus/ikarus/repo/ikarus/controlroutines/loadcontrol.hh" bodystart="64" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="a01963_1ad67c98f02c195b788f78a229e1898006" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; MT &gt;::subscribe</definition>
        <argsstring>(ControlMessages message, std::shared_ptr&lt; IObserver&lt; ControlMessages &gt; &gt; observer)</argsstring>
        <name>subscribe</name>
        <qualifiedname>Ikarus::IObservable&lt; ControlMessages &gt;::subscribe</qualifiedname>
        <param>
          <type><ref refid="a00390_1ga35fa62fd2d4186a9750af3d0692f2893" kindref="member">ControlMessages</ref></type>
          <declname>message</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="a01959" kindref="compound">IObserver</ref>&lt; <ref refid="a00390_1ga35fa62fd2d4186a9750af3d0692f2893" kindref="member">ControlMessages</ref> &gt; &gt;</type>
          <declname>observer</declname>
        </param>
        <briefdescription>
<para>Subscribe an observer to receive notifications for a specific message type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The message type to subscribe to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>observer</parametername>
</parameternamelist>
<parameterdescription>
<para>The observer to be subscribed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="141" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="225" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="a01963_1a13bd8d73b485186680f640786e2682e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; ControlMessages  &gt;::subscribeAll</definition>
        <argsstring>(std::shared_ptr&lt; IObserver&lt; ControlMessages &gt; &gt; observer)</argsstring>
        <name>subscribeAll</name>
        <qualifiedname>Ikarus::IObservable&lt; ControlMessages &gt;::subscribeAll</qualifiedname>
        <param>
          <type>std::shared_ptr&lt; <ref refid="a01959" kindref="compound">IObserver</ref>&lt; <ref refid="a00390_1ga35fa62fd2d4186a9750af3d0692f2893" kindref="member">ControlMessages</ref> &gt; &gt;</type>
          <declname>observer</declname>
        </param>
        <briefdescription>
<para>Subscribe an observer to receive notifications for all message types. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>observer</parametername>
</parameternamelist>
<parameterdescription>
<para>The observer to be subscribed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="146" column="8"/>
      </memberdef>
      <memberdef kind="function" id="a01963_1a026462a1a050728e37bc24e33d2edd9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; ControlMessages  &gt;::subscribeAll</definition>
        <argsstring>(std::initializer_list&lt; std::shared_ptr&lt; IObserver&lt; ControlMessages &gt; &gt; &gt; observers)</argsstring>
        <name>subscribeAll</name>
        <qualifiedname>Ikarus::IObservable&lt; ControlMessages &gt;::subscribeAll</qualifiedname>
        <param>
          <type>std::initializer_list&lt; std::shared_ptr&lt; <ref refid="a01959" kindref="compound">IObserver</ref>&lt; <ref refid="a00390_1ga35fa62fd2d4186a9750af3d0692f2893" kindref="member">ControlMessages</ref> &gt; &gt; &gt;</type>
          <declname>observers</declname>
        </param>
        <briefdescription>
<para>Subscribe multiple observers to receive notifications for all message types. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>observers</parametername>
</parameternamelist>
<parameterdescription>
<para>List of observers to be subscribed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="151" column="8"/>
      </memberdef>
      <memberdef kind="function" id="a01963_1a3eb718b8fa1ecc373371a6751a316b24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; MT &gt;::unSubscribe</definition>
        <argsstring>(ControlMessages message, std::shared_ptr&lt; IObserver&lt; ControlMessages &gt; &gt; observer)</argsstring>
        <name>unSubscribe</name>
        <qualifiedname>Ikarus::IObservable&lt; ControlMessages &gt;::unSubscribe</qualifiedname>
        <param>
          <type><ref refid="a00390_1ga35fa62fd2d4186a9750af3d0692f2893" kindref="member">ControlMessages</ref></type>
          <declname>message</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="a01959" kindref="compound">IObserver</ref>&lt; <ref refid="a00390_1ga35fa62fd2d4186a9750af3d0692f2893" kindref="member">ControlMessages</ref> &gt; &gt;</type>
          <declname>observer</declname>
        </param>
        <briefdescription>
<para>Unsubscribe an observer from receiving notifications for a specific message type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The message type to unsubscribe from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>observer</parametername>
</parameternamelist>
<parameterdescription>
<para>The observer to be unsubscribed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="157" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="245" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="a01963_1a378a520833df0d6e27dbb35b621c838d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; MT &gt;::unSubscribeAll</definition>
        <argsstring>(std::shared_ptr&lt; IObserver&lt; ControlMessages &gt; &gt; observer)</argsstring>
        <name>unSubscribeAll</name>
        <qualifiedname>Ikarus::IObservable&lt; ControlMessages &gt;::unSubscribeAll</qualifiedname>
        <param>
          <type>std::shared_ptr&lt; <ref refid="a01959" kindref="compound">IObserver</ref>&lt; <ref refid="a00390_1ga35fa62fd2d4186a9750af3d0692f2893" kindref="member">ControlMessages</ref> &gt; &gt;</type>
          <declname>observer</declname>
        </param>
        <briefdescription>
<para>Unsubscribe an observer from receiving notifications for all message types. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>observer</parametername>
</parameternamelist>
<parameterdescription>
<para>The observer to be unsubscribed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="162" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="251" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="a01963_1a4bce3750aa7d52aff9baf122a54e16b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; ControlMessages  &gt;::notify</definition>
        <argsstring>(ControlMessages message)</argsstring>
        <name>notify</name>
        <qualifiedname>Ikarus::IObservable&lt; ControlMessages &gt;::notify</qualifiedname>
        <param>
          <type><ref refid="a00390_1ga35fa62fd2d4186a9750af3d0692f2893" kindref="member">ControlMessages</ref></type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>Notify observers about a specific message type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The message type to notify about. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="167" column="8"/>
      </memberdef>
      <memberdef kind="function" id="a01963_1ac035ba934c33e090c4a45128ac13f190" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; ControlMessages  &gt;::notify</definition>
        <argsstring>(ControlMessages message, ScalarType val)</argsstring>
        <name>notify</name>
        <qualifiedname>Ikarus::IObservable&lt; ControlMessages &gt;::notify</qualifiedname>
        <param>
          <type><ref refid="a00390_1ga35fa62fd2d4186a9750af3d0692f2893" kindref="member">ControlMessages</ref></type>
          <declname>message</declname>
        </param>
        <param>
          <type>ScalarType</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Notify observers about a specific message type with a floating-point value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ScalarType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the floating-point value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The message type to notify about. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The floating-point value to be sent with the notification. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="176" column="8"/>
      </memberdef>
      <memberdef kind="function" id="a01963_1a47ac8ae7cc4e9304cfb220f1d93ce1fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; ControlMessages  &gt;::notify</definition>
        <argsstring>(ControlMessages message, int val)</argsstring>
        <name>notify</name>
        <qualifiedname>Ikarus::IObservable&lt; ControlMessages &gt;::notify</qualifiedname>
        <param>
          <type><ref refid="a00390_1ga35fa62fd2d4186a9750af3d0692f2893" kindref="member">ControlMessages</ref></type>
          <declname>message</declname>
        </param>
        <param>
          <type>int</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Notify observers about a specific message type with an integer value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The message type to notify about. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The integer value to be sent with the notification. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="183" column="8"/>
      </memberdef>
      <memberdef kind="function" id="a01963_1a2f93322aa7327069dd4469983933bd16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; ControlMessages  &gt;::notify</definition>
        <argsstring>(ControlMessages message, const std::string &amp;val)</argsstring>
        <name>notify</name>
        <qualifiedname>Ikarus::IObservable&lt; ControlMessages &gt;::notify</qualifiedname>
        <param>
          <type><ref refid="a00390_1ga35fa62fd2d4186a9750af3d0692f2893" kindref="member">ControlMessages</ref></type>
          <declname>message</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Notify observers about a specific message type with a string value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The message type to notify about. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The string value to be sent with the notification. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="190" column="8"/>
      </memberdef>
      <memberdef kind="function" id="a01963_1ae0c6cec757e540f22b65fce1f782e380" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; ControlMessages  &gt;::notify</definition>
        <argsstring>(ControlMessages message, int val1, double val2)</argsstring>
        <name>notify</name>
        <qualifiedname>Ikarus::IObservable&lt; ControlMessages &gt;::notify</qualifiedname>
        <param>
          <type><ref refid="a00390_1ga35fa62fd2d4186a9750af3d0692f2893" kindref="member">ControlMessages</ref></type>
          <declname>message</declname>
        </param>
        <param>
          <type>int</type>
          <declname>val1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>val2</declname>
        </param>
        <briefdescription>
<para>Notify observers about a specific message type with an integer and a double value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The message type to notify about. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val1</parametername>
</parameternamelist>
<parameterdescription>
<para>The integer value to be sent with the notification. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val2</parametername>
</parameternamelist>
<parameterdescription>
<para>The double value to be sent with the notification. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="198" column="8"/>
      </memberdef>
      <memberdef kind="function" id="a01963_1a72e3156874ce81a1c7548b9f74db522c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; ControlMessages  &gt;::notify</definition>
        <argsstring>(ControlMessages message, int val1, const std::string &amp;val2)</argsstring>
        <name>notify</name>
        <qualifiedname>Ikarus::IObservable&lt; ControlMessages &gt;::notify</qualifiedname>
        <param>
          <type><ref refid="a00390_1ga35fa62fd2d4186a9750af3d0692f2893" kindref="member">ControlMessages</ref></type>
          <declname>message</declname>
        </param>
        <param>
          <type>int</type>
          <declname>val1</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>val2</declname>
        </param>
        <briefdescription>
<para>Notify observers about a specific message type with an integer value and a string value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The message type to notify about. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val1</parametername>
</parameternamelist>
<parameterdescription>
<para>The integer value to be sent with the notification. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val2</parametername>
</parameternamelist>
<parameterdescription>
<para>The string value to be sent with the notification. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="206" column="8"/>
      </memberdef>
      <memberdef kind="function" id="a01963_1ac72b261cd2af7f59e98f1504814bc785" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; ControlMessages  &gt;::notify</definition>
        <argsstring>(ControlMessages message, Eigen::VectorX&lt; ScalarType &gt; vec)</argsstring>
        <name>notify</name>
        <qualifiedname>Ikarus::IObservable&lt; ControlMessages &gt;::notify</qualifiedname>
        <param>
          <type><ref refid="a00390_1ga35fa62fd2d4186a9750af3d0692f2893" kindref="member">ControlMessages</ref></type>
          <declname>message</declname>
        </param>
        <param>
          <type>Eigen::VectorX&lt; ScalarType &gt;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
<para>Notify observers about a specific message type with an Eigen::VectorX. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ScalarType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the elements in the Eigen::VectorX. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The message type to notify about. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vec</parametername>
</parameternamelist>
<parameterdescription>
<para>The Eigen::VectorX to be sent with the notification. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="215" column="8"/>
      </memberdef>
      <memberdef kind="function" id="a01963_1a19047649c66f704c2ba2f1276c1a0e8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; ControlMessages  &gt;::notify</definition>
        <argsstring>(MT message)</argsstring>
        <name>notify</name>
        <qualifiedname>Ikarus::IObservable&lt; ControlMessages &gt;::notify</qualifiedname>
        <param>
          <type>MT</type>
          <declname>message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="257" column="18" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="257" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="a01963_1a03d4668b7111180f0427e8382359f3bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; ControlMessages  &gt;::notify</definition>
        <argsstring>(MT message, ScalarType val)</argsstring>
        <name>notify</name>
        <qualifiedname>Ikarus::IObservable&lt; ControlMessages &gt;::notify</qualifiedname>
        <param>
          <type>MT</type>
          <declname>message</declname>
        </param>
        <param>
          <type>ScalarType</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="265" column="18" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="265" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="a01963_1ad758bd6f15e8228a3439f52ee2ad6aaa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; ControlMessages  &gt;::notify</definition>
        <argsstring>(MT message, int val)</argsstring>
        <name>notify</name>
        <qualifiedname>Ikarus::IObservable&lt; ControlMessages &gt;::notify</qualifiedname>
        <param>
          <type>MT</type>
          <declname>message</declname>
        </param>
        <param>
          <type>int</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="272" column="18" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="272" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="a01963_1acf19e220bc71c046619dd21b3f50e8bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; ControlMessages  &gt;::notify</definition>
        <argsstring>(MT message, const std::string &amp;val)</argsstring>
        <name>notify</name>
        <qualifiedname>Ikarus::IObservable&lt; ControlMessages &gt;::notify</qualifiedname>
        <param>
          <type>MT</type>
          <declname>message</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="279" column="18" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="279" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="a01963_1aae4ef907815822352e07fe25cefa8980" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; ControlMessages  &gt;::notify</definition>
        <argsstring>(MT message, int val1, double val2)</argsstring>
        <name>notify</name>
        <qualifiedname>Ikarus::IObservable&lt; ControlMessages &gt;::notify</qualifiedname>
        <param>
          <type>MT</type>
          <declname>message</declname>
        </param>
        <param>
          <type>int</type>
          <declname>val1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>val2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="286" column="18" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="286" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="a01963_1ae12cb2deb2aa20f0cbc3d78b9a562eb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; ControlMessages  &gt;::notify</definition>
        <argsstring>(MT message, int val1, const std::string &amp;val2)</argsstring>
        <name>notify</name>
        <qualifiedname>Ikarus::IObservable&lt; ControlMessages &gt;::notify</qualifiedname>
        <param>
          <type>MT</type>
          <declname>message</declname>
        </param>
        <param>
          <type>int</type>
          <declname>val1</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>val2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="293" column="18" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="293" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="a01963_1aa5a60c5b81bb92de527c49ea8fce147d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; ControlMessages  &gt;::notify</definition>
        <argsstring>(MT message, Eigen::VectorX&lt; ScalarType &gt; vec)</argsstring>
        <name>notify</name>
        <qualifiedname>Ikarus::IObservable&lt; ControlMessages &gt;::notify</qualifiedname>
        <param>
          <type>MT</type>
          <declname>message</declname>
        </param>
        <param>
          <type>Eigen::VectorX&lt; ScalarType &gt;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="301" column="18" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="301" bodyend="305"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The <ref refid="a01323" kindref="compound">LoadControl</ref> control routine increases the last parameter of a nonlinear operator and calls a nonlinear solver.</para>
<para>This class represents the <ref refid="a01323" kindref="compound">LoadControl</ref> control routine. It increments the last parameter of a nonlinear operator and utilizes a nonlinear solver, such as Newton&apos;s method, to solve the resulting system at each step. </para>
    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>NLS</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the nonlinear solver used in the control routine. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>Ikarus::IObservable&lt; ControlMessages &gt;</label>
        <link refid="a01963"/>
        <childnode refid="3" relation="template-instance">
          <edgelabel>&lt; ControlMessages &gt;</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>Ikarus::IObservable&lt; MessageType &gt;</label>
        <link refid="a01963"/>
      </node>
      <node id="1">
        <label>Ikarus::LoadControl&lt; NLS &gt;</label>
        <link refid="a01323"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>Ikarus::IObservable&lt; ControlMessages &gt;</label>
        <link refid="a01963"/>
        <childnode refid="3" relation="template-instance">
          <edgelabel>&lt; ControlMessages &gt;</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>Ikarus::IObservable&lt; MessageType &gt;</label>
        <link refid="a01963"/>
      </node>
      <node id="1">
        <label>Ikarus::LoadControl&lt; NLS &gt;</label>
        <link refid="a01323"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/__w/ikarus/ikarus/repo/ikarus/controlroutines/loadcontrol.hh" line="30" column="1" bodyfile="/__w/ikarus/ikarus/repo/ikarus/controlroutines/loadcontrol.hh" bodystart="31" bodyend="72"/>
    <listofallmembers>
      <member refid="a01963_1ac8058d5b1ebb462a10712ba598154e23" prot="public" virt="non-virtual"><scope>Ikarus::LoadControl</scope><name>IObservable</name></member>
      <member refid="a01323_1a073af96d9cd179a918cf18656be19947" prot="public" virt="non-virtual"><scope>Ikarus::LoadControl</scope><name>LoadControl</name></member>
      <member refid="a01323_1a209877cc47ea6aae53ac33a75b3d92a6" prot="private" virt="non-virtual"><scope>Ikarus::LoadControl</scope><name>loadSteps_</name></member>
      <member refid="a01323_1ab0c5144a3b5d67f3c582772a48271105" prot="public" virt="non-virtual"><scope>Ikarus::LoadControl</scope><name>name</name></member>
      <member refid="a01323_1ade475c73548ea470b41a641c3458584a" prot="public" virt="non-virtual"><scope>Ikarus::LoadControl</scope><name>nonlinearSolver</name></member>
      <member refid="a01323_1a60794dbbb23d5c32b33df485e154ca8d" prot="private" virt="non-virtual"><scope>Ikarus::LoadControl</scope><name>nonLinearSolver_</name></member>
      <member refid="a01963_1a4bce3750aa7d52aff9baf122a54e16b5" prot="public" virt="non-virtual"><scope>Ikarus::LoadControl</scope><name>notify</name></member>
      <member refid="a01963_1ac035ba934c33e090c4a45128ac13f190" prot="public" virt="non-virtual"><scope>Ikarus::LoadControl</scope><name>notify</name></member>
      <member refid="a01963_1a47ac8ae7cc4e9304cfb220f1d93ce1fc" prot="public" virt="non-virtual"><scope>Ikarus::LoadControl</scope><name>notify</name></member>
      <member refid="a01963_1a2f93322aa7327069dd4469983933bd16" prot="public" virt="non-virtual"><scope>Ikarus::LoadControl</scope><name>notify</name></member>
      <member refid="a01963_1ae0c6cec757e540f22b65fce1f782e380" prot="public" virt="non-virtual"><scope>Ikarus::LoadControl</scope><name>notify</name></member>
      <member refid="a01963_1a72e3156874ce81a1c7548b9f74db522c" prot="public" virt="non-virtual"><scope>Ikarus::LoadControl</scope><name>notify</name></member>
      <member refid="a01963_1ac72b261cd2af7f59e98f1504814bc785" prot="public" virt="non-virtual"><scope>Ikarus::LoadControl</scope><name>notify</name></member>
      <member refid="a01963_1a19047649c66f704c2ba2f1276c1a0e8b" prot="public" virt="non-virtual"><scope>Ikarus::LoadControl</scope><name>notify</name></member>
      <member refid="a01963_1a03d4668b7111180f0427e8382359f3bf" prot="public" virt="non-virtual"><scope>Ikarus::LoadControl</scope><name>notify</name></member>
      <member refid="a01963_1ad758bd6f15e8228a3439f52ee2ad6aaa" prot="public" virt="non-virtual"><scope>Ikarus::LoadControl</scope><name>notify</name></member>
      <member refid="a01963_1acf19e220bc71c046619dd21b3f50e8bb" prot="public" virt="non-virtual"><scope>Ikarus::LoadControl</scope><name>notify</name></member>
      <member refid="a01963_1aae4ef907815822352e07fe25cefa8980" prot="public" virt="non-virtual"><scope>Ikarus::LoadControl</scope><name>notify</name></member>
      <member refid="a01963_1ae12cb2deb2aa20f0cbc3d78b9a562eb3" prot="public" virt="non-virtual"><scope>Ikarus::LoadControl</scope><name>notify</name></member>
      <member refid="a01963_1aa5a60c5b81bb92de527c49ea8fce147d" prot="public" virt="non-virtual"><scope>Ikarus::LoadControl</scope><name>notify</name></member>
      <member refid="a01323_1a68b3b714b07ac2ddd8ee68ee0deb0589" prot="private" virt="non-virtual"><scope>Ikarus::LoadControl</scope><name>parameterBegin_</name></member>
      <member refid="a01323_1a1df3486d6ff6df41037915ff7d6fa859" prot="private" virt="non-virtual"><scope>Ikarus::LoadControl</scope><name>parameterEnd_</name></member>
      <member refid="a01323_1aea1be825e746e898092e83a41efaedac" prot="public" virt="non-virtual"><scope>Ikarus::LoadControl</scope><name>run</name></member>
      <member refid="a01323_1a14dee9200be762c50283ef25a647dde4" prot="private" virt="non-virtual"><scope>Ikarus::LoadControl</scope><name>stepSize_</name></member>
      <member refid="a01963_1ad67c98f02c195b788f78a229e1898006" prot="public" virt="non-virtual"><scope>Ikarus::LoadControl</scope><name>subscribe</name></member>
      <member refid="a01963_1a13bd8d73b485186680f640786e2682e5" prot="public" virt="non-virtual"><scope>Ikarus::LoadControl</scope><name>subscribeAll</name></member>
      <member refid="a01963_1a026462a1a050728e37bc24e33d2edd9c" prot="public" virt="non-virtual"><scope>Ikarus::LoadControl</scope><name>subscribeAll</name></member>
      <member refid="a01963_1a3eb718b8fa1ecc373371a6751a316b24" prot="public" virt="non-virtual"><scope>Ikarus::LoadControl</scope><name>unSubscribe</name></member>
      <member refid="a01963_1a378a520833df0d6e27dbb35b621c838d" prot="public" virt="non-virtual"><scope>Ikarus::LoadControl</scope><name>unSubscribeAll</name></member>
      <member refid="a01963_1ad1fe15b31cccec8e44c695af550938ed" prot="public" virt="virtual"><scope>Ikarus::LoadControl</scope><name>~IObservable</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
