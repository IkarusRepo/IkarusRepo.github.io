<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="a00029" kind="file" language="C++">
    <compoundname>nonlinopfactory.hh</compoundname>
    <includes local="no">utility</includes>
    <includes refid="a00347" local="no">ikarus/assembler/dirichletbcenforcement.hh</includes>
    <includes refid="a00197" local="no">ikarus/finiteelements/ferequirements.hh</includes>
    <includes refid="a00026" local="no">ikarus/utils/nonlinearoperator.hh</includes>
    <includedby refid="a00125" local="no">nonlinearsolverfactory.hh</includedby>
    <includedby refid="a00329" local="no">pathfollowing.hh</includedby>
    <incdepgraph>
      <node id="3">
        <label>ikarus/assembler/dirichletbcenforcement.hh</label>
        <link refid="a00347"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>ikarus/finiteelements/ferequirements.hh</label>
        <link refid="a00197"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>ikarus/finiteelements/feresulttypes.hh</label>
        <link refid="a00302"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>ikarus/finiteelements/mechanics/materials/tags.hh</label>
        <link refid="a00233"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>ikarus/utils/concepts.hh</label>
        <link refid="a03101"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>ikarus/utils/makeenum.hh</label>
        <link refid="a00011"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>ikarus/utils/math.hh</label>
        <link refid="a00044"/>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>ikarus/utils/nonlinearoperator.hh</label>
        <link refid="a00026"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>nonlinopfactory.hh</label>
        <link refid="a00029"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>ikarus/utils/tensorutils.hh</label>
        <link refid="a00032"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>ikarus/utils/traits.hh</label>
        <link refid="a00068"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>Eigen/Core</label>
      </node>
      <node id="23">
        <label>Eigen/Dense</label>
      </node>
      <node id="24">
        <label>Eigen/Sparse</label>
      </node>
      <node id="25">
        <label>autodiff/forward/dual/dual.hpp</label>
      </node>
      <node id="20">
        <label>concepts</label>
      </node>
      <node id="5">
        <label>dune/common/exceptions.hh</label>
      </node>
      <node id="30">
        <label>dune/common/hybridutilities.hh</label>
      </node>
      <node id="18">
        <label>dune/common/promotiontraits.hh</label>
      </node>
      <node id="21">
        <label>dune/functions/functionspacebases/basistags.hh</label>
      </node>
      <node id="22">
        <label>dune/functions/functionspacebases/lagrangebasis.hh</label>
      </node>
      <node id="28">
        <label>functional</label>
      </node>
      <node id="7">
        <label>iosfwd</label>
      </node>
      <node id="8">
        <label>map</label>
      </node>
      <node id="15">
        <label>numeric</label>
      </node>
      <node id="16">
        <label>ranges</label>
      </node>
      <node id="9">
        <label>set</label>
      </node>
      <node id="29">
        <label>tuple</label>
      </node>
      <node id="13">
        <label>type_traits</label>
      </node>
      <node id="17">
        <label>unsupported/Eigen/CXX11/Tensor</label>
      </node>
      <node id="2">
        <label>utility</label>
      </node>
      <node id="10">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="3">
        <label>pathfollowing.hh</label>
        <link refid="a00329"/>
      </node>
      <node id="6">
        <label>linearelastic.hh</label>
        <link refid="a00224"/>
      </node>
      <node id="5">
        <label>materials.hh</label>
        <link refid="a03059"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>vanishingstress.hh</label>
        <link refid="a00239"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>resultevaluators.hh</label>
        <link refid="a00353"/>
      </node>
      <node id="7">
        <label>material.hh</label>
        <link refid="a00158"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>nonlinearsolverfactory.hh</label>
        <link refid="a00125"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>nonlinopfactory.hh</label>
        <link refid="a00029"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>_ikarus.cc</label>
        <link refid="a00365"/>
      </node>
      <node id="8">
        <label>materials.hh</label>
        <link refid="a03062"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="a01982" prot="public">Ikarus::NonLinearOperatorFactory</innerclass>
    <innernamespace refid="a00411">Ikarus</innernamespace>
    <briefdescription>
<para>Contains the generic NonLinearOperatorFactory class. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>SPDX-FileCopyrightText:<sp/>2021-2025<sp/>The<sp/>Ikarus<sp/>Developers<sp/>mueller@ibb.uni-stuttgart.de</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPDX-License-Identifier:<sp/>LGPL-3.0-or-later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="a00347" kindref="compound">ikarus/assembler/dirichletbcenforcement.hh</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="a00197" kindref="compound">ikarus/finiteelements/ferequirements.hh</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="a00026" kindref="compound">ikarus/utils/nonlinearoperator.hh</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="a00411" kindref="compound">Ikarus</ref><sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19" refid="a01982" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="a01982" kindref="compound">NonLinearOperatorFactory</ref></highlight></codeline>
<codeline lineno="20"><highlight class="normal">{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Assembler,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Affordances&gt;</highlight></codeline>
<codeline lineno="22" refid="a01982_1a644858005534ab498b1802bb633bb37b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="a01982_1a644858005534ab498b1802bb633bb37b" kindref="member">op</ref>(Assembler&amp;&amp;<sp/>as,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="a00437_1a472256748675b3006507836bd8034a0e" kindref="member">traits::remove_pointer_t</ref>&lt;std::remove_cvref_t&lt;Assembler&gt;&gt;::FERequirement&amp;<sp/>req,</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a01386" kindref="compound">AffordanceCollection&lt;Affordances...&gt;</ref><sp/>affordances,<sp/><ref refid="a00411_1a9f83fad9f4c149f249165a13f2370eec" kindref="member">DBCOption</ref><sp/>dbcOption)<sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>assemblerPtr<sp/>=<sp/>[as]()<sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(std::is_pointer_v&lt;std::remove_cvref_t&lt;Assembler&gt;&gt;<sp/>or</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a02022" kindref="compound">traits::isSharedPtr&lt;std::remove_cvref_t&lt;Assembler&gt;</ref>&gt;::value)</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>as;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_shared&lt;std::remove_cvref_t&lt;Assembler&gt;&gt;(std::forward&lt;Assembler&gt;(as));</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>}();</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">FERequirement<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="a00437_1a472256748675b3006507836bd8034a0e" kindref="member">traits::remove_pointer_t&lt;std::remove_cvref_t&lt;Assembler&gt;</ref>&gt;::FERequirement;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>[[maybe_unused]]<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>KFunction<sp/>=<sp/>[dbcOption,<sp/>assembler<sp/>=<sp/>assemblerPtr,<sp/>affordances](</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FERequirement::SolutionVectorType&amp;<sp/>globalSol,</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FERequirement::ParameterType&amp;<sp/><ref refid="a00411_1ac00abda505aa8ccc73ce59afd165ce49" kindref="member">parameter</ref>)<sp/>-&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FERequirement<sp/>req;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>req.insertGlobalSolution(globalSol).insertParameter(<ref refid="a00411_1ac00abda505aa8ccc73ce59afd165ce49" kindref="member">parameter</ref>);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>assembler-&gt;matrix(req,<sp/>affordances.<ref refid="a01386_1af7b6303f0ef9cc6677744559786d8966" kindref="member">matrixAffordance</ref>(),<sp/>dbcOption);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>[[maybe_unused]]<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>residualFunction<sp/>=<sp/>[dbcOption,<sp/>assembler<sp/>=<sp/>assemblerPtr,<sp/>affordances](</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FERequirement::SolutionVectorType&amp;<sp/>globalSol,</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FERequirement::ParameterType&amp;<sp/><ref refid="a00411_1ac00abda505aa8ccc73ce59afd165ce49" kindref="member">parameter</ref>)<sp/>-&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FERequirement<sp/>req;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>req.insertGlobalSolution(globalSol).insertParameter(<ref refid="a00411_1ac00abda505aa8ccc73ce59afd165ce49" kindref="member">parameter</ref>);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>assembler-&gt;vector(req,<sp/>affordances.<ref refid="a01386_1a9e6b82aa35f9d301b9ccdd661dbb8dde" kindref="member">vectorAffordance</ref>(),<sp/>dbcOption);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(req.populated()<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Before<sp/>you<sp/>calls<sp/>this<sp/>method<sp/>you<sp/>have<sp/>to<sp/>pass<sp/>populated<sp/>fe<sp/>requirements&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(affordances.<ref refid="a01386_1abff0c7489d3ce4d83bf7f078e3e6bdfe" kindref="member">hasScalarAffordance</ref>)<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>[[maybe_unused]]<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>energyFunction<sp/>=<sp/>[assembler<sp/>=<sp/>assemblerPtr,<sp/>affordances](</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FERequirement::SolutionVectorType&amp;<sp/>globalSol,</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FERequirement::ParameterType&amp;<sp/><ref refid="a00411_1ac00abda505aa8ccc73ce59afd165ce49" kindref="member">parameter</ref>)<sp/>-&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FERequirement<sp/>req;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>req.insertGlobalSolution(globalSol).insertParameter(<ref refid="a00411_1ac00abda505aa8ccc73ce59afd165ce49" kindref="member">parameter</ref>);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>assembler-&gt;scalar(req,<sp/>affordances.<ref refid="a01386_1ac56ebfd26cad078d15800d620a9b1e93" kindref="member">scalarAffordance</ref>());</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="a00411_1abcf5978fa18a6e0aadc5e19c4a0edaa9" kindref="member">NonLinearOperator</ref>(<ref refid="a00411_1ab787b670f0d338c870988f417cf85f76" kindref="member">functions</ref>(std::move(energyFunction),<sp/>std::move(residualFunction),<sp/>std::move(KFunction)),</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00411_1ac00abda505aa8ccc73ce59afd165ce49" kindref="member">parameter</ref>(req.globalSolution(),<sp/>req.parameter()));</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="a00411_1abcf5978fa18a6e0aadc5e19c4a0edaa9" kindref="member">NonLinearOperator</ref>(<ref refid="a00411_1ab787b670f0d338c870988f417cf85f76" kindref="member">functions</ref>(std::move(residualFunction),<sp/>std::move(KFunction)),</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00411_1ac00abda505aa8ccc73ce59afd165ce49" kindref="member">parameter</ref>(req.globalSolution(),<sp/>req.parameter()));</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Assembler&gt;</highlight></codeline>
<codeline lineno="68" refid="a01982_1a3ad02994461a0e0948ea1e8ef557e562" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="a01982_1a3ad02994461a0e0948ea1e8ef557e562" kindref="member">op</ref>(Assembler&amp;&amp;<sp/>as,<sp/><ref refid="a00411_1a9f83fad9f4c149f249165a13f2370eec" kindref="member">DBCOption</ref><sp/>dbcOption)<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ex<sp/>=<sp/>[]()<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DUNE_THROW(Dune::InvalidStateException,</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Assembler<sp/>has<sp/>to<sp/>be<sp/>bound<sp/>to<sp/>a<sp/>fe<sp/>requirement<sp/>and<sp/>an<sp/>affordance<sp/>collection<sp/>before<sp/>you<sp/>can<sp/>call<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;this<sp/>method&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(std::is_pointer_v&lt;std::remove_cvref_t&lt;Assembler&gt;&gt;<sp/>or</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a02022" kindref="compound">traits::isSharedPtr&lt;std::remove_cvref_t&lt;Assembler&gt;</ref>&gt;::value)<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(as-&gt;boundToRequirement()<sp/>and<sp/>as-&gt;boundToAffordanceCollection())<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="a01982_1a644858005534ab498b1802bb633bb37b" kindref="member">op</ref>(std::forward&lt;Assembler&gt;(as),<sp/>as-&gt;requirement(),<sp/>as-&gt;affordanceCollection(),<sp/>dbcOption);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ex();</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(as-&gt;boundToRequirement()<sp/>and<sp/>as-&gt;boundToAffordanceCollection())<sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="a01982_1a644858005534ab498b1802bb633bb37b" kindref="member">op</ref>(std::forward&lt;Assembler&gt;(as),<sp/>as.requirement(),<sp/>as.affordanceCollection(),<sp/>dbcOption);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ex();</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>__builtin_unreachable();</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Assembler&gt;</highlight></codeline>
<codeline lineno="92" refid="a01982_1a282e4a255bb96ec4b79a09d0330540a2" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="a01982_1a282e4a255bb96ec4b79a09d0330540a2" kindref="member">op</ref>(Assembler&amp;&amp;<sp/>as)<sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ex<sp/>=<sp/>[]()<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DUNE_THROW(Dune::InvalidStateException,</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Assembler<sp/>has<sp/>to<sp/>be<sp/>bound<sp/>to<sp/>a<sp/>fe<sp/>requirement<sp/>to<sp/>an<sp/>affordance<sp/>collection<sp/>and<sp/>to<sp/>an<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;DBCOption<sp/>before<sp/>you<sp/>can<sp/>call<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;this<sp/>method&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(std::is_pointer_v&lt;std::remove_cvref_t&lt;Assembler&gt;&gt;<sp/>or</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a02022" kindref="compound">traits::isSharedPtr&lt;std::remove_cvref_t&lt;Assembler&gt;</ref>&gt;::value)<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/>as-&gt;bound())</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ex();</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="a01982_1a644858005534ab498b1802bb633bb37b" kindref="member">op</ref>(std::forward&lt;Assembler&gt;(as),<sp/>as-&gt;requirement(),<sp/>as-&gt;affordanceCollection(),<sp/>as-&gt;dBCOption());</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/>as.bound())</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ex();</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="a01982_1a644858005534ab498b1802bb633bb37b" kindref="member">op</ref>(std::forward&lt;Assembler&gt;(as),<sp/>as.requirement(),<sp/>as.affordanceCollection(),<sp/>as.dBCOption());</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Assembler,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Affordances&gt;</highlight></codeline>
<codeline lineno="112" refid="a01982_1ad34cdaf0aa639fc495660c5e70ec34c6" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="a01982_1ad34cdaf0aa639fc495660c5e70ec34c6" kindref="member">op</ref>(Assembler&amp;&amp;<sp/>as,<sp/><ref refid="a01386" kindref="compound">AffordanceCollection&lt;Affordances...&gt;</ref><sp/>affordances,</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00411_1a9f83fad9f4c149f249165a13f2370eec" kindref="member">DBCOption</ref><sp/>dbcOption<sp/>=<sp/><ref refid="a00411_1a9f83fad9f4c149f249165a13f2370eecabbd47109890259c0127154db1af26c75" kindref="member">DBCOption::Full</ref>)<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ex<sp/>=<sp/>[]()<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DUNE_THROW(Dune::InvalidStateException,</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Assembler<sp/>has<sp/>to<sp/>be<sp/>bound<sp/>to<sp/>a<sp/>fe<sp/>requirement<sp/>before<sp/>you<sp/>can<sp/>call<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;this<sp/>method&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(std::is_pointer_v&lt;std::remove_cvref_t&lt;Assembler&gt;&gt;<sp/>or</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a02022" kindref="compound">traits::isSharedPtr&lt;std::remove_cvref_t&lt;Assembler&gt;</ref>&gt;::value)<sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/>as-&gt;boundToRequirement())</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ex();</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="a01982_1a644858005534ab498b1802bb633bb37b" kindref="member">op</ref>(std::forward&lt;Assembler&gt;(as),<sp/>as-&gt;requirement(),<sp/>affordances,<sp/>dbcOption);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/>as.boundToRequirement())</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ex();</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="a01982_1a644858005534ab498b1802bb633bb37b" kindref="member">op</ref>(std::forward&lt;Assembler&gt;(as),<sp/>as.requirement(),<sp/>affordances,<sp/>dbcOption);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Assembler&gt;</highlight></codeline>
<codeline lineno="133" refid="a01982_1a592390e33bc94dcdea8d94aeb79750dc" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="a01982_1a592390e33bc94dcdea8d94aeb79750dc" kindref="member">op</ref>(Assembler&amp;&amp;<sp/>as,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="a00437_1a472256748675b3006507836bd8034a0e" kindref="member">traits::remove_pointer_t</ref>&lt;std::remove_cvref_t&lt;Assembler&gt;&gt;::FERequirement&amp;<sp/>req,</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00411_1a9f83fad9f4c149f249165a13f2370eec" kindref="member">DBCOption</ref><sp/>dbcOption)<sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ex<sp/>=<sp/>[]()<sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DUNE_THROW(Dune::InvalidStateException,</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Assembler<sp/>has<sp/>to<sp/>be<sp/>bound<sp/>to<sp/>an<sp/>affordance<sp/>collection<sp/>before<sp/>you<sp/>can<sp/>call<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;this<sp/>method&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(std::is_pointer_v&lt;std::remove_cvref_t&lt;Assembler&gt;&gt;<sp/>or</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a02022" kindref="compound">traits::isSharedPtr&lt;std::remove_cvref_t&lt;Assembler&gt;</ref>&gt;::value)<sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/>as-&gt;boundToAffordanceCollection())</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ex();</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="a01982_1a644858005534ab498b1802bb633bb37b" kindref="member">op</ref>(std::forward&lt;Assembler&gt;(as),<sp/>as-&gt;requirement(),<sp/>as-&gt;affordanceCollection(),<sp/>dbcOption);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/>as.boundToAffordanceCollection())</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ex();</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="a01982_1a644858005534ab498b1802bb633bb37b" kindref="member">op</ref>(std::forward&lt;Assembler&gt;(as),<sp/>as.requirement(),<sp/>as.affordanceCollection(),<sp/>dbcOption);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal">};</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Ikarus</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/__w/ikarus/ikarus/repo/ikarus/utils/nonlinopfactory.hh"/>
  </compounddef>
</doxygen>
