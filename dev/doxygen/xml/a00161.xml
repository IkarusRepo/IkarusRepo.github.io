<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="a00161" kind="file" language="C++">
    <compoundname>flatassemblermanipulator.hh</compoundname>
    <includes local="no">dune/python/common/typeregistry.hh</includes>
    <includes local="no">dune/python/pybind11/eigen.h</includes>
    <includes local="no">dune/python/pybind11/pybind11.h</includes>
    <includes local="no">dune/python/pybind11/stl.h</includes>
    <includes local="no">dune/python/pybind11/stl_bind.h</includes>
    <includes refid="a00347" local="no">ikarus/assembler/dirichletbcenforcement.hh</includes>
    <includes refid="a00197" local="no">ikarus/finiteelements/ferequirements.hh</includes>
    <includes refid="a00164" local="no">ikarus/python/assembler/flatassembler.hh</includes>
    <includes refid="a00146" local="no">ikarus/python/finiteelements/scalarwrapper.hh</includes>
    <includes refid="a03083" local="no">ikarus/utils/basis.hh</includes>
    <includes refid="a00068" local="no">ikarus/utils/traits.hh</includes>
    <incdepgraph>
      <node id="7">
        <label>ikarus/assembler/dirichletbcenforcement.hh</label>
        <link refid="a00347"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>ikarus/finiteelements/ferequirements.hh</label>
        <link refid="a00197"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>ikarus/finiteelements/feresulttypes.hh</label>
        <link refid="a00302"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>ikarus/finiteelements/mechanics/materials/tags.hh</label>
        <link refid="a00233"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>ikarus/python/assembler/flatassembler.hh</label>
        <link refid="a00164"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>flatassemblermanipulator.hh</label>
        <link refid="a00161"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>ikarus/python/finiteelements/scalarwrapper.hh</label>
        <link refid="a00146"/>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>ikarus/utils/basis.hh</label>
        <link refid="a03083"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>ikarus/utils/concepts.hh</label>
        <link refid="a03101"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>ikarus/utils/flatprebasis.hh</label>
        <link refid="a00008"/>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>ikarus/utils/makeenum.hh</label>
        <link refid="a00011"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>ikarus/utils/math.hh</label>
        <link refid="a00044"/>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>ikarus/utils/tensorutils.hh</label>
        <link refid="a00032"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>ikarus/utils/traits.hh</label>
        <link refid="a00068"/>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>Eigen/Core</label>
      </node>
      <node id="28">
        <label>Eigen/Dense</label>
      </node>
      <node id="29">
        <label>Eigen/Sparse</label>
      </node>
      <node id="30">
        <label>autodiff/forward/dual/dual.hpp</label>
      </node>
      <node id="24">
        <label>concepts</label>
      </node>
      <node id="41">
        <label>cstddef</label>
      </node>
      <node id="9">
        <label>dune/common/exceptions.hh</label>
      </node>
      <node id="35">
        <label>dune/common/hybridutilities.hh</label>
      </node>
      <node id="42">
        <label>dune/common/indices.hh</label>
      </node>
      <node id="22">
        <label>dune/common/promotiontraits.hh</label>
      </node>
      <node id="46">
        <label>dune/common/referencehelper.hh</label>
      </node>
      <node id="26">
        <label>dune/functions/functionspacebases/basistags.hh</label>
      </node>
      <node id="43">
        <label>dune/functions/functionspacebases/compositebasis.hh</label>
      </node>
      <node id="39">
        <label>dune/functions/functionspacebases/defaultglobalbasis.hh</label>
      </node>
      <node id="27">
        <label>dune/functions/functionspacebases/lagrangebasis.hh</label>
      </node>
      <node id="44">
        <label>dune/functions/functionspacebases/powerbasis.hh</label>
      </node>
      <node id="2">
        <label>dune/python/common/typeregistry.hh</label>
      </node>
      <node id="3">
        <label>dune/python/pybind11/eigen.h</label>
      </node>
      <node id="4">
        <label>dune/python/pybind11/pybind11.h</label>
      </node>
      <node id="5">
        <label>dune/python/pybind11/stl.h</label>
      </node>
      <node id="6">
        <label>dune/python/pybind11/stl_bind.h</label>
      </node>
      <node id="33">
        <label>functional</label>
      </node>
      <node id="11">
        <label>iosfwd</label>
      </node>
      <node id="12">
        <label>map</label>
      </node>
      <node id="19">
        <label>numeric</label>
      </node>
      <node id="20">
        <label>ranges</label>
      </node>
      <node id="13">
        <label>set</label>
      </node>
      <node id="34">
        <label>tuple</label>
      </node>
      <node id="17">
        <label>type_traits</label>
      </node>
      <node id="21">
        <label>unsupported/Eigen/CXX11/Tensor</label>
      </node>
      <node id="25">
        <label>utility</label>
      </node>
      <node id="14">
        <label>vector</label>
      </node>
    </incdepgraph>
    <innerclass refid="a01790" prot="public">Ikarus::Python::SparseMatrixWrapper</innerclass>
    <innernamespace refid="a00411">Ikarus</innernamespace>
    <innernamespace refid="a00429">Ikarus::Python</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>SPDX-FileCopyrightText:<sp/>2021-2025<sp/>The<sp/>Ikarus<sp/>Developers<sp/>mueller@ibb.uni-stuttgart.de</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPDX-License-Identifier:<sp/>LGPL-3.0-or-later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;dune/python/common/typeregistry.hh&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;dune/python/pybind11/eigen.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;dune/python/pybind11/pybind11.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;dune/python/pybind11/stl.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;dune/python/pybind11/stl_bind.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="a00347" kindref="compound">ikarus/assembler/dirichletbcenforcement.hh</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="a00197" kindref="compound">ikarus/finiteelements/ferequirements.hh</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="a00164" kindref="compound">ikarus/python/assembler/flatassembler.hh</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="a00146" kindref="compound">ikarus/python/finiteelements/scalarwrapper.hh</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="a03083" kindref="compound">ikarus/utils/basis.hh</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="a00068" kindref="compound">ikarus/utils/traits.hh</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="a00429" kindref="compound">Ikarus::Python</ref><sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Impl<sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>NewType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">...<sp/>Indices&gt;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">)<sp/>forward_last_as(F&amp;&amp;<sp/>f,<sp/>std::index_sequence&lt;Indices...&gt;,<sp/>Args&amp;&amp;...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tup<sp/>=<sp/>std::forward_as_tuple(args...);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f(std::get&lt;Indices&gt;(tup)...,<sp/>NewType(std::get&lt;</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Args)<sp/>-<sp/>1&gt;(tup)));</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>NewType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>wrapFunctionAndReplaceLastType(F&amp;&amp;<sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[f](</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;...<sp/>args)<sp/>-&gt;<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>forward_last_as&lt;NewType&gt;(f,<sp/>std::make_index_sequence&lt;</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(args)<sp/>-<sp/>1&gt;{},</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::forward&lt;decltype(args)&gt;(args)...);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Impl</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Since<sp/>Pybind11<sp/>create<sp/>a<sp/>new<sp/>scipy.sparse.csr_matrix<sp/>from<sp/>an<sp/>Eigen::SparseMatrix,<sp/>we<sp/>have<sp/>to<sp/>create<sp/>our<sp/>own<sp/>wrapper,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">//<sp/>which<sp/>allows<sp/>the<sp/>modification<sp/>of<sp/>scalar<sp/>entries<sp/>of<sp/>the<sp/>sparse<sp/>matrix<sp/>in<sp/>Python</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="46" refid="a01790" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="a01790" kindref="compound">SparseMatrixWrapper</ref></highlight></codeline>
<codeline lineno="47"><highlight class="normal">{</highlight></codeline>
<codeline lineno="48" refid="a01790_1adea8b485a2a498cb28c69debdb841f21" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="a01790_1adea8b485a2a498cb28c69debdb841f21" kindref="member">SparseMatrixWrapper</ref>(Eigen::SparseMatrix&lt;T&gt;&amp;<sp/>matrix)</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="a01790_1a32da660f4237007b18c282ea7bb38b8b" kindref="member">matrixRef</ref>(matrix)<sp/>{}</highlight></codeline>
<codeline lineno="50" refid="a01790_1a32da660f4237007b18c282ea7bb38b8b" refkind="member"><highlight class="normal"><sp/><sp/>std::reference_wrapper&lt;Eigen::SparseMatrix&lt;T&gt;&gt;<sp/><ref refid="a01790_1a32da660f4237007b18c282ea7bb38b8b" kindref="member">matrixRef</ref>;</highlight></codeline>
<codeline lineno="51"><highlight class="normal">};</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="54" refid="a00429_1a09b4a81e2d6d0619406854f6dc3fc8f7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a00429_1a09b4a81e2d6d0619406854f6dc3fc8f7" kindref="member">registerSparseMatrixWrapper</ref>(pybind11::handle<sp/>scope)<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>includes<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>Dune::Python::IncludeFiles{</highlight><highlight class="stringliteral">&quot;ikarus/finiteelements/flatassemblermanipulator.hh&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[lv,<sp/>isNotRegistered]<sp/>=<sp/>Dune::Python::insertClass&lt;SparseMatrixWrapper&lt;T&gt;&gt;(</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>scope,<sp/></highlight><highlight class="stringliteral">&quot;SparseMatrixWrapper&quot;</highlight><highlight class="normal">,<sp/>Dune::Python::GenerateTypeName(Dune::className&lt;<ref refid="a01790" kindref="compound">SparseMatrixWrapper&lt;T&gt;</ref>&gt;()),</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>includes);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isNotRegistered)<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>lv.def(<ref refid="a00411_1ac8243891c1b961e50a066140ab79a142" kindref="member">pybind11::init</ref>&lt;Eigen::SparseMatrix&lt;T&gt;&amp;&gt;())</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;__setitem__&quot;</highlight><highlight class="normal">,<sp/>[](<ref refid="a01790" kindref="compound">SparseMatrixWrapper&lt;T&gt;</ref>&amp;<sp/>self,<sp/>std::array&lt;int,<sp/>2&gt;<sp/>index,</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val)<sp/>{<sp/>self.<ref refid="a01790_1a32da660f4237007b18c282ea7bb38b8b" kindref="member">matrixRef</ref>.get().coeffRef(index[0],<sp/>index[1])<sp/>=<sp/>val;<sp/>})</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;__getitem__&quot;</highlight><highlight class="normal">,<sp/>[](<ref refid="a01790" kindref="compound">SparseMatrixWrapper&lt;T&gt;</ref>&amp;<sp/>self,<sp/>std::array&lt;int,<sp/>2&gt;<sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.<ref refid="a01790_1a32da660f4237007b18c282ea7bb38b8b" kindref="member">matrixRef</ref>.get().coeffRef(index[0],<sp/>index[1]);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal">}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="a01278" kindref="compound">AssemblerManipulator</ref>,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>options&gt;</highlight></codeline>
<codeline lineno="70" refid="a00429_1aad35f78683b64303a28d3b8b4f83aa37" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a00429_1aad35f78683b64303a28d3b8b4f83aa37" kindref="member">registerAssemblerManipulator</ref>(pybind11::handle<sp/>scope,<sp/>pybind11::class_&lt;AssemblerManipulator,<sp/>options...&gt;<sp/>cls)<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">pybind11::operator</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">_a;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><ref refid="a00403_1ga87d3c6e620be5df59ba6923751caae86" kindref="member">registerFlatAssembler</ref>(scope,<sp/>cls);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>registerSparseMatrixWrapper&lt;double&gt;(scope);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">UnderlyingAssembler<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>AssemblerManipulator::WrappedAssembler;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>cls.def(<ref refid="a00411_1ac8243891c1b961e50a066140ab79a142" kindref="member">pybind11::init</ref>([](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>UnderlyingAssembler&amp;<sp/>as)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="a01278" kindref="compound">AssemblerManipulator</ref>(as);<sp/>}));</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">NewArgs<sp/>=<sp/>std::tuple&lt;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a01794" kindref="compound">ScalarWrapper&lt;std::reference_wrapper&lt;typename AssemblerManipulator::ScalarType&gt;</ref>&gt;,</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Ref&lt;typename<sp/>AssemblerManipulator::VectorType&gt;,</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::conditional_t&lt;std::is_same_v&lt;typename<sp/>AssemblerManipulator::MatrixType,<sp/>Eigen::SparseMatrix&lt;double&gt;&gt;,</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a01790" kindref="compound">SparseMatrixWrapper&lt;double&gt;</ref>,<sp/>Eigen::Ref&lt;Eigen::MatrixXd&gt;&gt;&gt;;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>Dune::Hybrid::forEach(Dune::Hybrid::integralRange(</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Dune::index_constant&lt;std::tuple_size_v&lt;typename<sp/>AssemblerManipulator::CallBackTypes&gt;&gt;()),</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&amp;](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">F<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>std::tuple_element_t&lt;i,<sp/>typename<sp/>AssemblerManipulator::CallBackTypes&gt;;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">NewArg<sp/><sp/><sp/><sp/><sp/>=<sp/>std::tuple_element_t&lt;i,<sp/>NewArgs&gt;;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>name<sp/>=<sp/>std::string(</highlight><highlight class="stringliteral">&quot;add&quot;</highlight><highlight class="normal">)<sp/>+</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(i<sp/>==<sp/>0<sp/><sp/><sp/><sp/><sp/>?<sp/></highlight><highlight class="stringliteral">&quot;Scalar&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>(i<sp/>==<sp/>1)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;Vector&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;Matrix&quot;</highlight><highlight class="normal">)<sp/>+</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string(</highlight><highlight class="stringliteral">&quot;CallBack&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Traits<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="a02054" kindref="compound">Ikarus::traits::FunctionTraits&lt;F&gt;</ref>;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lastIndex<sp/>=<sp/>Traits::numberOfArguments<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>From<sp/>Python<sp/>we<sp/>need<sp/>a<sp/>callback<sp/>that<sp/>accepts<sp/>the<sp/>wrapped<sp/>types<sp/>since<sp/>otherwise<sp/>Python</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>creates<sp/>copies<sp/>and<sp/>no<sp/>modification<sp/>is<sp/>possible<sp/>Therefore,<sp/>from<sp/>Python<sp/>we<sp/>get<sp/>a<sp/>callback<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>style<sp/>of<sp/>Fmod=<sp/>std::function&lt;void(...,Wrapped&lt;Type&gt;)&gt;<sp/>but<sp/>in<sp/>the<sp/>assembler<sp/>we<sp/>store<sp/>can</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>only<sp/>store<sp/>F=std::function&lt;void(...,Type&amp;)&gt;<sp/>wrapFunctionAndReplaceLastType<sp/>takes<sp/>care<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>and<sp/>wraps<sp/>the<sp/>&quot;Fmod&quot;<sp/>call<sp/>inside<sp/>a<sp/>&quot;F&quot;<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">FMod<sp/>=</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="a02066" kindref="compound">Ikarus::traits::ChangeArgTypeAtPos&lt;F, lastIndex, NewArg&gt;::NewFunctionType</ref>;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cls.def(name.c_str(),<sp/>[&amp;](<ref refid="a01278" kindref="compound">AssemblerManipulator</ref>&amp;<sp/>self,<sp/>FMod<sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>F<sp/>fOrig<sp/>=<sp/>Impl::wrapFunctionAndReplaceLastType&lt;NewArg&gt;(std::forward&lt;FMod&gt;(f));</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.bind(std::move(fOrig));</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="111"><highlight class="normal">}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Ikarus::Python</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/__w/ikarus/ikarus/repo/ikarus/python/assembler/flatassemblermanipulator.hh"/>
  </compounddef>
</doxygen>
