<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="a00047" kind="file" language="C++">
    <compoundname>concepts.hh</compoundname>
    <includes local="no">concepts</includes>
    <includes local="no">type_traits</includes>
    <includes local="no">utility</includes>
    <includes local="no">vector</includes>
    <includes local="no">dune/functions/functionspacebases/basistags.hh</includes>
    <includes local="no">dune/functions/functionspacebases/lagrangebasis.hh</includes>
    <includes local="no">Eigen/Dense</includes>
    <includes local="no">Eigen/Sparse</includes>
    <includes local="no">autodiff/forward/dual/dual.hpp</includes>
    <includes refid="a00176" local="yes">ikarus/assembler/dirichletbcenforcement.hh</includes>
    <includes refid="a00242" local="yes">ikarus/finiteelements/mechanics/materials/tags.hh</includes>
    <includes refid="a00011" local="no">ikarus/utils/traits.hh</includes>
    <includedby refid="a00164" local="no">assemblermanipulatorbuildingblocks.hh</includedby>
    <includedby refid="a02882" local="no">dirichletvalues.hh</includedby>
    <includedby refid="a00272" local="no">enhancedassumedstrains.hh</includedby>
    <includedby refid="a00302" local="no">fetraits.hh</includedby>
    <includedby refid="a00050" local="no">functionhelper.hh</includedby>
    <includedby refid="a02858" local="no">interface.hh</includedby>
    <includedby refid="a00023" local="yes">linearalgebrahelper.hh</includedby>
    <includedby refid="a00218" local="no">material.hh</includedby>
    <includedby refid="a00158" local="no">newtonraphson.hh</includedby>
    <includedby refid="a00155" local="no">newtonraphsonwithscalarsubsidiaryfunction.hh</includedby>
    <includedby refid="a00197" local="no">pathfollowingfunctions.hh</includedby>
    <includedby refid="a00323" local="no">resultfunction.hh</includedby>
    <includedby refid="a00032" local="no">tensorutils.hh</includedby>
    <includedby refid="a00017" local="no">traversal.hh</includedby>
    <includedby refid="a00248" local="no">vanishinghelpers.hh</includedby>
    <includedby refid="a00245" local="no">vanishingstress.hh</includedby>
    <includedby refid="a00230" local="no">volume.hh</includedby>
    <includedby refid="a02867" local="no">vtkwriter.hh</includedby>
    <incdepgraph>
      <node id="11">
        <label>ikarus/assembler/dirichletbcenforcement.hh</label>
        <link refid="a00176"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>ikarus/finiteelements/mechanics/materials/tags.hh</label>
        <link refid="a00242"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>concepts.hh</label>
        <link refid="a00047"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>ikarus/utils/makeenum.hh</label>
        <link refid="a00005"/>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>ikarus/utils/traits.hh</label>
        <link refid="a00011"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>Eigen/Dense</label>
      </node>
      <node id="9">
        <label>Eigen/Sparse</label>
      </node>
      <node id="10">
        <label>autodiff/forward/dual/dual.hpp</label>
      </node>
      <node id="2">
        <label>concepts</label>
      </node>
      <node id="13">
        <label>dune/common/exceptions.hh</label>
      </node>
      <node id="18">
        <label>dune/common/hybridutilities.hh</label>
      </node>
      <node id="6">
        <label>dune/functions/functionspacebases/basistags.hh</label>
      </node>
      <node id="7">
        <label>dune/functions/functionspacebases/lagrangebasis.hh</label>
      </node>
      <node id="16">
        <label>functional</label>
      </node>
      <node id="17">
        <label>tuple</label>
      </node>
      <node id="3">
        <label>type_traits</label>
      </node>
      <node id="4">
        <label>utility</label>
      </node>
      <node id="5">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>assemblermanipulatorbuildingblocks.hh</label>
        <link refid="a00164"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>assemblermanipulatorfuser.hh</label>
        <link refid="a00173"/>
      </node>
      <node id="5">
        <label>interface.hh</label>
        <link refid="a02855"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>simpleassemblers.hh</label>
        <link refid="a00170"/>
      </node>
      <node id="33">
        <label>adaptivestepsizing.hh</label>
        <link refid="a00200"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>pathfollowing.hh</label>
        <link refid="a00194"/>
      </node>
      <node id="34">
        <label>pathfollowing.inl</label>
        <link refid="a00188"/>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>pathfollowingfunctions.hh</label>
        <link refid="a00197"/>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>autodifffe.hh</label>
        <link refid="a00296"/>
      </node>
      <node id="9">
        <label>febase.hh</label>
        <link refid="a00317"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>fefactory.hh</label>
        <link refid="a00311"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="60">
        <label>fehelper.hh</label>
        <link refid="a00299"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>ferequirements.hh</label>
        <link refid="a00314"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>feresulttypes.hh</label>
        <link refid="a00305"/>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>fetraits.hh</label>
        <link refid="a00302"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>eas2d.hh</label>
        <link refid="a00266"/>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>eas3d.hh</label>
        <link refid="a00269"/>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>easvariants.hh</label>
        <link refid="a00281"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>enhancedassumedstrains.hh</label>
        <link refid="a00272"/>
      </node>
      <node id="37">
        <label>kirchhoffloveshell.hh</label>
        <link refid="a00290"/>
      </node>
      <node id="18">
        <label>linearelastic.hh</label>
        <link refid="a00284"/>
      </node>
      <node id="54">
        <label>loads.hh</label>
        <link refid="a00287"/>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>traction.hh</label>
        <link refid="a00233"/>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>volume.hh</label>
        <link refid="a00230"/>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>materials.hh</label>
        <link refid="a02861"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>interface.hh</label>
        <link refid="a02858"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>linearelasticity.hh</label>
        <link refid="a00257"/>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>neohooke.hh</label>
        <link refid="a00251"/>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>strainconversions.hh</label>
        <link refid="a00263"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>svk.hh</label>
        <link refid="a00260"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>vanishinghelpers.hh</label>
        <link refid="a00248"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>vanishingstrain.hh</label>
        <link refid="a00254"/>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>vanishingstress.hh</label>
        <link refid="a00245"/>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>nonlinearelastic.hh</label>
        <link refid="a00239"/>
      </node>
      <node id="55">
        <label>truss.hh</label>
        <link refid="a00275"/>
      </node>
      <node id="13">
        <label>mixin.hh</label>
        <link refid="a00308"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>resultevaluators.hh</label>
        <link refid="a00326"/>
      </node>
      <node id="38">
        <label>resultfunction.hh</label>
        <link refid="a00323"/>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>vtkwriter.hh</label>
        <link refid="a02867"/>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>flatassembler.hh</label>
        <link refid="a00206"/>
        <childnode refid="51" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>flatassemblermanipulator.hh</label>
        <link refid="a00209"/>
      </node>
      <node id="48">
        <label>basis.hh</label>
        <link refid="a02873"/>
      </node>
      <node id="49">
        <label>dirichletvalues.hh</label>
        <link refid="a02879"/>
      </node>
      <node id="11">
        <label>fe.hh</label>
        <link refid="a00221"/>
      </node>
      <node id="19">
        <label>material.hh</label>
        <link refid="a00218"/>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>vtkwriter.hh</label>
        <link refid="a02870"/>
      </node>
      <node id="29">
        <label>newtonraphson.hh</label>
        <link refid="a00158"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>newtonraphsonwithscalarsubsidiaryfunction.hh</label>
        <link refid="a00155"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>nonlinearsolverfactory.hh</label>
        <link refid="a00161"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>trustregion.hh</label>
        <link refid="a00149"/>
      </node>
      <node id="1">
        <label>concepts.hh</label>
        <link refid="a00047"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>defaultfunctions.hh</label>
        <link refid="a00065"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>dirichletvalues.hh</label>
        <link refid="a02882"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>functionhelper.hh</label>
        <link refid="a00050"/>
      </node>
      <node id="27">
        <label>linearalgebrahelper.hh</label>
        <link refid="a00023"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>nonlinopfactory.hh</label>
        <link refid="a00026"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>tensorutils.hh</label>
        <link refid="a00032"/>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>traversal.hh</label>
        <link refid="a00017"/>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>_ikarus.cc</label>
        <link refid="a00347"/>
      </node>
      <node id="20">
        <label>materials.hh</label>
        <link refid="a02864"/>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>utils.hh</label>
        <link refid="a00335"/>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innernamespace refid="a00396">Eigen</innernamespace>
    <innernamespace refid="a00384">Ikarus</innernamespace>
    <innernamespace refid="a00402">Ikarus::Concepts</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="a00047_1ac8757039febcebb4741b376dc8258d6d" prot="public" static="no">
        <name>MAKE_EIGEN_FIXED_VECTOR_CONCEPT</name>
        <param><defname>Size</defname></param>
        <initializer>  template &lt;typename V&gt;                       \
  concept EigenVector##Size =                 \
      static_cast&lt;bool&gt;(V::IsVectorAtCompileTime) and static_cast&lt;bool&gt;(V::SizeAtCompileTime == Size);</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/concepts.hh" line="365" column="9" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/concepts.hh" bodystart="365" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="a00047_1a5556bdb5e6cc63333c07f9ef487fb478" prot="public" static="no">
        <name>MAKE_EIGEN_FIXED_MATRIX_CONCEPT</name>
        <param><defname>Size1</defname></param>
        <param><defname>Size2</defname></param>
        <initializer>  template &lt;typename M&gt;                                                                                         \
  concept EigenMatrix##Size1##Size2 = static_cast&lt;bool&gt;(std::remove_cvref_t&lt;M&gt;::RowsAtCompileTime == Size1) and \
                                      static_cast&lt;bool&gt;(std::remove_cvref_t&lt;M&gt;::ColsAtCompileTime == Size2);</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/concepts.hh" line="377" column="9" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/concepts.hh" bodystart="377" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="a00047_1aba360f830591dbc713b7fa692d614101" prot="public" static="no">
        <name>MAKE_EIGEN_FIXED_MATRIX_OR_VOIGT_CONCEPT</name>
        <param><defname>Size1</defname></param>
        <param><defname>Size2</defname></param>
        <initializer>  template &lt;typename M&gt;                                        \
  concept EigenMatrixOrVoigtNotation##Size1 = EigenMatrix##Size1##Size1&lt;M&gt; or EigenVector##Size2&lt;M&gt;;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/concepts.hh" line="419" column="9" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/concepts.hh" bodystart="419" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Several concepts. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>SPDX-FileCopyrightText:<sp/>2021-2025<sp/>The<sp/>Ikarus<sp/>Developers<sp/>mueller@ibb.uni-stuttgart.de</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPDX-License-Identifier:<sp/>LGPL-3.0-or-later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;concepts&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;dune/functions/functionspacebases/basistags.hh&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;dune/functions/functionspacebases/lagrangebasis.hh&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Eigen/Dense&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Eigen/Sparse&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;autodiff/forward/dual/dual.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="a00176" kindref="compound">ikarus/assembler/dirichletbcenforcement.hh</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="a00242" kindref="compound">ikarus/finiteelements/mechanics/materials/tags.hh</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="a00011" kindref="compound">ikarus/utils/traits.hh</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="a00396" kindref="compound">Eigen</ref><sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Derived&gt;</highlight></codeline>
<codeline lineno="30" refid="a01748" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="a01748" kindref="compound">EigenBase</ref>;</highlight></codeline>
<codeline lineno="31"><highlight class="normal">}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="a00384" kindref="compound">Ikarus</ref><sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;auto<sp/>matrixIndexPair,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MaterialImpl&gt;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">VanishingStress;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Derived&gt;</highlight></codeline>
<codeline lineno="38" refid="a00384_1ac2c6469be19ce4ef2e630bfa1c5a5e24" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="a00384_1ac2c6469be19ce4ef2e630bfa1c5a5e24" kindref="member">transpose</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01748" kindref="compound">Eigen::EigenBase&lt;Derived&gt;</ref>&amp;<sp/>A);</highlight></codeline>
<codeline lineno="39" refid="a00402" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Concepts<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Basis&gt;</highlight></codeline>
<codeline lineno="50" refid="a01944" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="a01944" kindref="compound">FlatInterLeavedBasis</ref><sp/>=<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>std::is_same_v&lt;typename<sp/>Basis::PreBasis::IndexMergingStrategy,<sp/>Dune::Functions::BasisFactory::FlatInterleaved&gt;;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Impl<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">U,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">LagrangeNodeHelper<sp/>:<sp/>std::false_type</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">U,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>GV,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R&gt;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">LagrangeNodeHelper&lt;U,<sp/>U&lt;GV,<sp/>k,<sp/>R&gt;&gt;<sp/>:<sp/>std::true_type</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">U,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k&gt;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">LagrangeNodeHelperOfOrder<sp/>:<sp/>std::false_type</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">U,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>GV,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R&gt;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">LagrangeNodeHelperOfOrder&lt;U,<sp/>U&lt;GV,<sp/>k,<sp/>R&gt;,<sp/>k&gt;<sp/>:<sp/>std::true_type</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Impl</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="82" refid="a01945" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="a01945" kindref="compound">LagrangeNode</ref><sp/>=<sp/>Impl::LagrangeNodeHelper&lt;Dune::Functions::LagrangeNode,<sp/>N&gt;::value;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>order&gt;</highlight></codeline>
<codeline lineno="92" refid="a01946" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="a01946" kindref="compound">LagrangeNodeOfOrder</ref><sp/>=<sp/>Impl::LagrangeNodeHelperOfOrder&lt;Dune::Functions::LagrangeNode,<sp/>N,<sp/>order&gt;::value;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>B&gt;</highlight></codeline>
<codeline lineno="103" refid="a01947" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="a01947" kindref="compound">FlatLexicographicBasis</ref><sp/>=<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>std::is_same_v&lt;typename<sp/>B::PreBasis::IndexMergingStrategy,<sp/>Dune::Functions::BasisFactory::FlatLexicographic&gt;;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>B&gt;</highlight></codeline>
<codeline lineno="116" refid="a01948" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="a01948" kindref="compound">FlatIndexBasis</ref><sp/>=<sp/><ref refid="a01947" kindref="compound">FlatLexicographicBasis&lt;B&gt;</ref><sp/>or<sp/><ref refid="a01944" kindref="compound">FlatInterLeavedBasis&lt;B&gt;</ref>;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Basis&gt;</highlight></codeline>
<codeline lineno="127" refid="a01949" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="a01949" kindref="compound">BlockedInterLeavedBasis</ref><sp/>=<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>std::is_same_v&lt;typename<sp/>Basis::PreBasis::IndexMergingStrategy,<sp/>Dune::Functions::BasisFactory::BlockedInterleaved&gt;;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>B&gt;</highlight></codeline>
<codeline lineno="140" refid="a01950" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="a01950" kindref="compound">BlockedLexicographicBasis</ref><sp/>=<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>std::is_same_v&lt;typename<sp/>B::PreBasis::IndexMergingStrategy,<sp/>Dune::Functions::BasisFactory::BlockedLexicographic&gt;;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DLB&gt;</highlight></codeline>
<codeline lineno="150" refid="a01951" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="a01951" kindref="compound">DuneLocalBasis</ref><sp/>=<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(DLB&amp;<sp/>duneLocalBasis)<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DLB::Traits::RangeType;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DLB::Traits::JacobianType;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>DLB::Traits::dimDomain;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DLB::Traits::DomainType;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DLB::Traits::DomainFieldType;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DLB::Traits::RangeFieldType;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>duneLocalBasis.evaluateFunction(std::declval&lt;typename<sp/>DLB::Traits::DomainType&gt;(),</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::declval&lt;std::vector&lt;typename<sp/>DLB::Traits::RangeType&gt;&amp;&gt;());</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>duneLocalBasis.evaluateJacobian(std::declval&lt;typename<sp/>DLB::Traits::DomainType&gt;(),</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::declval&lt;std::vector&lt;typename<sp/>DLB::Traits::JacobianType&gt;&amp;&gt;());</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>B&gt;</highlight></codeline>
<codeline lineno="175" refid="a01952" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="a01952" kindref="compound">BlockedIndexBasis</ref><sp/>=<sp/><ref refid="a01950" kindref="compound">BlockedLexicographicBasis&lt;B&gt;</ref><sp/>or<sp/><ref refid="a01949" kindref="compound">BlockedInterLeavedBasis&lt;B&gt;</ref>;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>PF,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>NLO,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SA&gt;</highlight></codeline>
<codeline lineno="185" refid="a01953" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="a01953" kindref="compound">PathFollowingStrategy</ref><sp/>=<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(PF<sp/>pft,<sp/>NLO<sp/>nop,<sp/>SA<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>pft(args)<sp/>}<sp/>-&gt;<sp/>std::same_as&lt;void&gt;;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>pft.initialPrediction(nop,<sp/>args)<sp/>}<sp/>-&gt;<sp/>std::same_as&lt;void&gt;;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>pft.intermediatePrediction(nop,<sp/>args)<sp/>}<sp/>-&gt;<sp/>std::same_as&lt;void&gt;;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ASS,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>NLSI,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SA,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>NonLinearOperator&gt;</highlight></codeline>
<codeline lineno="200" refid="a01954" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="a01954" kindref="compound">AdaptiveStepSizingStrategy</ref><sp/>=<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(ASS<sp/>adaptiveStepSizing,<sp/>NLSI<sp/>info,<sp/>SA<sp/>args,<sp/><ref refid="a00384_1abcf5978fa18a6e0aadc5e19c4a0edaa9" kindref="member">NonLinearOperator</ref><sp/>nop)<sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>adaptiveStepSizing(info,<sp/>args,<sp/>nop)<sp/>}<sp/>-&gt;<sp/>std::same_as&lt;void&gt;;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>adaptiveStepSizing.targetIterations()<sp/>}<sp/>-&gt;<sp/>std::same_as&lt;int&gt;;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>adaptiveStepSizing.setTargetIterations(std::declval&lt;int&gt;())<sp/>}<sp/>-&gt;<sp/>std::same_as&lt;void&gt;;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>LS,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V&gt;</highlight></codeline>
<codeline lineno="215" refid="a01955" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="a01955" kindref="compound">LinearSolverCheck</ref><sp/>=<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(LS&amp;<sp/>linearSolver,<sp/>M&amp;<sp/>A,<sp/>V&amp;<sp/>vec)<sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>linearSolver.analyzePattern(A);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>linearSolver.factorize(A);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>linearSolver.solve(vec,<sp/>vec);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>NLS&gt;</highlight></codeline>
<codeline lineno="229" refid="a01956" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="a01956" kindref="compound">NonLinearSolverCheckForPathFollowing</ref><sp/>=<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>std::tuple_size&lt;typename<sp/>NLS::NonLinearOperator::ParameterValues&gt;::value<sp/>==<sp/>2;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>not(std::is_same_v&lt;typename<sp/>NLS::NonLinearOperator::ValueType,<sp/>double&gt;<sp/>and</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((traits::isSpecializationTypeAndNonTypes&lt;Eigen::Matrix,</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>NLS::NonLinearOperator::DerivativeType&gt;::value)<sp/>or</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(traits::isSpecializationTypeNonTypeAndType&lt;Eigen::SparseMatrix,</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>NLS::NonLinearOperator::DerivativeType&gt;::value)));</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R&gt;</highlight></codeline>
<codeline lineno="246" refid="a01957" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="a01957" kindref="compound">MultiplyAble</ref><sp/>=<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(L<sp/>x,<sp/>R<sp/>y)<sp/>{<sp/>x*<sp/>y;<sp/>};</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R&gt;</highlight></codeline>
<codeline lineno="256" refid="a01958" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="a01958" kindref="compound">AddAble</ref><sp/>=<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(L<sp/>x,<sp/>R<sp/>y)<sp/>{<sp/>x<sp/>+<sp/>y;<sp/>};</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R&gt;</highlight></codeline>
<codeline lineno="266" refid="a01959" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="a01959" kindref="compound">SubstractAble</ref><sp/>=<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(L<sp/>x,<sp/>R<sp/>y)<sp/>{<sp/>x<sp/>-<sp/>y;<sp/>};</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R&gt;</highlight></codeline>
<codeline lineno="277" refid="a01960" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="a01960" kindref="compound">MultiplyAssignAble</ref><sp/>=<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(L<sp/>x,<sp/>R<sp/>y)<sp/>{<sp/>x<sp/>*=<sp/>y;<sp/>};</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R&gt;</highlight></codeline>
<codeline lineno="288" refid="a01961" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="a01961" kindref="compound">DivideAssignAble</ref><sp/>=<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(L<sp/>x,<sp/>R<sp/>y)<sp/>{<sp/>x<sp/>/=<sp/>y;<sp/>};</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R&gt;</highlight></codeline>
<codeline lineno="299" refid="a01962" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="a01962" kindref="compound">AddAssignAble</ref><sp/>=<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(L<sp/>x,<sp/>R<sp/>y)<sp/>{<sp/>x<sp/>+=<sp/>y;<sp/>};</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R&gt;</highlight></codeline>
<codeline lineno="310" refid="a01963" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="a01963" kindref="compound">SubstractAssignAble</ref><sp/>=<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(L<sp/>x,<sp/>R<sp/>y)<sp/>{<sp/>x<sp/>-=<sp/>y;<sp/>};</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R&gt;</highlight></codeline>
<codeline lineno="320" refid="a01964" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="a01964" kindref="compound">DivideAble</ref><sp/>=<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(L<sp/>x,<sp/>R<sp/>y)<sp/>{<sp/>x<sp/>/<sp/>y;<sp/>};</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L&gt;</highlight></codeline>
<codeline lineno="329" refid="a01965" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="a01965" kindref="compound">NegateAble</ref><sp/>=<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(L<sp/>x)<sp/>{<sp/>-x;<sp/>};</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L&gt;</highlight></codeline>
<codeline lineno="338" refid="a01966" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="a01966" kindref="compound">TransposeAble</ref><sp/>=<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(L<sp/>x)<sp/>{<sp/><ref refid="a00384_1ac2c6469be19ce4ef2e630bfa1c5a5e24" kindref="member">transpose</ref>(x);<sp/>};</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Op,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="347" refid="a01967" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="a01967" kindref="compound">IsFunctorWithArgs</ref><sp/>=<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(Op<sp/>op,<sp/>Args...<sp/>args)<sp/>{<sp/>op(args...);<sp/>};</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V&gt;</highlight></codeline>
<codeline lineno="355" refid="a01968" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="a01968" kindref="compound">EigenVector</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(V::IsVectorAtCompileTime);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M&gt;</highlight></codeline>
<codeline lineno="363" refid="a01969" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="a01969" kindref="compound">EigenMatrix</ref><sp/>=<sp/>traits::isSpecializationTypeAndNonTypes&lt;Eigen::Matrix,<sp/>M&gt;::value;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365" refid="a00047_1ac8757039febcebb4741b376dc8258d6d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAKE_EIGEN_FIXED_VECTOR_CONCEPT(Size)<sp/>\</highlight></codeline>
<codeline lineno="366"><highlight class="preprocessor"><sp/><sp/>template<sp/>&lt;typename<sp/>V&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="367"><highlight class="preprocessor"><sp/><sp/>concept<sp/>EigenVector##Size<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="368"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;bool&gt;(V::IsVectorAtCompileTime)<sp/>and<sp/>static_cast&lt;bool&gt;(V::SizeAtCompileTime<sp/>==<sp/>Size);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><ref refid="a00047_1ac8757039febcebb4741b376dc8258d6d" kindref="member">MAKE_EIGEN_FIXED_VECTOR_CONCEPT</ref>(1)</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><ref refid="a00047_1ac8757039febcebb4741b376dc8258d6d" kindref="member">MAKE_EIGEN_FIXED_VECTOR_CONCEPT</ref>(2)</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><ref refid="a00047_1ac8757039febcebb4741b376dc8258d6d" kindref="member">MAKE_EIGEN_FIXED_VECTOR_CONCEPT</ref>(3)</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><ref refid="a00047_1ac8757039febcebb4741b376dc8258d6d" kindref="member">MAKE_EIGEN_FIXED_VECTOR_CONCEPT</ref>(4)</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><ref refid="a00047_1ac8757039febcebb4741b376dc8258d6d" kindref="member">MAKE_EIGEN_FIXED_VECTOR_CONCEPT</ref>(5)</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><ref refid="a00047_1ac8757039febcebb4741b376dc8258d6d" kindref="member">MAKE_EIGEN_FIXED_VECTOR_CONCEPT</ref>(6)</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377" refid="a00047_1a5556bdb5e6cc63333c07f9ef487fb478" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAKE_EIGEN_FIXED_MATRIX_CONCEPT(Size1,<sp/>Size2)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="378"><highlight class="preprocessor"><sp/><sp/>template<sp/>&lt;typename<sp/>M&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="379"><highlight class="preprocessor"><sp/><sp/>concept<sp/>EigenMatrix##Size1##Size2<sp/>=<sp/>static_cast&lt;bool&gt;(std::remove_cvref_t&lt;M&gt;::RowsAtCompileTime<sp/>==<sp/>Size1)<sp/>and<sp/>\</highlight></codeline>
<codeline lineno="380"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;bool&gt;(std::remove_cvref_t&lt;M&gt;::ColsAtCompileTime<sp/>==<sp/>Size2);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><ref refid="a00047_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(1,<sp/>1)</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><ref refid="a00047_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(1,<sp/>2)</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><ref refid="a00047_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(2,<sp/>2)</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><ref refid="a00047_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(1,<sp/>3)</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><ref refid="a00047_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(2,<sp/>3)</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><ref refid="a00047_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(3,<sp/>2)</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><ref refid="a00047_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(3,<sp/>3)</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><ref refid="a00047_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(1,<sp/>4)</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><ref refid="a00047_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(2,<sp/>4)</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><ref refid="a00047_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(3,<sp/>4)</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><ref refid="a00047_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(4,<sp/>2)</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><ref refid="a00047_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(4,<sp/>3)</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><ref refid="a00047_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(4,<sp/>4)</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><ref refid="a00047_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(1,<sp/>5)</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><ref refid="a00047_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(2,<sp/>5)</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><ref refid="a00047_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(3,<sp/>5)</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><ref refid="a00047_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(4,<sp/>5)</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><ref refid="a00047_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(5,<sp/>2)</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><ref refid="a00047_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(5,<sp/>3)</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><ref refid="a00047_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(5,<sp/>4)</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><ref refid="a00047_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(5,<sp/>5)</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><ref refid="a00047_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(1,<sp/>6)</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><ref refid="a00047_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(2,<sp/>6)</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><ref refid="a00047_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(3,<sp/>6)</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><ref refid="a00047_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(4,<sp/>6)</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><ref refid="a00047_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(5,<sp/>6)</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><ref refid="a00047_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(6,<sp/>2)</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><ref refid="a00047_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(6,<sp/>3)</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><ref refid="a00047_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(6,<sp/>4)</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><ref refid="a00047_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(6,<sp/>5)</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><ref refid="a00047_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(6,<sp/>6)</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419" refid="a00047_1aba360f830591dbc713b7fa692d614101" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAKE_EIGEN_FIXED_MATRIX_OR_VOIGT_CONCEPT(Size1,<sp/>Size2)<sp/>\</highlight></codeline>
<codeline lineno="420"><highlight class="preprocessor"><sp/><sp/>template<sp/>&lt;typename<sp/>M&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="421"><highlight class="preprocessor"><sp/><sp/>concept<sp/>EigenMatrixOrVoigtNotation##Size1<sp/>=<sp/>EigenMatrix##Size1##Size1&lt;M&gt;<sp/>or<sp/>EigenVector##Size2&lt;M&gt;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><ref refid="a00047_1aba360f830591dbc713b7fa692d614101" kindref="member">MAKE_EIGEN_FIXED_MATRIX_OR_VOIGT_CONCEPT</ref>(1,<sp/>1)</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><ref refid="a00047_1aba360f830591dbc713b7fa692d614101" kindref="member">MAKE_EIGEN_FIXED_MATRIX_OR_VOIGT_CONCEPT</ref>(2,<sp/>3)</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><ref refid="a00047_1aba360f830591dbc713b7fa692d614101" kindref="member">MAKE_EIGEN_FIXED_MATRIX_OR_VOIGT_CONCEPT</ref>(3,<sp/>6)</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/>namespace<sp/>Impl<sp/>{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MaterialToCheck,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Material&gt;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">consteval</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isMaterial()<sp/>{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(traits::isSpecialization&lt;MaterialToCheck,<sp/>Material&gt;::value)</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(<ref refid="a01492_1a6e16de35bf2d955d777a8441e939a20b" kindref="member">Material::isReduced</ref>)<sp/>{</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(traits::isSpecialization&lt;MaterialToCheck,<sp/>typename<sp/>Material::Underlying&gt;::value)<sp/>{</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Impl</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MaterialToCheck,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="a00373_1gga05ac785124262c1e323d2f937d520a1bad92a8333dd3ccb895cc65f7455b71206" kindref="member">Material</ref>&gt;</highlight></codeline>
<codeline lineno="457" refid="a01970" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="a01970" kindref="compound">IsMaterial</ref><sp/>=<sp/>Impl::isMaterial&lt;MaterialToCheck,<sp/>Material&gt;();</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Impl<sp/>{</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="a01973" kindref="compound">ResultType</ref><sp/>=<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(T<sp/>t)<sp/>{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::type;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>nested<sp/>type<sp/>&apos;type&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::Vectorizer;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>nested<sp/>type<sp/>&apos;Vectorizer&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::Matricizer;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>nested<sp/>type<sp/>&apos;Matricizer&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><ref refid="a00384_1aef80b6b5b45dcfbea4f722f51a84f53f" kindref="member">toString</ref>(t)<sp/>}<sp/>-&gt;<sp/>std::same_as&lt;std::string&gt;;<sp/></highlight><highlight class="comment">//<sp/>The<sp/>toString<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Impl</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MAT&gt;</highlight></codeline>
<codeline lineno="476" refid="a01972" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="a01972" kindref="compound">GeometricallyLinearMaterial</ref><sp/>=<sp/>MAT::strainTag<sp/>==<sp/><ref refid="a00373_1ggacef1e451de1a99845c59d7391064fb8fa9a932b3cb396238423eb2f33ec17d6aa" kindref="member">StrainTags::linear</ref>;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RT&gt;</highlight></codeline>
<codeline lineno="488" refid="a01973" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="a01973" kindref="compound">ResultType</ref><sp/>=</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Impl::ResultType&lt;RT&lt;double,<sp/>1,<sp/>1&gt;&gt;<sp/>or<sp/>Impl::ResultType&lt;RT&lt;double,<sp/>1,<sp/>2&gt;&gt;<sp/>or<sp/>Impl::ResultType&lt;RT&lt;double,<sp/>1,<sp/>3&gt;&gt;<sp/>or</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Impl::ResultType&lt;RT&lt;double,<sp/>2,<sp/>3&gt;&gt;<sp/>or<sp/>Impl::ResultType&lt;RT&lt;double,<sp/>3,<sp/>3&gt;&gt;;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="500" refid="a01974" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="a01974" kindref="compound">FlatAssembler</ref><sp/>=<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(T<sp/>t,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::FERequirement&amp;<sp/>req,</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::AffordanceCollectionType<sp/>affordance,<sp/><ref refid="a00384_1a9f83fad9f4c149f249165a13f2370eec" kindref="member">DBCOption</ref><sp/>dbcOption)<sp/>{</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>t.requirement()<sp/>}<sp/>-&gt;<sp/>std::convertible_to&lt;typename<sp/>T::FERequirement&amp;&gt;;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>t.affordanceCollection()<sp/>}<sp/>-&gt;<sp/>std::convertible_to&lt;typename<sp/>T::AffordanceCollectionType&gt;;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>t.dBCOption()<sp/>}<sp/>-&gt;<sp/>std::convertible_to&lt;DBCOption&gt;;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>t.bind(req,<sp/>affordance,<sp/>dbcOption)<sp/>}<sp/>-&gt;<sp/>std::same_as&lt;void&gt;;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>t.bind(req)<sp/>}<sp/>-&gt;<sp/>std::same_as&lt;void&gt;;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>t.bind(affordance)<sp/>}<sp/>-&gt;<sp/>std::same_as&lt;void&gt;;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>t.bind(dbcOption)<sp/>}<sp/>-&gt;<sp/>std::same_as&lt;void&gt;;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>t.bound()<sp/>}<sp/>-&gt;<sp/>std::convertible_to&lt;bool&gt;;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>t.boundToRequirement()<sp/>}<sp/>-&gt;<sp/>std::convertible_to&lt;bool&gt;;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>t.boundToAffordanceCollection()<sp/>}<sp/>-&gt;<sp/>std::convertible_to&lt;bool&gt;;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>t.boundToDBCOption()<sp/>}<sp/>-&gt;<sp/>std::convertible_to&lt;bool&gt;;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>t.estimateOfConnectivity()<sp/>}<sp/>-&gt;<sp/>std::convertible_to&lt;size_t&gt;;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>t.createFullVector(std::declval&lt;Eigen::Ref&lt;const<sp/>Eigen::VectorXd&gt;&gt;())<sp/>}<sp/>-&gt;<sp/>std::convertible_to&lt;Eigen::VectorXd&gt;;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>t.constraintsBelow(std::declval&lt;size_t&gt;())<sp/>}<sp/>-&gt;<sp/>std::convertible_to&lt;size_t&gt;;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>t.isConstrained(std::declval&lt;size_t&gt;())<sp/>}<sp/>-&gt;<sp/>std::convertible_to&lt;bool&gt;;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>t.size()<sp/>}<sp/>-&gt;<sp/>std::convertible_to&lt;size_t&gt;;</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>t.reducedSize()<sp/>}<sp/>-&gt;<sp/>std::convertible_to&lt;size_t&gt;;</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="531" refid="a01975" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="a01975" kindref="compound">ScalarFlatAssembler</ref><sp/>=</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a01974" kindref="compound">Concepts::FlatAssembler&lt;T&gt;</ref><sp/>and<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(T<sp/>t,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::FERequirement&amp;<sp/>req,</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::AffordanceCollectionType<sp/>affordance,<sp/><ref refid="a00384_1a9f83fad9f4c149f249165a13f2370eec" kindref="member">DBCOption</ref><sp/>dbcOption)<sp/>{</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>t.scalar(req,<sp/>affordance.scalarAffordance())<sp/>}<sp/>-&gt;<sp/>std::convertible_to&lt;const<sp/>double&amp;&gt;;</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>t.scalar()<sp/>}<sp/>-&gt;<sp/>std::convertible_to&lt;const<sp/>double&amp;&gt;;</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="545" refid="a01976" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="a01976" kindref="compound">VectorFlatAssembler</ref><sp/>=<sp/><ref refid="a01975" kindref="compound">Concepts::ScalarFlatAssembler&lt;T&gt;</ref><sp/>and</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(T<sp/>t,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::FERequirement&amp;<sp/>req,</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::AffordanceCollectionType<sp/>affordance,<sp/><ref refid="a00384_1a9f83fad9f4c149f249165a13f2370eec" kindref="member">DBCOption</ref><sp/>dbcOption)<sp/>{</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t.vector(req,<sp/>affordance.vectorAffordance(),<sp/>dbcOption)</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>-&gt;<sp/>std::convertible_to&lt;const<sp/>Eigen::VectorXd&amp;&gt;;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>t.vector(dbcOption)<sp/>}<sp/>-&gt;<sp/>std::convertible_to&lt;const<sp/>Eigen::VectorXd&amp;&gt;;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>t.vector()<sp/>}<sp/>-&gt;<sp/>std::convertible_to&lt;const<sp/>Eigen::VectorXd&amp;&gt;;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="562" refid="a01977" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="a01977" kindref="compound">MatrixFlatAssembler</ref><sp/>=<sp/><ref refid="a01976" kindref="compound">Concepts::VectorFlatAssembler&lt;T&gt;</ref><sp/>and</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(T<sp/>t,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::FERequirement&amp;<sp/>req,</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::AffordanceCollectionType<sp/>affordance,<sp/><ref refid="a00384_1a9f83fad9f4c149f249165a13f2370eec" kindref="member">DBCOption</ref><sp/>dbcOption)<sp/>{</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>t.matrix(req,<sp/>affordance.matrixAffordance(),<sp/>dbcOption)<sp/>};</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>t.matrix(dbcOption)<sp/>};</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>t.matrix()<sp/>};</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>adapted<sp/>from<sp/>/dune/dune-vtk/dune/vtk/utility/concepts.hh</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DC&gt;</highlight></codeline>
<codeline lineno="572" refid="a01978" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="a01978" kindref="compound">DataCollector</ref><sp/>=<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(DC<sp/>dc)<sp/>{</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DC::GridView;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>dc.update()<sp/>}<sp/>-&gt;<sp/>std::same_as&lt;void&gt;;</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>dc.numPoints()<sp/>}<sp/>-&gt;<sp/>std::convertible_to&lt;std::uint64_t&gt;;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>dc.numCells()<sp/>}<sp/>-&gt;<sp/>std::convertible_to&lt;std::uint64_t&gt;;</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>dc.gridView()<sp/>}<sp/>-&gt;<sp/>std::same_as&lt;const<sp/>typename<sp/>DC::GridView&amp;&gt;;</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>GV&gt;</highlight></codeline>
<codeline lineno="581" refid="a01979" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="a01979" kindref="compound">GridView</ref><sp/>=<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(GV<sp/>g)<sp/>{</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>GV::Grid;</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/>GV::dimension;</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/>GV::dimensionworld;</highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>g.grid()<sp/>};</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Impl<sp/>{</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">is_dual<sp/>:<sp/>std::false_type</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Specialization<sp/>for<sp/>Dual&lt;T,<sp/>U&gt;:<sp/>this<sp/>will<sp/>be<sp/>true<sp/>for<sp/>Dual<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">is_dual&lt;autodiff::detail::Dual&lt;T,<sp/>U&gt;&gt;<sp/>:<sp/>std::true_type</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Impl</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="608" refid="a01980" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="a01980" kindref="compound">AutodiffScalar</ref><sp/>=<sp/>Impl::is_dual&lt;T&gt;::value;</highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Concepts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Ikarus</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/__w/ikarus/ikarus/repo/ikarus/utils/concepts.hh"/>
  </compounddef>
</doxygen>
