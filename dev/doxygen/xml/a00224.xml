<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="a00224" kind="file" language="C++">
    <compoundname>registerpreelement.hh</compoundname>
    <includes local="no">dune/python/pybind11/pybind11.h</includes>
    <incdepgraph>
      <node id="1">
        <label>registerpreelement.hh</label>
        <link refid="a00224"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>dune/python/pybind11/pybind11.h</label>
      </node>
    </incdepgraph>
    <innernamespace refid="a00384">Ikarus</innernamespace>
    <innernamespace refid="a00398">Ikarus::Python</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>SPDX-FileCopyrightText:<sp/>2021-2025<sp/>The<sp/>Ikarus<sp/>Developers<sp/>mueller@ibb.uni-stuttgart.de</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPDX-License-Identifier:<sp/>LGPL-3.0-or-later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;dune/python/pybind11/pybind11.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="a00398" kindref="compound">Ikarus::Python</ref><sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">NonLinearElasticPre,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>options&gt;</highlight></codeline>
<codeline lineno="20" refid="a00398_1ab45b29a3ca18f1c8bf87263c60d14711" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a00398_1ab45b29a3ca18f1c8bf87263c60d14711" kindref="member">registerNonLinearElasticPre</ref>(pybind11::handle<sp/>scope,<sp/>pybind11::class_&lt;NonLinearElasticPre,<sp/>options...&gt;<sp/>cls)<sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="a01492" kindref="compound">Material</ref><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="a01528_1a4c8087e2be5010d73080ef779b7e28d4" kindref="member">NonLinearElasticPre::Material</ref>;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/>cls.def(<ref refid="a00384_1ac8243891c1b961e50a066140ab79a142" kindref="member">pybind11::init</ref>([](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01492" kindref="compound">Material</ref>&amp;<sp/>mat)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="a01528" kindref="compound">NonLinearElasticPre</ref>(mat);<sp/>}));</highlight></codeline>
<codeline lineno="23"><highlight class="normal">}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="a01472" kindref="compound">LinearElasticPre</ref>,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>options&gt;</highlight></codeline>
<codeline lineno="35" refid="a00398_1a04d0c82e615a65a1ba027cb77bbf784d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a00398_1a04d0c82e615a65a1ba027cb77bbf784d" kindref="member">registerLinearElasticPre</ref>(pybind11::handle<sp/>scope,<sp/>pybind11::class_&lt;LinearElasticPre,<sp/>options...&gt;<sp/>cls)<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="a01492" kindref="compound">Material</ref><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="a01472_1a25afe7c30b7dff97ee0b865ec636940d" kindref="member">LinearElasticPre::Material</ref>;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>cls.def(<ref refid="a00384_1ac8243891c1b961e50a066140ab79a142" kindref="member">pybind11::init</ref>([](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01492" kindref="compound">Material</ref>&amp;<sp/>mat)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="a01472" kindref="compound">LinearElasticPre</ref>(mat);<sp/>}));</highlight></codeline>
<codeline lineno="38"><highlight class="normal">}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="a01536" kindref="compound">TrussPre</ref>,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>options&gt;</highlight></codeline>
<codeline lineno="50" refid="a00398_1a5004d72f594d4ceecaebb33ee71f80cf" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a00398_1a5004d72f594d4ceecaebb33ee71f80cf" kindref="member">registerTrussPre</ref>(pybind11::handle<sp/>scope,<sp/>pybind11::class_&lt;TrussPre,<sp/>options...&gt;<sp/>cls)<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>cls.def(<ref refid="a00384_1ac8243891c1b961e50a066140ab79a142" kindref="member">pybind11::init</ref>([](</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>emod,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>area)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="a01536" kindref="compound">TrussPre</ref>({emod,<sp/>area});<sp/>}));</highlight></codeline>
<codeline lineno="52"><highlight class="normal">}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="a01456" kindref="compound">KirchhoffLoveShellPre</ref>,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>options&gt;</highlight></codeline>
<codeline lineno="64" refid="a00398_1a0ef1ab14030985bd8af2551f51ceeeb6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a00398_1a0ef1ab14030985bd8af2551f51ceeeb6" kindref="member">registerKirchhoffLoveShellPre</ref>(pybind11::handle<sp/>scope,<sp/>pybind11::class_&lt;KirchhoffLoveShellPre,<sp/>options...&gt;<sp/>cls)<sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>cls.def(<ref refid="a00384_1ac8243891c1b961e50a066140ab79a142" kindref="member">pybind11::init</ref>(</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>E,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>nu,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>h)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="a01456" kindref="compound">KirchhoffLoveShellPre</ref>({E,<sp/>nu},<sp/>h);<sp/>}));</highlight></codeline>
<codeline lineno="67"><highlight class="normal">}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">EASPre,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>options&gt;</highlight></codeline>
<codeline lineno="79" refid="a00398_1a79dfab8379c15a5c5da0d3e5a415f0a3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a00398_1a79dfab8379c15a5c5da0d3e5a415f0a3" kindref="member">registerEnhancedAssumedStrainsPre</ref>(pybind11::handle<sp/>scope,<sp/>pybind11::class_&lt;EASPre,<sp/>options...&gt;<sp/>cls)<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>cls.def(<ref refid="a00384_1ac8243891c1b961e50a066140ab79a142" kindref="member">pybind11::init</ref>([](</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numberOfParameter)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>EASPre(numberOfParameter);<sp/>}));</highlight></codeline>
<codeline lineno="81"><highlight class="normal">}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="a01480" kindref="compound">NeumannBoundaryLoadPre</ref>,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>options&gt;</highlight></codeline>
<codeline lineno="93" refid="a00398_1a813121e686b5d64d6ef1e11bd4bfc59b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a00398_1a813121e686b5d64d6ef1e11bd4bfc59b" kindref="member">registerNeumannBoundaryLoadPre</ref>(pybind11::handle<sp/>scope,<sp/>pybind11::class_&lt;NeumannBoundaryLoadPre,<sp/>options...&gt;<sp/>cls)<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">BoundaryPatchType<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="a01480_1ab141e7f54614dccc0924c0bf678760d4" kindref="member">NeumannBoundaryLoadPre::BoundaryPatchType</ref>;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">GridView<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="a01480_1a57f15a0941a7f2f5cd9be9365b07cc62" kindref="member">NeumannBoundaryLoadPre::GridView</ref>;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">LoadFunction<sp/>=<sp/>std::function&lt;Eigen::Vector&lt;double,<sp/>NeumannBoundaryLoadPre::worldDim&gt;(</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a01784" kindref="compound">Dune::FieldVector&lt;double, NeumannBoundaryLoadPre::worldDim&gt;</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;)&gt;;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>cls.def(<ref refid="a00384_1ac8243891c1b961e50a066140ab79a142" kindref="member">pybind11::init</ref>([](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BoundaryPatchType&amp;<sp/>patch,<sp/>LoadFunction<sp/><ref refid="a00384_1a0eecc01634324520df56c4352eb15077" kindref="member">volumeLoad</ref>)<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="a01480" kindref="compound">NeumannBoundaryLoadPre</ref>(&amp;patch,<sp/><ref refid="a00384_1a0eecc01634324520df56c4352eb15077" kindref="member">volumeLoad</ref>);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}),</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pybind11::keep_alive&lt;1,<sp/>2&gt;());</highlight></codeline>
<codeline lineno="103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="a00384_1a93a9eac09126da6a203f68af3e7c8ba2" kindref="member">VolumeLoadPre</ref>,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>options&gt;</highlight></codeline>
<codeline lineno="115" refid="a00398_1a1f597ae7aac82dc24a8a2669f86fc12b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a00398_1a1f597ae7aac82dc24a8a2669f86fc12b" kindref="member">registerVolumeLoadPre</ref>(pybind11::handle<sp/>scope,<sp/>pybind11::class_&lt;VolumeLoadPre,<sp/>options...&gt;<sp/>cls)<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">LoadFunction<sp/>=<sp/>std::function&lt;Eigen::Vector&lt;double,<sp/>VolumeLoadPre::worldDim&gt;(</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a01784" kindref="compound">Dune::FieldVector&lt;double, VolumeLoadPre::worldDim&gt;</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;)&gt;;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>cls.def(<ref refid="a00384_1ac8243891c1b961e50a066140ab79a142" kindref="member">pybind11::init</ref>([](LoadFunction<sp/><ref refid="a00384_1a0eecc01634324520df56c4352eb15077" kindref="member">volumeLoad</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="a00384_1a93a9eac09126da6a203f68af3e7c8ba2" kindref="member">VolumeLoadPre</ref>(<ref refid="a00384_1a0eecc01634324520df56c4352eb15077" kindref="member">volumeLoad</ref>);<sp/>}));</highlight></codeline>
<codeline lineno="119"><highlight class="normal">}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Ikarus::Python</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/__w/ikarus/ikarus/repo/ikarus/python/finiteelements/registerpreelement.hh"/>
  </compounddef>
</doxygen>
