<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="a00314" kind="file" language="C++">
    <compoundname>feresulttypes.hh</compoundname>
    <includes local="no">type_traits</includes>
    <includes local="no">Eigen/Core</includes>
    <includes refid="a00032" local="no">ikarus/utils/tensorutils.hh</includes>
    <includedby refid="a00323" local="no">ferequirements.hh</includedby>
    <includedby refid="a00299" local="no">kirchhoffloveshell.hh</includedby>
    <includedby refid="a00293" local="no">linearelastic.hh</includedby>
    <incdepgraph>
      <node id="18">
        <label>ikarus/assembler/dirichletbcenforcement.hh</label>
        <link refid="a00176"/>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>feresulttypes.hh</label>
        <link refid="a00314"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>ikarus/finiteelements/mechanics/materials/tags.hh</label>
        <link refid="a00242"/>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>ikarus/utils/concepts.hh</label>
        <link refid="a03012"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>ikarus/utils/makeenum.hh</label>
        <link refid="a00005"/>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>ikarus/utils/math.hh</label>
        <link refid="a00038"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>ikarus/utils/tensorutils.hh</label>
        <link refid="a00032"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>ikarus/utils/traits.hh</label>
        <link refid="a00011"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>Eigen/Core</label>
      </node>
      <node id="15">
        <label>Eigen/Dense</label>
      </node>
      <node id="16">
        <label>Eigen/Sparse</label>
      </node>
      <node id="17">
        <label>autodiff/forward/dual/dual.hpp</label>
      </node>
      <node id="10">
        <label>concepts</label>
      </node>
      <node id="20">
        <label>dune/common/exceptions.hh</label>
      </node>
      <node id="25">
        <label>dune/common/hybridutilities.hh</label>
      </node>
      <node id="8">
        <label>dune/common/promotiontraits.hh</label>
      </node>
      <node id="13">
        <label>dune/functions/functionspacebases/basistags.hh</label>
      </node>
      <node id="14">
        <label>dune/functions/functionspacebases/lagrangebasis.hh</label>
      </node>
      <node id="23">
        <label>functional</label>
      </node>
      <node id="5">
        <label>numeric</label>
      </node>
      <node id="6">
        <label>ranges</label>
      </node>
      <node id="24">
        <label>tuple</label>
      </node>
      <node id="2">
        <label>type_traits</label>
      </node>
      <node id="7">
        <label>unsupported/Eigen/CXX11/Tensor</label>
      </node>
      <node id="11">
        <label>utility</label>
      </node>
      <node id="12">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="4">
        <label>assemblermanipulatorbuildingblocks.hh</label>
        <link refid="a00164"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>assemblermanipulatorfuser.hh</label>
        <link refid="a00173"/>
      </node>
      <node id="18">
        <label>interface.hh</label>
        <link refid="a02976"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>simpleassemblers.hh</label>
        <link refid="a00170"/>
      </node>
      <node id="24">
        <label>pathfollowing.hh</label>
        <link refid="a00194"/>
      </node>
      <node id="6">
        <label>autodifffe.hh</label>
        <link refid="a00305"/>
      </node>
      <node id="10">
        <label>febase.hh</label>
        <link refid="a00326"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>fefactory.hh</label>
        <link refid="a00320"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>ferequirements.hh</label>
        <link refid="a00323"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>feresulttypes.hh</label>
        <link refid="a00314"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>fetraits.hh</label>
        <link refid="a00311"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>enhancedassumedstrains.hh</label>
        <link refid="a00281"/>
      </node>
      <node id="20">
        <label>kirchhoffloveshell.hh</label>
        <link refid="a00299"/>
      </node>
      <node id="21">
        <label>linearelastic.hh</label>
        <link refid="a00293"/>
      </node>
      <node id="34">
        <label>loads.hh</label>
        <link refid="a00296"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>traction.hh</label>
        <link refid="a00233"/>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>volume.hh</label>
        <link refid="a00230"/>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>materials.hh</label>
        <link refid="a02991"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>vanishingstress.hh</label>
        <link refid="a00245"/>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>nonlinearelastic.hh</label>
        <link refid="a00239"/>
      </node>
      <node id="35">
        <label>truss.hh</label>
        <link refid="a00284"/>
      </node>
      <node id="15">
        <label>mixin.hh</label>
        <link refid="a00317"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>resultevaluators.hh</label>
        <link refid="a00338"/>
      </node>
      <node id="30">
        <label>resultfunction.hh</label>
        <link refid="a00335"/>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>vtkwriter.hh</label>
        <link refid="a02997"/>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>flatassembler.hh</label>
        <link refid="a00206"/>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>flatassemblermanipulator.hh</label>
        <link refid="a00209"/>
      </node>
      <node id="7">
        <label>basis.hh</label>
        <link refid="a03003"/>
      </node>
      <node id="8">
        <label>dirichletvalues.hh</label>
        <link refid="a03015"/>
      </node>
      <node id="12">
        <label>fe.hh</label>
        <link refid="a00221"/>
      </node>
      <node id="27">
        <label>material.hh</label>
        <link refid="a00218"/>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>vtkwriter.hh</label>
        <link refid="a03000"/>
      </node>
      <node id="23">
        <label>nonlinearsolverfactory.hh</label>
        <link refid="a00161"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>nonlinopfactory.hh</label>
        <link refid="a00026"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>_ikarus.cc</label>
        <link refid="a00359"/>
      </node>
      <node id="28">
        <label>materials.hh</label>
        <link refid="a02994"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="a01411" prot="public">Ikarus::ResultWrapper</innerclass>
    <innerclass refid="a01423" prot="public">Ikarus::ResultTypeBase</innerclass>
    <innernamespace refid="a00396">Ikarus</innernamespace>
    <innernamespace refid="a00403">Ikarus::ResultTypes</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="a00314_1a8b1463ebff118e1d2513007fb0395a7c" prot="public" static="no">
        <name>REGISTER_RESULTTYPE_IMPL</name>
        <param><defname>resultTypeName</defname></param>
        <param><defname>rowsExpr</defname></param>
        <param><defname>colsExpr</defname></param>
        <param><defname>MaxRowsExpr</defname></param>
        <param><defname>MaxColsExpr</defname></param>
        <param><defname>VectorizeStruct</defname></param>
        <param><defname>MatricizeStruct</defname></param>
        <initializer>  template &lt;typename ScalarType, int gridDim, int worldDim&gt;                                                     \
  struct resultTypeName                                                                                         \
  {                                                                                                             \
    friend std::string toString(resultTypeName) { return #resultTypeName; }                                     \
                                                                                                                \
    using type       = Eigen::Matrix&lt;ScalarType, rowsExpr, colsExpr, 0, MaxRowsExpr, MaxColsExpr&gt;;              \
    using Vectorizer = VectorizeStruct;                                                                         \
    using Matricizer = MatricizeStruct;                                                                         \
                                                                                                                \
    template &lt;typename ScalarType_, int gridDim_, int worldDim_&gt;                                                \
    using Rebind = resultTypeName&lt;ScalarType_, gridDim_, worldDim_&gt;;                                            \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/feresulttypes.hh" line="65" column="9" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/feresulttypes.hh" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="a00314_1ac8f258db238456d188b270d139fd21e5" prot="public" static="no">
        <name>REGISTER_SIMPLE_SYMMETRIC_RESULTTYPE</name>
        <param><defname>resultTypeName</defname></param>
        <param><defname>rowsExpr</defname></param>
        <param><defname>colsExpr</defname></param>
        <param><defname>strainlike</defname></param>
        <initializer>  <ref refid="a00314_1a8b1463ebff118e1d2513007fb0395a7c" kindref="member">REGISTER_RESULTTYPE_IMPL</ref>(resultTypeName, rowsExpr, colsExpr, rowsExpr, colsExpr,           \
                           Ikarus::Impl::VectorizeWithVoigt&lt;strainlike&gt;, Ikarus::Impl::MatricizeWithVoigt&lt;strainlike&gt;)</initializer>
        <briefdescription>
<para>Used to register a symmetric ResultType with compile-time fixed rows and columns (uses Voigt notation) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>resultTypeName</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the ResultType </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rowsExpr</parametername>
</parameternamelist>
<parameterdescription>
<para>expression for rows, e.g. <computeroutput>gridDim</computeroutput> or <computeroutput>worldDim</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>colsExpr</parametername>
</parameternamelist>
<parameterdescription>
<para>expression for rows, e.g. <computeroutput>gridDim</computeroutput> or <computeroutput>worldDim</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>strainlike</parametername>
</parameternamelist>
<parameterdescription>
<para>boolean indicating whether the result should be treated as a strain-like quantity </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/feresulttypes.hh" line="86" column="9" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/feresulttypes.hh" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="a00314_1a60e89b24a05f9724eb4cf2a3683aafeb" prot="public" static="no">
        <name>REGISTER_RESULTTYPE</name>
        <param><defname>resultTypeName</defname></param>
        <param><defname>rowsExpr</defname></param>
        <param><defname>colsExpr</defname></param>
        <initializer>  <ref refid="a00314_1a8b1463ebff118e1d2513007fb0395a7c" kindref="member">REGISTER_RESULTTYPE_IMPL</ref>(resultTypeName, rowsExpr, colsExpr, Ikarus::Impl::VectorizeGeneric, \
                           Ikarus::Impl::MatricizeGeneric)</initializer>
        <briefdescription>
<para>Used to register a general ResultType with potentially dynamic size without reserved memeroy rows and columns. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>resultTypeName</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the ResultType </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rowsExpr</parametername>
</parameternamelist>
<parameterdescription>
<para>expression for rows, e.g. <computeroutput>Eigen::Dynamic</computeroutput> or <computeroutput>worldDim</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>colsExpr</parametername>
</parameternamelist>
<parameterdescription>
<para>expression for columns, e.g. <computeroutput>Eigen::Dynamic</computeroutput> or <computeroutput>worldDim</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/feresulttypes.hh" line="97" column="9" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/feresulttypes.hh" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="a00314_1a7ce39a7837a7febc8ecb05eac58b2d7d" prot="public" static="no">
        <name>REGISTER_RESERVED_RESULTTYPE</name>
        <param><defname>resultTypeName</defname></param>
        <param><defname>rowsExpr</defname></param>
        <param><defname>colsExpr</defname></param>
        <param><defname>MaxRowsExpr</defname></param>
        <param><defname>MaxColsExpr</defname></param>
        <initializer>  <ref refid="a00314_1a8b1463ebff118e1d2513007fb0395a7c" kindref="member">REGISTER_RESULTTYPE_IMPL</ref>(resultTypeName, rowsExpr, colsExpr, MaxRowsExpr, MaxColsExpr,           \
                           Ikarus::Impl::VectorizeGeneric, Ikarus::Impl::MatricizeGeneric)</initializer>
        <briefdescription>
<para>Used to register a general ResultType with potentially dynamic size and defined maximum amount of rows and columns. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>resultTypeName</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the ResultType </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rowsExpr</parametername>
</parameternamelist>
<parameterdescription>
<para>expression for rows, e.g. <computeroutput>Eigen::Dynamic</computeroutput> or <computeroutput>worldDim</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>colsExpr</parametername>
</parameternamelist>
<parameterdescription>
<para>expression for columns, e.g. <computeroutput>Eigen::Dynamic</computeroutput> or <computeroutput>worldDim</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>MaxRowsExpr</parametername>
</parameternamelist>
<parameterdescription>
<para>expression for maximum number of columns </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>MaxColsExprexpression</parametername>
</parameternamelist>
<parameterdescription>
<para>for maximum number of rows </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/feresulttypes.hh" line="109" column="9" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/feresulttypes.hh" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="a00314_1a52814b58e3f14abb3b98a238cb51d3b8" prot="public" static="no">
        <name>REGISTER_SIMPLE_RESULTTYPE</name>
        <param><defname>resultTypeName</defname></param>
        <param><defname>rowsExpr</defname></param>
        <param><defname>colsExpr</defname></param>
        <initializer>  <ref refid="a00314_1a7ce39a7837a7febc8ecb05eac58b2d7d" kindref="member">REGISTER_RESERVED_RESULTTYPE</ref>(resultTypeName, rowsExpr, colsExpr, rowsExpr, colsExpr)</initializer>
        <briefdescription>
<para>Used to register a general ResultType with potentially dynamic size, with reserved memory according to passed in rowsExpr and colsExpr. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>resultTypeName</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the ResultType </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rowsExpr</parametername>
</parameternamelist>
<parameterdescription>
<para>expression for rows, e.g. <computeroutput>Eigen::Dynamic</computeroutput> or <computeroutput>worldDim</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>colsExpr</parametername>
</parameternamelist>
<parameterdescription>
<para>expression for columns, e.g. <computeroutput>Eigen::Dynamic</computeroutput> or <computeroutput>worldDim</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/feresulttypes.hh" line="119" column="9" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/feresulttypes.hh" bodystart="119" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Definitions of ResultTypes used for finite element results. </para>
    </briefdescription>
    <detaileddescription>
<para>Additional ResultTypes can be added with one of the following macros </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>SPDX-FileCopyrightText:<sp/>2021-2025<sp/>The<sp/>Ikarus<sp/>Developers<sp/>mueller@ibb.uni-stuttgart.de</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPDX-License-Identifier:<sp/>LGPL-3.0-or-later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Eigen/Core&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="a00032" kindref="compound">ikarus/utils/tensorutils.hh</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="a00396" kindref="compound">Ikarus</ref><sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Impl<sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>strainlike<sp/>=<sp/>false&gt;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">VectorizeWithVoigt</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Derived&gt;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>transform(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::DenseBase&lt;Derived&gt;&amp;<sp/>mat)<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="a00392_1ga4304655095296ce9283e012587817a51" kindref="member">toVoigt</ref>(mat.derived(),<sp/>strainlike);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">VectorizeGeneric</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Derived&gt;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>transform(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::DenseBase&lt;Derived&gt;&amp;<sp/>mat)<sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mat.derived().reshaped().eval();</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>strainlike<sp/>=<sp/>false&gt;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">MatricizeWithVoigt</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Derived,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>RowsAtCompileTime,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ColsAtCompileTime&gt;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>transform(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::DenseBase&lt;Derived&gt;&amp;<sp/>vec,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rows<sp/>=<sp/>RowsAtCompileTime,</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cols<sp/>=<sp/>ColsAtCompileTime)<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(rows<sp/>==<sp/>RowsAtCompileTime<sp/>&amp;&amp;<sp/>cols<sp/>==<sp/>ColsAtCompileTime<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Only<sp/>the<sp/>fixed<sp/>size<sp/>values<sp/>work<sp/>for<sp/>voigt<sp/>matrices<sp/>and<sp/>vectors&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(RowsAtCompileTime<sp/>!=<sp/>Eigen::Dynamic<sp/>and<sp/>ColsAtCompileTime<sp/>!=<sp/>Eigen::Dynamic,</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Voigt<sp/>notation<sp/>only<sp/>available<sp/>for<sp/>fixed<sp/>size<sp/>vectors<sp/>and<sp/>matrices&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="a00392_1gadc8e9e9f3838d0392a5fcf1e11374ee9" kindref="member">fromVoigt</ref>(vec.derived(),<sp/>strainlike);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">MatricizeGeneric</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Derived,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>RowsAtCompileTime,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ColsAtCompileTime&gt;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>transform(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::DenseBase&lt;Derived&gt;&amp;<sp/>vec,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rows<sp/>=<sp/>RowsAtCompileTime,</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cols<sp/>=<sp/>ColsAtCompileTime)<sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vec.derived().reshaped(Eigen::fix&lt;RowsAtCompileTime&gt;(rows),<sp/>Eigen::fix&lt;ColsAtCompileTime&gt;(cols)).eval();</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Impl</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="a00403" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">ResultTypes<sp/>{</highlight></codeline>
<codeline lineno="64" refid="a00314_1a8b1463ebff118e1d2513007fb0395a7c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>REGISTER_RESULTTYPE_IMPL(resultTypeName,<sp/>rowsExpr,<sp/>colsExpr,<sp/>MaxRowsExpr,<sp/>MaxColsExpr,<sp/>VectorizeStruct,<sp/>\</highlight></codeline>
<codeline lineno="65"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatricizeStruct)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="66"><highlight class="preprocessor"><sp/><sp/>template<sp/>&lt;typename<sp/>ScalarType,<sp/>int<sp/>gridDim,<sp/>int<sp/>worldDim&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="67"><highlight class="preprocessor"><sp/><sp/>struct<sp/>resultTypeName<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="68"><highlight class="preprocessor"><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="69"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>friend<sp/>std::string<sp/>toString(resultTypeName)<sp/>{<sp/>return<sp/>#resultTypeName;<sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="70"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="71"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>using<sp/>type<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>Eigen::Matrix&lt;ScalarType,<sp/>rowsExpr,<sp/>colsExpr,<sp/>0,<sp/>MaxRowsExpr,<sp/>MaxColsExpr&gt;;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="72"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>using<sp/>Vectorizer<sp/>=<sp/>VectorizeStruct;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="73"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>using<sp/>Matricizer<sp/>=<sp/>MatricizeStruct;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="74"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="75"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>ScalarType_,<sp/>int<sp/>gridDim_,<sp/>int<sp/>worldDim_&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="76"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>using<sp/>Rebind<sp/>=<sp/>resultTypeName&lt;ScalarType_,<sp/>gridDim_,<sp/>worldDim_&gt;;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="77"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="86" refid="a00314_1ac8f258db238456d188b270d139fd21e5" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>REGISTER_SIMPLE_SYMMETRIC_RESULTTYPE(resultTypeName,<sp/>rowsExpr,<sp/>colsExpr,<sp/>strainlike)<sp/>\</highlight></codeline>
<codeline lineno="87"><highlight class="preprocessor"><sp/><sp/>REGISTER_RESULTTYPE_IMPL(resultTypeName,<sp/>rowsExpr,<sp/>colsExpr,<sp/>rowsExpr,<sp/>colsExpr,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="88"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ikarus::Impl::VectorizeWithVoigt&lt;strainlike&gt;,<sp/>Ikarus::Impl::MatricizeWithVoigt&lt;strainlike&gt;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="97" refid="a00314_1a60e89b24a05f9724eb4cf2a3683aafeb" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>REGISTER_RESULTTYPE(resultTypeName,<sp/>rowsExpr,<sp/>colsExpr)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="98"><highlight class="preprocessor"><sp/><sp/>REGISTER_RESULTTYPE_IMPL(resultTypeName,<sp/>rowsExpr,<sp/>colsExpr,<sp/>Ikarus::Impl::VectorizeGeneric,<sp/>\</highlight></codeline>
<codeline lineno="99"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ikarus::Impl::MatricizeGeneric)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109" refid="a00314_1a7ce39a7837a7febc8ecb05eac58b2d7d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>REGISTER_RESERVED_RESULTTYPE(resultTypeName,<sp/>rowsExpr,<sp/>colsExpr,<sp/>MaxRowsExpr,<sp/>MaxColsExpr)<sp/>\</highlight></codeline>
<codeline lineno="110"><highlight class="preprocessor"><sp/><sp/>REGISTER_RESULTTYPE_IMPL(resultTypeName,<sp/>rowsExpr,<sp/>colsExpr,<sp/>MaxRowsExpr,<sp/>MaxColsExpr,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="111"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ikarus::Impl::VectorizeGeneric,<sp/>Ikarus::Impl::MatricizeGeneric)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119" refid="a00314_1a52814b58e3f14abb3b98a238cb51d3b8" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>REGISTER_SIMPLE_RESULTTYPE(resultTypeName,<sp/>rowsExpr,<sp/>colsExpr)<sp/>\</highlight></codeline>
<codeline lineno="120"><highlight class="preprocessor"><sp/><sp/>REGISTER_RESERVED_RESULTTYPE(resultTypeName,<sp/>rowsExpr,<sp/>colsExpr,<sp/>rowsExpr,<sp/>colsExpr)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125" refid="a00403_1a60454300a3ee8c6fdd19a7a62dce2202" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="a00403_1a60454300a3ee8c6fdd19a7a62dce2202" kindref="member">REGISTER_SIMPLE_SYMMETRIC_RESULTTYPE</ref>(linearStress,<sp/>worldDim,<sp/>worldDim,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="126" refid="a00403_1a71a26eea02ef9fdd54621f7146d6dd0d" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="a00403_1a60454300a3ee8c6fdd19a7a62dce2202" kindref="member">REGISTER_SIMPLE_SYMMETRIC_RESULTTYPE</ref>(PK2Stress,<sp/>worldDim,<sp/>worldDim,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="127" refid="a00403_1a6b389a778d302b7827c5aea71d406ad1" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="a00403_1a60454300a3ee8c6fdd19a7a62dce2202" kindref="member">REGISTER_SIMPLE_SYMMETRIC_RESULTTYPE</ref>(cauchyStress,<sp/>worldDim,<sp/>worldDim,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>resulttypes<sp/>are<sp/>for<sp/>reduced<sp/>materials<sp/>to<sp/>obtain<sp/>the<sp/>full<sp/>3D<sp/>stress<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130" refid="a00403_1a16fd2e672c0168478698fb2d338ab765" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="a00403_1a60454300a3ee8c6fdd19a7a62dce2202" kindref="member">REGISTER_SIMPLE_SYMMETRIC_RESULTTYPE</ref>(linearStressFull,<sp/>3,<sp/>3,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="131" refid="a00403_1ab7bc600c2d975e5fcd2f1ea45a07752f" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="a00403_1a60454300a3ee8c6fdd19a7a62dce2202" kindref="member">REGISTER_SIMPLE_SYMMETRIC_RESULTTYPE</ref>(PK2StressFull,<sp/>3,<sp/>3,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="132" refid="a00403_1aeafb1cefd8eee2dc88f40742b9f22430" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="a00403_1a60454300a3ee8c6fdd19a7a62dce2202" kindref="member">REGISTER_SIMPLE_SYMMETRIC_RESULTTYPE</ref>(cauchyStressFull,<sp/>3,<sp/>3,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134" refid="a00403_1af279e0a4e5ede5f80277c45d542ae297" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="a00403_1af279e0a4e5ede5f80277c45d542ae297" kindref="member">REGISTER_SIMPLE_RESULTTYPE</ref>(director,<sp/>worldDim,<sp/>1);</highlight></codeline>
<codeline lineno="135" refid="a00403_1a607ac2fd320d3ec56a04ad2cb1f384c4" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="a00403_1af279e0a4e5ede5f80277c45d542ae297" kindref="member">REGISTER_SIMPLE_RESULTTYPE</ref>(magnetization,<sp/>worldDim,<sp/>1);</highlight></codeline>
<codeline lineno="136" refid="a00403_1a82899004bdc4b79780028d462eb9b51a" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="a00403_1af279e0a4e5ede5f80277c45d542ae297" kindref="member">REGISTER_SIMPLE_RESULTTYPE</ref>(gradientNormOfMagnetization,<sp/>1,<sp/>1);</highlight></codeline>
<codeline lineno="137" refid="a00403_1aea49f16ceba88de50b308882a96a5f6f" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="a00403_1af279e0a4e5ede5f80277c45d542ae297" kindref="member">REGISTER_SIMPLE_RESULTTYPE</ref>(vectorPotential,<sp/>worldDim,<sp/>1);</highlight></codeline>
<codeline lineno="138" refid="a00403_1a0d6406ac1d0ebe00a6451220e16eda28" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="a00403_1af279e0a4e5ede5f80277c45d542ae297" kindref="member">REGISTER_SIMPLE_RESULTTYPE</ref>(divergenceOfVectorPotential,<sp/>1,<sp/>1);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140" refid="a00403_1a9e1b9b589bab3ddacd328f3ba35e4060" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="a00403_1af279e0a4e5ede5f80277c45d542ae297" kindref="member">REGISTER_SIMPLE_RESULTTYPE</ref>(BField,<sp/>worldDim,<sp/>1);</highlight></codeline>
<codeline lineno="141" refid="a00403_1aabcae0056154bd66b8469cf257687a32" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="a00403_1af279e0a4e5ede5f80277c45d542ae297" kindref="member">REGISTER_SIMPLE_RESULTTYPE</ref>(HField,<sp/>worldDim,<sp/>1);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143" refid="a00403_1a0f1812cc608fd44ec96dd2f6d7841828" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="a00403_1af279e0a4e5ede5f80277c45d542ae297" kindref="member">REGISTER_SIMPLE_RESULTTYPE</ref>(cauchyAxialForce,<sp/>1,<sp/>1);</highlight></codeline>
<codeline lineno="144" refid="a00403_1aad41dec3367d662ab320e79740fe921c" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="a00403_1af279e0a4e5ede5f80277c45d542ae297" kindref="member">REGISTER_SIMPLE_RESULTTYPE</ref>(PK2AxialForce,<sp/>1,<sp/>1);</highlight></codeline>
<codeline lineno="145" refid="a00403_1a893a20e7914af86ffe78be5de91d5e6f" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="a00403_1af279e0a4e5ede5f80277c45d542ae297" kindref="member">REGISTER_SIMPLE_RESULTTYPE</ref>(linearAxialForce,<sp/>1,<sp/>1);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147" refid="a00403_1a95592ca26f1dce3a7d1e943dc46274fb" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="a00403_1af279e0a4e5ede5f80277c45d542ae297" kindref="member">REGISTER_SIMPLE_RESULTTYPE</ref>(customType,<sp/>Eigen::Dynamic,<sp/>Eigen::Dynamic);</highlight></codeline>
<codeline lineno="148"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>ResultTypes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150" refid="a00396_1acfb09bb7db104db62d3d1d2dc3e009b2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/><ref refid="a00396_1acfb09bb7db104db62d3d1d2dc3e009b2" kindref="member">ResultShape</ref></highlight></codeline>
<codeline lineno="151"><highlight class="normal">{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><ref refid="a00396_1acfb09bb7db104db62d3d1d2dc3e009b2a57dea6f5039281b7fee517fc43bf3110" kindref="member">Vector</ref>,</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><ref refid="a00396_1acfb09bb7db104db62d3d1d2dc3e009b2af53df0293e169f562bc1d9a20e1d2589" kindref="member">Matrix</ref></highlight></codeline>
<codeline lineno="154"><highlight class="normal">};</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RT,<sp/>ResultShape<sp/>storedResultShape<sp/>=<sp/>ResultShape::Vector&gt;</highlight></codeline>
<codeline lineno="163" refid="a01411" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="a01411" kindref="compound">ResultWrapper</ref><sp/>:<sp/>RT</highlight></codeline>
<codeline lineno="164"><highlight class="normal">{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">ResultTypeValueType<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RT::type;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>Eigen::Index<sp/>rowsAtCompileTime<sp/>=<sp/>ResultTypeValueType::RowsAtCompileTime;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>Eigen::Index<sp/>colsAtCompileTime<sp/>=<sp/>ResultTypeValueType::ColsAtCompileTime;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>storedValueIsVector<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>storedResultShape<sp/>==<sp/><ref refid="a00396_1acfb09bb7db104db62d3d1d2dc3e009b2a57dea6f5039281b7fee517fc43bf3110" kindref="member">ResultShape::Vector</ref>;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="172" refid="a01411_1ad2e94e390a1a328d7abd8006f29dbbd2" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="a01411_1ad2e94e390a1a328d7abd8006f29dbbd2" kindref="member">VecType</ref><sp/>=<sp/>std::invoke_result_t&lt;</highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(&amp;RT::Vectorizer::template<sp/>transform&lt;ResultTypeValueType&gt;),</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ResultTypeValueType&amp;&gt;;</highlight></codeline>
<codeline lineno="174" refid="a01411_1a3be8a4f7e4b67bc2bb90a826c1ed7c85" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="a01411_1a3be8a4f7e4b67bc2bb90a826c1ed7c85" kindref="member">MatType</ref><sp/>=</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::invoke_result_t&lt;</highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(&amp;RT::Matricizer::template<sp/>transform&lt;VecType,<sp/>rowsAtCompileTime,<sp/>colsAtCompileTime&gt;),</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01411_1ad2e94e390a1a328d7abd8006f29dbbd2" kindref="member">VecType</ref>&amp;,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;;</highlight></codeline>
<codeline lineno="177" refid="a01411_1a1baf31b4a8525d6b81860c8f0a0b6a84" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="a01411_1a1baf31b4a8525d6b81860c8f0a0b6a84" kindref="member">StoredType</ref><sp/>=<sp/>std::conditional_t&lt;storedValueIsVector,<sp/>VecType,<sp/>MatType&gt;;</highlight></codeline>
<codeline lineno="178" refid="a01411_1aef0efc55342d144366f8eddbc6fe00f9" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="a01411_1aef0efc55342d144366f8eddbc6fe00f9" kindref="member">ResultType</ref><sp/>=<sp/>RT;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="184" refid="a01411_1ae1be56ef0981f28e1dfa4f77453251d3" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="a01411_1ae1be56ef0981f28e1dfa4f77453251d3" kindref="member">asVec</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(storedValueIsVector)</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RT::Vectorizer::transform(value_);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="197" refid="a01411_1ae5c30a9c8da8fe6bb01b1cee0fc43155" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="a01411_1ae5c30a9c8da8fe6bb01b1cee0fc43155" kindref="member">asMat</ref>(Eigen::Index<sp/>rows<sp/>=<sp/>rowsAtCompileTime,<sp/>Eigen::Index<sp/>cols<sp/>=<sp/>colsAtCompileTime)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(storedValueIsVector)<sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(rowsAtCompileTime<sp/>==<sp/>Eigen::Dynamic)</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(rows<sp/>!=<sp/>rowsAtCompileTime<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;For<sp/>dynamic<sp/>size<sp/>result<sp/>types<sp/>you<sp/>have<sp/>to<sp/>pass<sp/>rows<sp/>by<sp/>hand,<sp/>since<sp/>it<sp/>is<sp/>not<sp/>clear<sp/>how<sp/>the<sp/>result<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;should<sp/>be<sp/>reshaped&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(colsAtCompileTime<sp/>==<sp/>Eigen::Dynamic)</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(cols<sp/>!=<sp/>colsAtCompileTime<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;For<sp/>dynamic<sp/>size<sp/>result<sp/>types<sp/>you<sp/>have<sp/>to<sp/>pass<sp/>cols<sp/>by<sp/>hand,<sp/>since<sp/>it<sp/>is<sp/>not<sp/>clear<sp/>how<sp/>the<sp/>result<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;should<sp/>be<sp/>reshaped&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RT::Matricizer::template<sp/>transform&lt;VecType,<sp/>rowsAtCompileTime,<sp/>colsAtCompileTime&gt;(value_,<sp/>rows,<sp/>cols);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="211" refid="a01411_1a826dcccf70e97474b01126970e2839ac" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="a01411_1a826dcccf70e97474b01126970e2839ac" kindref="member">ResultWrapper</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="212" refid="a01411_1a623510c28007eb075ed7719de10562b2" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="a01411_1a623510c28007eb075ed7719de10562b2" kindref="member">ResultWrapper</ref>(<ref refid="a01411_1a1baf31b4a8525d6b81860c8f0a0b6a84" kindref="member">StoredType</ref>&amp;&amp;<sp/>value)<sp/>{<sp/>this-&gt;value_<sp/>=<sp/>std::move(value);<sp/>}</highlight></codeline>
<codeline lineno="213" refid="a01411_1ae3ec0250a8cce10dae2b6eacec3ffe11" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="a01411_1ae3ec0250a8cce10dae2b6eacec3ffe11" kindref="member">ResultWrapper</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01411_1a1baf31b4a8525d6b81860c8f0a0b6a84" kindref="member">StoredType</ref>&amp;<sp/>value)<sp/>{<sp/>this-&gt;value_<sp/>=<sp/>value;<sp/>}</highlight></codeline>
<codeline lineno="214" refid="a01411_1adbc957bfc9a97390ce57d778dd7c91a1" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="a01411" kindref="compound">ResultWrapper</ref>&amp;<sp/><ref refid="a01411_1adbc957bfc9a97390ce57d778dd7c91a1" kindref="member">operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01411_1a1baf31b4a8525d6b81860c8f0a0b6a84" kindref="member">StoredType</ref>&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;value_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="218" refid="a01411_1a6a1deb7c814879d79eaa5fe467666b2f" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="a01411" kindref="compound">ResultWrapper</ref>&amp;<sp/><ref refid="a01411_1a6a1deb7c814879d79eaa5fe467666b2f" kindref="member">operator=</ref>(<ref refid="a01411_1a1baf31b4a8525d6b81860c8f0a0b6a84" kindref="member">StoredType</ref>&amp;&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;value_<sp/>=<sp/>std::move(value);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><ref refid="a01411_1a1baf31b4a8525d6b81860c8f0a0b6a84" kindref="member">StoredType</ref><sp/>value_{};</highlight></codeline>
<codeline lineno="225"><highlight class="normal">};</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Impl<sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">RT&gt;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">DummyRT<sp/>=<sp/>RT&lt;double,<sp/>1,<sp/>1&gt;;</highlight></codeline>
<codeline lineno="230"><highlight class="normal">}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">RT&gt;</highlight></codeline>
<codeline lineno="238" refid="a00396_1a38629395c2d43ba44328b01ce0c0daf3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="a00396_1a38629395c2d43ba44328b01ce0c0daf3" kindref="member">makeRT</ref>()<sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Impl::DummyRT&lt;RT&gt;{};</highlight></codeline>
<codeline lineno="240"><highlight class="normal">}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">RT&gt;</highlight></codeline>
<codeline lineno="248" refid="a00396_1ae9c1868f27f4754a448edbbc97b9a2f2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="a00396_1aef80b6b5b45dcfbea4f722f51a84f53f" kindref="member">toString</ref>()<sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="a00396_1aef80b6b5b45dcfbea4f722f51a84f53f" kindref="member">toString</ref>(Impl::DummyRT&lt;RT&gt;{});</highlight></codeline>
<codeline lineno="250"><highlight class="normal">}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">RT1,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">RT2&gt;</highlight></codeline>
<codeline lineno="258" refid="a00396_1aae9d6a05f2ca4f54c0524404e27e7ed1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="a00396_1aae9d6a05f2ca4f54c0524404e27e7ed1" kindref="member">isSameResultType</ref><sp/>=<sp/>std::is_same_v&lt;Impl::DummyRT&lt;RT1&gt;,<sp/>Impl::DummyRT&lt;RT2&gt;&gt;;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Impl<sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Tuple&gt;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">hasType;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Us&gt;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">hasType&lt;T,<sp/><ref refid="a00395" kindref="compound">std</ref>::tuple&lt;Us...&gt;&gt;<sp/>:<sp/>std::disjunction&lt;std::is_same&lt;T,<sp/>Us&gt;...&gt;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="268"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Impl</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>ResultTypes&gt;</highlight></codeline>
<codeline lineno="276" refid="a01423" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="a01423" kindref="compound">ResultTypeBase</ref></highlight></codeline>
<codeline lineno="277"><highlight class="normal">{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RT&gt;</highlight></codeline>
<codeline lineno="283" refid="a01423_1af33553a01e6940265639d561c31b7746" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">consteval</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="a01423_1af33553a01e6940265639d561c31b7746" kindref="member">supportsResultType</ref>()<sp/>{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Impl::hasType&lt;decltype(makeRT&lt;RT&gt;()),<sp/><ref refid="a01423_1ac43d0000154d9bd08d7fdce3c279ccbb" kindref="member">SupportedResultTypes</ref>&gt;::value;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287" refid="a01423_1ac43d0000154d9bd08d7fdce3c279ccbb" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="a01423_1ac43d0000154d9bd08d7fdce3c279ccbb" kindref="member">SupportedResultTypes</ref><sp/>=<sp/>std::tuple&lt;decltype(makeRT&lt;ResultTypes&gt;())...&gt;;</highlight></codeline>
<codeline lineno="288"><highlight class="normal">};</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Ikarus</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/feresulttypes.hh"/>
  </compounddef>
</doxygen>
