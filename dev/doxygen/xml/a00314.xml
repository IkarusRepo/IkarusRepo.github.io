<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="a00314" kind="file" language="C++">
    <compoundname>pathfollowingfunctions.hh</compoundname>
    <includes local="no">cmath</includes>
    <includes local="no">optional</includes>
    <includes local="no">string</includes>
    <includes local="no">utility</includes>
    <includes local="no">vector</includes>
    <includes local="no">dune/common/exceptions.hh</includes>
    <includes local="no">Eigen/Core</includes>
    <includes refid="a00122" local="no">ikarus/solver/linearsolver/linearsolver.hh</includes>
    <includes refid="a03101" local="no">ikarus/utils/concepts.hh</includes>
    <includes refid="a00059" local="no">ikarus/utils/defaultfunctions.hh</includes>
    <includes refid="a00068" local="no">ikarus/utils/traits.hh</includes>
    <includedby refid="a00323" local="no">adaptivestepsizing.hh</includedby>
    <includedby refid="a00137" local="no">newtonraphsonwithscalarsubsidiaryfunction.hh</includedby>
    <includedby refid="a00329" local="no">pathfollowing.hh</includedby>
    <includedby refid="a00320" local="no">pathfollowing.inl</includedby>
    <incdepgraph>
      <node id="22">
        <label>ikarus/assembler/dirichletbcenforcement.hh</label>
        <link refid="a00347"/>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>pathfollowingfunctions.hh</label>
        <link refid="a00314"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>ikarus/finiteelements/mechanics/materials/tags.hh</label>
        <link refid="a00233"/>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>ikarus/solver/linearsolver/linearsolver.hh</label>
        <link refid="a00122"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>ikarus/utils/concepts.hh</label>
        <link refid="a03101"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>ikarus/utils/defaultfunctions.hh</label>
        <link refid="a00059"/>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>linearalgebrahelper.hh</label>
        <link refid="a00017"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>ikarus/utils/makeenum.hh</label>
        <link refid="a00011"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>ikarus/utils/traits.hh</label>
        <link refid="a00068"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>Eigen/Core</label>
      </node>
      <node id="19">
        <label>Eigen/Dense</label>
      </node>
      <node id="20">
        <label>Eigen/Sparse</label>
      </node>
      <node id="13">
        <label>Eigen/SparseCore</label>
      </node>
      <node id="21">
        <label>autodiff/forward/dual/dual.hpp</label>
      </node>
      <node id="2">
        <label>cmath</label>
      </node>
      <node id="16">
        <label>concepts</label>
      </node>
      <node id="7">
        <label>dune/common/exceptions.hh</label>
      </node>
      <node id="27">
        <label>dune/common/hybridutilities.hh</label>
      </node>
      <node id="33">
        <label>dune/common/tuplevector.hh</label>
      </node>
      <node id="17">
        <label>dune/functions/functionspacebases/basistags.hh</label>
      </node>
      <node id="18">
        <label>dune/functions/functionspacebases/lagrangebasis.hh</label>
      </node>
      <node id="34">
        <label>dune/istl/bvector.hh</label>
      </node>
      <node id="25">
        <label>functional</label>
      </node>
      <node id="30">
        <label>iosfwd</label>
      </node>
      <node id="10">
        <label>memory</label>
      </node>
      <node id="3">
        <label>optional</label>
      </node>
      <node id="31">
        <label>random</label>
      </node>
      <node id="32">
        <label>ranges</label>
      </node>
      <node id="4">
        <label>string</label>
      </node>
      <node id="26">
        <label>tuple</label>
      </node>
      <node id="11">
        <label>type_traits</label>
      </node>
      <node id="5">
        <label>utility</label>
      </node>
      <node id="12">
        <label>variant</label>
      </node>
      <node id="6">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>adaptivestepsizing.hh</label>
        <link refid="a00323"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>pathfollowing.hh</label>
        <link refid="a00329"/>
      </node>
      <node id="4">
        <label>pathfollowing.inl</label>
        <link refid="a00320"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>pathfollowingfunctions.hh</label>
        <link refid="a00314"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>newtonraphsonwithscalarsubsidiaryfunction.hh</label>
        <link refid="a00137"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="a01346" prot="public">Ikarus::SubsidiaryArgs</innerclass>
    <innerclass refid="a01350" prot="public">Ikarus::ArcLength</innerclass>
    <innerclass refid="a01354" prot="public">Ikarus::LoadControlSubsidiaryFunction</innerclass>
    <innerclass refid="a01358" prot="public">Ikarus::DisplacementControl</innerclass>
    <innernamespace refid="a00411">Ikarus</innernamespace>
    <briefdescription>
<para>Defines structures and methods related to subsidiary functions for control routines. </para>
    </briefdescription>
    <detaileddescription>
<para>This file contains the declarations of the StandardArcLength, LoadControlWithSubsidiaryFunction, and DisplacementControl structs, which represent subsidiary functions for arc-length, load control, and displacement control methods, respectively. These functions are used in path-following control routines. </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>SPDX-FileCopyrightText:<sp/>2021-2025<sp/>The<sp/>Ikarus<sp/>Developers<sp/>mueller@ibb.uni-stuttgart.de</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPDX-License-Identifier:<sp/>LGPL-3.0-or-later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;optional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;dune/common/exceptions.hh&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Eigen/Core&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="a00122" kindref="compound">ikarus/solver/linearsolver/linearsolver.hh</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="a03101" kindref="compound">ikarus/utils/concepts.hh</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="a00059" kindref="compound">ikarus/utils/defaultfunctions.hh</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="a00068" kindref="compound">ikarus/utils/traits.hh</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="a00411" kindref="compound">Ikarus</ref><sp/>{</highlight></codeline>
<codeline lineno="38" refid="a01346" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="a01346" kindref="compound">SubsidiaryArgs</ref></highlight></codeline>
<codeline lineno="39"><highlight class="normal">{</highlight></codeline>
<codeline lineno="40" refid="a01346_1a9c0bca7ed999dcf751648d41b5d9aa78" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="a01346_1a9c0bca7ed999dcf751648d41b5d9aa78" kindref="member">stepSize</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="41" refid="a01346_1afc97f3ae46ddd6a208b90d253aa8a7e6" refkind="member"><highlight class="normal"><sp/><sp/>Eigen::VectorX&lt;double&gt;<sp/><ref refid="a01346_1afc97f3ae46ddd6a208b90d253aa8a7e6" kindref="member">DD</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="42" refid="a01346_1a0cd5cc302f164ea614b9edfadd7c82c9" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="a01346_1a0cd5cc302f164ea614b9edfadd7c82c9" kindref="member">Dlambda</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="43" refid="a01346_1a628b23aa9e90c0e0ba1461ad2241645a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="a01346_1a628b23aa9e90c0e0ba1461ad2241645a" kindref="member">f</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="44" refid="a01346_1aa1bc7c1fc866571e3b6b22e14ed9afcf" refkind="member"><highlight class="normal"><sp/><sp/>Eigen::VectorX&lt;double&gt;<sp/><ref refid="a01346_1aa1bc7c1fc866571e3b6b22e14ed9afcf" kindref="member">dfdDD</ref>;<sp/></highlight></codeline>
<codeline lineno="45" refid="a01346_1a198c4e48b353f1ebe5c5922bf51e34e5" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="a01346_1a198c4e48b353f1ebe5c5922bf51e34e5" kindref="member">dfdDlambda</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="46" refid="a01346_1a217c729e1ae8b05a98c852f19b0d6ae5" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="a01346_1a217c729e1ae8b05a98c852f19b0d6ae5" kindref="member">currentStep</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="47"><highlight class="normal">};</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="66" refid="a01350" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="a01350" kindref="compound">ArcLength</ref></highlight></codeline>
<codeline lineno="67"><highlight class="normal">{</highlight></codeline>
<codeline lineno="76" refid="a01350_1a2fabf5f8515ac122ecf588f1d8c860bf" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a01350_1a2fabf5f8515ac122ecf588f1d8c860bf" kindref="member">operator()</ref>(<ref refid="a01346" kindref="compound">SubsidiaryArgs</ref>&amp;<sp/>args)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(psi)<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>root<sp/>=<sp/>sqrt(args.<ref refid="a01346_1afc97f3ae46ddd6a208b90d253aa8a7e6" kindref="member">DD</ref>.squaredNorm()<sp/>+<sp/>psi.value()<sp/>*<sp/>psi.value()<sp/>*<sp/>args.<ref refid="a01346_1a0cd5cc302f164ea614b9edfadd7c82c9" kindref="member">Dlambda</ref><sp/>*<sp/>args.<ref refid="a01346_1a0cd5cc302f164ea614b9edfadd7c82c9" kindref="member">Dlambda</ref>);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>args.<ref refid="a01346_1a628b23aa9e90c0e0ba1461ad2241645a" kindref="member">f</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>root<sp/>-<sp/>args.<ref refid="a01346_1a9c0bca7ed999dcf751648d41b5d9aa78" kindref="member">stepSize</ref>;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>args.<ref refid="a01346_1aa1bc7c1fc866571e3b6b22e14ed9afcf" kindref="member">dfdDD</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>args.<ref refid="a01346_1afc97f3ae46ddd6a208b90d253aa8a7e6" kindref="member">DD</ref><sp/>/<sp/>root;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>args.<ref refid="a01346_1a198c4e48b353f1ebe5c5922bf51e34e5" kindref="member">dfdDlambda</ref><sp/>=<sp/>(psi.value()<sp/>*<sp/>psi.value()<sp/>*<sp/>args.<ref refid="a01346_1a0cd5cc302f164ea614b9edfadd7c82c9" kindref="member">Dlambda</ref>)<sp/>/<sp/>root;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DUNE_THROW(Dune::InvalidStateException,<sp/></highlight><highlight class="stringliteral">&quot;You<sp/>have<sp/>to<sp/>call<sp/>initialPrediction<sp/>first.<sp/>Otherwise<sp/>psi<sp/>is<sp/>not<sp/>defined&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>NLO&gt;</highlight></codeline>
<codeline lineno="99" refid="a00394_1ga0a84b97adf02eb4fbd07ac3fc0c134bf" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a00394_1ga0a84b97adf02eb4fbd07ac3fc0c134bf" kindref="member">initialPrediction</ref>(NLO&amp;<sp/>nonLinearOperator,<sp/><ref refid="a01346" kindref="compound">SubsidiaryArgs</ref>&amp;<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="a00411_1a731a9ee6621f91193c15f31b9a399906" kindref="member">SolverTypeTag</ref><sp/>solverTag;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">JacobianType<sp/>=<sp/>std::remove_cvref_t&lt;typename<sp/>NLO::DerivativeType&gt;;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">((traits::isSpecializationTypeAndNonTypes&lt;Eigen::Matrix,<sp/>JacobianType&gt;::value)<sp/>or</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(traits::isSpecializationTypeNonTypeAndType&lt;Eigen::SparseMatrix,<sp/>JacobianType&gt;::value),</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Linear<sp/>solver<sp/>not<sp/>implemented<sp/>for<sp/>the<sp/>chosen<sp/>derivative<sp/>type<sp/>of<sp/>the<sp/>non-linear<sp/>operator&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(traits::isSpecializationTypeAndNonTypes&lt;Eigen::Matrix,<sp/>JacobianType&gt;::value)</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>solverTag<sp/>=<sp/><ref refid="a00411_1a731a9ee6621f91193c15f31b9a399906ad495de2cc8831501954c24afe8688190" kindref="member">SolverTypeTag::d_LDLT</ref>;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>solverTag<sp/>=<sp/><ref refid="a00411_1a731a9ee6621f91193c15f31b9a399906af493d8a2d2d89f06181e77bc79cabf1c" kindref="member">SolverTypeTag::sd_SimplicialLDLT</ref>;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>nonLinearOperator.lastParameter()<sp/>=<sp/>1.0;<sp/></highlight><highlight class="comment">//<sp/>lambda<sp/>=1.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>nonLinearOperator.template<sp/>update&lt;0&gt;();</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>R<sp/>=<sp/>nonLinearOperator.value();</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>K<sp/>=<sp/>nonLinearOperator.derivative();</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isLinearSolver<sp/>=</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a02083" kindref="compound">Ikarus::Concepts::LinearSolverCheck</ref>&lt;</highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(<ref refid="a00411_1a2afda25e777ed3a794da319ba535b87b" kindref="member">LinearSolver</ref>(solverTag)),<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>NLO::DerivativeType,</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>NLO::ValueType&gt;;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(isLinearSolver,</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Initial<sp/>predictor<sp/>step<sp/>in<sp/>the<sp/>standard<sp/>arc-length<sp/>method<sp/>doesn&apos;t<sp/>have<sp/>a<sp/>linear<sp/>solver&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>linearSolver<sp/>=<sp/><ref refid="a00411_1a2afda25e777ed3a794da319ba535b87b" kindref="member">LinearSolver</ref>(solverTag);<sp/></highlight><highlight class="comment">//<sp/>for<sp/>the<sp/>linear<sp/>predictor<sp/>step</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>linearSolver.analyzePattern(K);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>linearSolver.factorize(K);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>linearSolver.solve(args.<ref refid="a01346_1afc97f3ae46ddd6a208b90d253aa8a7e6" kindref="member">DD</ref>,<sp/>-R);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>DD2<sp/>=<sp/>args.<ref refid="a01346_1afc97f3ae46ddd6a208b90d253aa8a7e6" kindref="member">DD</ref>.squaredNorm();</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>psi<sp/><sp/><sp/><sp/>=<sp/>sqrt(DD2);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>sqrt(psi.value()<sp/>*<sp/>psi.value()<sp/>+<sp/>DD2);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>args.<ref refid="a01346_1afc97f3ae46ddd6a208b90d253aa8a7e6" kindref="member">DD</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>args.<ref refid="a01346_1afc97f3ae46ddd6a208b90d253aa8a7e6" kindref="member">DD</ref><sp/>*<sp/>args.<ref refid="a01346_1a9c0bca7ed999dcf751648d41b5d9aa78" kindref="member">stepSize</ref><sp/>/<sp/>s;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>args.<ref refid="a01346_1a0cd5cc302f164ea614b9edfadd7c82c9" kindref="member">Dlambda</ref><sp/>=<sp/>args.<ref refid="a01346_1a9c0bca7ed999dcf751648d41b5d9aa78" kindref="member">stepSize</ref><sp/>/<sp/>s;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>nonLinearOperator.firstParameter()<sp/>=<sp/>args.<ref refid="a01346_1afc97f3ae46ddd6a208b90d253aa8a7e6" kindref="member">DD</ref>;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>nonLinearOperator.lastParameter()<sp/><sp/>=<sp/>args.<ref refid="a01346_1a0cd5cc302f164ea614b9edfadd7c82c9" kindref="member">Dlambda</ref>;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>NLO&gt;</highlight></codeline>
<codeline lineno="149" refid="a01350_1af2af0315b650a1b8c997792f22829585" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a01350_1af2af0315b650a1b8c997792f22829585" kindref="member">intermediatePrediction</ref>(NLO&amp;<sp/>nonLinearOperator,<sp/><ref refid="a01346" kindref="compound">SubsidiaryArgs</ref>&amp;<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>nonLinearOperator.firstParameter()<sp/>+=<sp/>args.<ref refid="a01346_1afc97f3ae46ddd6a208b90d253aa8a7e6" kindref="member">DD</ref>;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>nonLinearOperator.lastParameter()<sp/>+=<sp/>args.<ref refid="a01346_1a0cd5cc302f164ea614b9edfadd7c82c9" kindref="member">Dlambda</ref>;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="155" refid="a01350_1afa77b974566da3b74cb5b35693540c16" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="a01350_1afa77b974566da3b74cb5b35693540c16" kindref="member">name</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(</highlight><highlight class="stringliteral">&quot;Arc<sp/>length&quot;</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>std::optional&lt;double&gt;<sp/>psi;</highlight></codeline>
<codeline lineno="159"><highlight class="normal">};</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="173" refid="a01354" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="a01354" kindref="compound">LoadControlSubsidiaryFunction</ref></highlight></codeline>
<codeline lineno="174"><highlight class="normal">{</highlight></codeline>
<codeline lineno="182" refid="a01354_1aea5de41cde5e7506712e8bdd84be6ffa" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a01354_1aea5de41cde5e7506712e8bdd84be6ffa" kindref="member">operator()</ref>(<ref refid="a01346" kindref="compound">SubsidiaryArgs</ref>&amp;<sp/>args)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>args.<ref refid="a01346_1a628b23aa9e90c0e0ba1461ad2241645a" kindref="member">f</ref><sp/>=<sp/>args.<ref refid="a01346_1a0cd5cc302f164ea614b9edfadd7c82c9" kindref="member">Dlambda</ref><sp/>-<sp/>args.<ref refid="a01346_1a9c0bca7ed999dcf751648d41b5d9aa78" kindref="member">stepSize</ref>;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>args.<ref refid="a01346_1aa1bc7c1fc866571e3b6b22e14ed9afcf" kindref="member">dfdDD</ref>.setZero();</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>args.<ref refid="a01346_1a198c4e48b353f1ebe5c5922bf51e34e5" kindref="member">dfdDlambda</ref><sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>NLO&gt;</highlight></codeline>
<codeline lineno="198" refid="a01354_1a4670840cb26672b50f79dfc70ba47973" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a01354_1a4670840cb26672b50f79dfc70ba47973" kindref="member">initialPrediction</ref>(NLO&amp;<sp/>nonLinearOperator,<sp/><ref refid="a01346" kindref="compound">SubsidiaryArgs</ref>&amp;<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>args.<ref refid="a01346_1a0cd5cc302f164ea614b9edfadd7c82c9" kindref="member">Dlambda</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>args.<ref refid="a01346_1a9c0bca7ed999dcf751648d41b5d9aa78" kindref="member">stepSize</ref>;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>nonLinearOperator.lastParameter()<sp/>=<sp/>args.<ref refid="a01346_1a0cd5cc302f164ea614b9edfadd7c82c9" kindref="member">Dlambda</ref>;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>NLO&gt;</highlight></codeline>
<codeline lineno="213" refid="a01354_1abd2369cff03a98552df1f8c8a4184e90" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a01354_1abd2369cff03a98552df1f8c8a4184e90" kindref="member">intermediatePrediction</ref>(NLO&amp;<sp/>nonLinearOperator,<sp/><ref refid="a01346" kindref="compound">SubsidiaryArgs</ref>&amp;<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>nonLinearOperator.lastParameter()<sp/>+=<sp/>args.<ref refid="a01346_1a0cd5cc302f164ea614b9edfadd7c82c9" kindref="member">Dlambda</ref>;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="218" refid="a01354_1a6e2ee6e5a234c1b14ce197f4a1460ed3" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="a01354_1a6e2ee6e5a234c1b14ce197f4a1460ed3" kindref="member">name</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(</highlight><highlight class="stringliteral">&quot;Load<sp/>Control&quot;</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="219"><highlight class="normal">};</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="233" refid="a01358" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="a01358" kindref="compound">DisplacementControl</ref></highlight></codeline>
<codeline lineno="234"><highlight class="normal">{</highlight></codeline>
<codeline lineno="240" refid="a01358_1aa15060bf256c9786fe44096fad899733" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="a01358_1aa15060bf256c9786fe44096fad899733" kindref="member">DisplacementControl</ref>(std::vector&lt;int&gt;<sp/>p_controlledIndices)</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>controlledIndices{<ref refid="a00410" kindref="compound">std</ref>::move(p_controlledIndices)}<sp/>{}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="250" refid="a01358_1a980d44ede46996fd077ffa1bbda66952" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a01358_1a980d44ede46996fd077ffa1bbda66952" kindref="member">operator()</ref>(<ref refid="a01346" kindref="compound">SubsidiaryArgs</ref>&amp;<sp/>args)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>controlledDOFsNorm<sp/>=<sp/>args.<ref refid="a01346_1afc97f3ae46ddd6a208b90d253aa8a7e6" kindref="member">DD</ref>(controlledIndices).norm();</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>args.<ref refid="a01346_1a628b23aa9e90c0e0ba1461ad2241645a" kindref="member">f</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>controlledDOFsNorm<sp/>-<sp/>args.<ref refid="a01346_1a9c0bca7ed999dcf751648d41b5d9aa78" kindref="member">stepSize</ref>;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>args.<ref refid="a01346_1a198c4e48b353f1ebe5c5922bf51e34e5" kindref="member">dfdDlambda</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>args.<ref refid="a01346_1aa1bc7c1fc866571e3b6b22e14ed9afcf" kindref="member">dfdDD</ref>.setZero();</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>args.<ref refid="a01346_1aa1bc7c1fc866571e3b6b22e14ed9afcf" kindref="member">dfdDD</ref>(controlledIndices)<sp/>=<sp/>args.<ref refid="a01346_1afc97f3ae46ddd6a208b90d253aa8a7e6" kindref="member">DD</ref>(controlledIndices)<sp/>/<sp/>controlledDOFsNorm;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>NLO&gt;</highlight></codeline>
<codeline lineno="268" refid="a01358_1abcca64d9ae96884cfbd65a324f15e8f8" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a01358_1abcca64d9ae96884cfbd65a324f15e8f8" kindref="member">initialPrediction</ref>(NLO&amp;<sp/>nonLinearOperator,<sp/><ref refid="a01346" kindref="compound">SubsidiaryArgs</ref>&amp;<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>args.<ref refid="a01346_1afc97f3ae46ddd6a208b90d253aa8a7e6" kindref="member">DD</ref>(controlledIndices).array()<sp/>=<sp/>args.<ref refid="a01346_1a9c0bca7ed999dcf751648d41b5d9aa78" kindref="member">stepSize</ref>;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>nonLinearOperator.firstParameter()<sp/>=<sp/>args.<ref refid="a01346_1afc97f3ae46ddd6a208b90d253aa8a7e6" kindref="member">DD</ref>;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>NLO&gt;</highlight></codeline>
<codeline lineno="283" refid="a01358_1a9a15e5b053c27997596589ded6e09616" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a01358_1a9a15e5b053c27997596589ded6e09616" kindref="member">intermediatePrediction</ref>(NLO&amp;<sp/>nonLinearOperator,<sp/><ref refid="a01346" kindref="compound">SubsidiaryArgs</ref>&amp;<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>nonLinearOperator.firstParameter()<sp/>+=<sp/>args.<ref refid="a01346_1afc97f3ae46ddd6a208b90d253aa8a7e6" kindref="member">DD</ref>;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="288" refid="a01358_1a16cd9773e9704597d967f144d674bcd4" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="a01358_1a16cd9773e9704597d967f144d674bcd4" kindref="member">name</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(</highlight><highlight class="stringliteral">&quot;Displacement<sp/>Control&quot;</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>controlledIndices;<sp/></highlight></codeline>
<codeline lineno="292"><highlight class="normal">};</highlight></codeline>
<codeline lineno="293"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Ikarus</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/__w/ikarus/ikarus/repo/ikarus/controlroutines/pathfollowingfunctions.hh"/>
  </compounddef>
</doxygen>
