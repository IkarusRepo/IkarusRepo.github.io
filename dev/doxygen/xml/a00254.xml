<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="a00254" kind="file" language="C++">
    <compoundname>invariantbased.hh</compoundname>
    <includes refid="a00260" local="no">ikarus/finiteelements/mechanics/materials/hyperelastic/deviatoric/deviatoricinvariants.hh</includes>
    <includes refid="a00275" local="no">ikarus/finiteelements/mechanics/materials/materialhelpers.hh</includes>
    <includes refid="a00233" local="no">ikarus/finiteelements/mechanics/materials/tags.hh</includes>
    <includes refid="a00032" local="no">ikarus/utils/tensorutils.hh</includes>
    <includedby refid="a00266" local="no">factory.hh</includedby>
    <incdepgraph>
      <node id="16">
        <label>ikarus/assembler/dirichletbcenforcement.hh</label>
        <link refid="a00347"/>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>ikarus/finiteelements/mechanics/materials/hyperelastic/deviatoric/deviatoricinvariants.hh</label>
        <link refid="a00260"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>invariantbased.hh</label>
        <link refid="a00254"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>ikarus/finiteelements/mechanics/materials/materialhelpers.hh</label>
        <link refid="a00275"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>ikarus/finiteelements/mechanics/materials/tags.hh</label>
        <link refid="a00233"/>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>ikarus/utils/concepts.hh</label>
        <link refid="a03101"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>ikarus/utils/makeenum.hh</label>
        <link refid="a00011"/>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>ikarus/utils/math.hh</label>
        <link refid="a00044"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>ikarus/utils/tensorutils.hh</label>
        <link refid="a00032"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>ikarus/utils/traits.hh</label>
        <link refid="a00068"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>Eigen/Dense</label>
      </node>
      <node id="14">
        <label>Eigen/Sparse</label>
      </node>
      <node id="15">
        <label>autodiff/forward/dual/dual.hpp</label>
      </node>
      <node id="8">
        <label>concepts</label>
      </node>
      <node id="18">
        <label>dune/common/exceptions.hh</label>
      </node>
      <node id="5">
        <label>dune/common/float_cmp.hh</label>
      </node>
      <node id="23">
        <label>dune/common/hybridutilities.hh</label>
      </node>
      <node id="27">
        <label>dune/common/promotiontraits.hh</label>
      </node>
      <node id="12">
        <label>dune/functions/functionspacebases/basistags.hh</label>
      </node>
      <node id="13">
        <label>dune/functions/functionspacebases/lagrangebasis.hh</label>
      </node>
      <node id="21">
        <label>functional</label>
      </node>
      <node id="25">
        <label>numeric</label>
      </node>
      <node id="4">
        <label>ranges</label>
      </node>
      <node id="22">
        <label>tuple</label>
      </node>
      <node id="9">
        <label>type_traits</label>
      </node>
      <node id="26">
        <label>unsupported/Eigen/CXX11/Tensor</label>
      </node>
      <node id="10">
        <label>utility</label>
      </node>
      <node id="11">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="4">
        <label>linearelastic.hh</label>
        <link refid="a00224"/>
      </node>
      <node id="3">
        <label>materials.hh</label>
        <link refid="a03059"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>invariantbased.hh</label>
        <link refid="a00254"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>factory.hh</label>
        <link refid="a00266"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>resultevaluators.hh</label>
        <link refid="a00353"/>
      </node>
      <node id="5">
        <label>material.hh</label>
        <link refid="a00158"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>_ikarus.cc</label>
        <link refid="a00365"/>
      </node>
      <node id="6">
        <label>materials.hh</label>
        <link refid="a03062"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="a01554" prot="public">Ikarus::Materials::InvariantBasedT</innerclass>
    <innernamespace refid="a00411">Ikarus</innernamespace>
    <innernamespace refid="a00422">Ikarus::Materials</innernamespace>
    <briefdescription>
<para>Implementation of the InvariantBased material model. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>SPDX-FileCopyrightText:<sp/>2021-2025<sp/>The<sp/>Ikarus<sp/>Developers<sp/>mueller@ibb.uni-stuttgart.de</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPDX-License-Identifier:<sp/>LGPL-3.0-or-later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="a00260" kindref="compound">ikarus/finiteelements/mechanics/materials/hyperelastic/deviatoric/deviatoricinvariants.hh</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="a00275" kindref="compound">ikarus/finiteelements/mechanics/materials/materialhelpers.hh</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="a00233" kindref="compound">ikarus/finiteelements/mechanics/materials/tags.hh</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="a00032" kindref="compound">ikarus/utils/tensorutils.hh</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="a00422" kindref="compound">Ikarus::Materials</ref><sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ST_,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n&gt;</highlight></codeline>
<codeline lineno="35" refid="a01554" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="a01554" kindref="compound">InvariantBasedT</ref></highlight></codeline>
<codeline lineno="36"><highlight class="normal">{</highlight></codeline>
<codeline lineno="37" refid="a01554_1a2f41022c3ecb76eefb765015e643034b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="a01554_1a2f41022c3ecb76eefb765015e643034b" kindref="member">ScalarType</ref><sp/>=<sp/>ST_;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ST<sp/>=<sp/>ScalarType&gt;</highlight></codeline>
<codeline lineno="40" refid="a01554_1a24bdf403b337bf93cd310a915aba9aa8" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="a01554_1a24bdf403b337bf93cd310a915aba9aa8" kindref="member">PrincipalStretches</ref><sp/>=<sp/>Eigen::Vector&lt;ST,<sp/>3&gt;;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ST<sp/>=<sp/>ScalarType&gt;</highlight></codeline>
<codeline lineno="42" refid="a01554_1a04794b6333cb664ebd7f10aa410aab01" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="a01554_1a04794b6333cb664ebd7f10aa410aab01" kindref="member">Invariants</ref><sp/>=<sp/><ref refid="a01554_1a24bdf403b337bf93cd310a915aba9aa8" kindref="member">PrincipalStretches&lt;ST&gt;</ref>;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="a01554_1a7f0b4300e1a4c2a05f9dc20f850f82d5" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="a01554_1a7f0b4300e1a4c2a05f9dc20f850f82d5" kindref="member">dim</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="45" refid="a01554_1a8252be6a2ad407fddf1abd0192b0eb52" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="a01554_1a8252be6a2ad407fddf1abd0192b0eb52" kindref="member">numMatParameters</ref><sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47" refid="a01554_1a3ceccb571b3cef82e4b9794452e010f5" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="a01554_1a3ceccb571b3cef82e4b9794452e010f5" kindref="member">Exponents</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>std::array&lt;std::size_t,<sp/>numMatParameters&gt;;</highlight></codeline>
<codeline lineno="48" refid="a01554_1a6e7eb1d8654cd930230685a6d3e34f96" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="a01554_1a6e7eb1d8654cd930230685a6d3e34f96" kindref="member">MaterialParameters</ref><sp/>=<sp/>std::array&lt;double,<sp/>numMatParameters&gt;;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ST<sp/>=<sp/>ScalarType&gt;</highlight></codeline>
<codeline lineno="51" refid="a01554_1a1a4692dc03aec1de5e9b41fa6ce5b9d4" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="a01554_1a1a4692dc03aec1de5e9b41fa6ce5b9d4" kindref="member">FirstDerivative</ref><sp/>=<sp/>Eigen::Vector&lt;ST,<sp/>dim&gt;;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ST<sp/>=<sp/>ScalarType&gt;</highlight></codeline>
<codeline lineno="53" refid="a01554_1ab6be53b2765172f6f6e093919c5a061f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="a01554_1ab6be53b2765172f6f6e093919c5a061f" kindref="member">SecondDerivative</ref><sp/>=<sp/>Eigen::Matrix&lt;ST,<sp/>dim,<sp/>dim&gt;;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="a01554_1a63e181f3b21504eaecdab7f03a0e3ac9" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="a01554_1a63e181f3b21504eaecdab7f03a0e3ac9" kindref="member">stretchTag</ref><sp/>=<sp/><ref refid="a00411_1aec3d3c4647af5c01e1bf18637b3c89feaae6dc167631992e1312a197d5c3c39f8" kindref="member">PrincipalStretchTags::deviatoric</ref>;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57" refid="a01554_1a4cc6a9ebdb6b1ec1cbbd4455734cc45f" refkind="member"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="a01554_1a4cc6a9ebdb6b1ec1cbbd4455734cc45f" kindref="member">name</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;InvariantBased<sp/>(n<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(<ref refid="a01554_1a8252be6a2ad407fddf1abd0192b0eb52" kindref="member">numMatParameters</ref>);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61" refid="a01554_1afd36f592938bcdba49ef79e9d117eead" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="a01554_1a6e7eb1d8654cd930230685a6d3e34f96" kindref="member">MaterialParameters</ref><sp/><ref refid="a01554_1afd36f592938bcdba49ef79e9d117eead" kindref="member">materialParametersImpl</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>matParameters_;<sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="a01554_1a67a85fc0ccd91330a3d72c4818db6899" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01554_1a3ceccb571b3cef82e4b9794452e010f5" kindref="member">Exponents</ref>&amp;<sp/><ref refid="a01554_1a67a85fc0ccd91330a3d72c4818db6899" kindref="member">pExponents</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pex_;<sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65" refid="a01554_1aa530b0b70ad6ed5290c574ddc38aa64c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01554_1a3ceccb571b3cef82e4b9794452e010f5" kindref="member">Exponents</ref>&amp;<sp/><ref refid="a01554_1aa530b0b70ad6ed5290c574ddc38aa64c" kindref="member">qExponents</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>qex_;<sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="74" refid="a01554_1adbb74c7796046063299444ddfa56687f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="a01554_1adbb74c7796046063299444ddfa56687f" kindref="member">InvariantBasedT</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01554_1a3ceccb571b3cef82e4b9794452e010f5" kindref="member">Exponents</ref>&amp;<sp/>pex,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01554_1a3ceccb571b3cef82e4b9794452e010f5" kindref="member">Exponents</ref>&amp;<sp/>qex,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01554_1a6e7eb1d8654cd930230685a6d3e34f96" kindref="member">MaterialParameters</ref>&amp;<sp/>matParameters)</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>pex_{pex},</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qex_{qex},</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matParameters_{matParameters}<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>checkExponents();</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ST<sp/>=<sp/>ScalarType&gt;</highlight></codeline>
<codeline lineno="89" refid="a01554_1a7c30e46f59f3ca6088f671deea149e9b" refkind="member"><highlight class="normal"><sp/><sp/>ST<sp/><ref refid="a01554_1a7c30e46f59f3ca6088f671deea149e9b" kindref="member">storedEnergyImpl</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01554_1a24bdf403b337bf93cd310a915aba9aa8" kindref="member">PrincipalStretches&lt;ST&gt;</ref>&amp;<sp/>lambda)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01554_1a04794b6333cb664ebd7f10aa410aab01" kindref="member">Invariants&lt;ST&gt;</ref>&amp;<sp/>invariants<sp/>=<sp/>Impl::invariants(lambda);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>ST<sp/>energy{0.0};</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>devInvariants<sp/>=<sp/><ref refid="a01538" kindref="compound">DeviatoricInvariants&lt;PrincipalStretches&lt;ST&gt;</ref>&gt;(lambda);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[W1,<sp/>W2]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>devInvariants.<ref refid="a01538_1a9c016a61bba2d581b57c0f373a7f822c" kindref="member">value</ref>();</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>W1<sp/>-=<sp/>3.0;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>W2<sp/>-=<sp/>3.0;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>:<sp/>parameterRange())</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>energy<sp/>+=<sp/>matParameters_[i]<sp/>*<sp/>pow(W1,<sp/>pex_[i])<sp/>*<sp/>pow(W2,<sp/>qex_[i]);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>energy;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ST<sp/>=<sp/>ScalarType&gt;</highlight></codeline>
<codeline lineno="111" refid="a01554_1acb2acf8c8ce16263d806aa5206f413f3" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="a01554_1a1a4692dc03aec1de5e9b41fa6ce5b9d4" kindref="member">FirstDerivative&lt;ST&gt;</ref><sp/><ref refid="a01554_1acb2acf8c8ce16263d806aa5206f413f3" kindref="member">firstDerivativeImpl</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01554_1a24bdf403b337bf93cd310a915aba9aa8" kindref="member">PrincipalStretches&lt;ST&gt;</ref>&amp;<sp/>lambda)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01554_1a04794b6333cb664ebd7f10aa410aab01" kindref="member">Invariants&lt;ST&gt;</ref>&amp;<sp/>invariants<sp/>=<sp/>Impl::invariants(lambda);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dWdLambda<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="a01554_1a1a4692dc03aec1de5e9b41fa6ce5b9d4" kindref="member">FirstDerivative&lt;ST&gt;::Zero</ref>().eval();</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>mu<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>matParameters_;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>devInvariants<sp/>=<sp/><ref refid="a01538" kindref="compound">DeviatoricInvariants&lt;PrincipalStretches&lt;ST&gt;</ref>&gt;(lambda);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[W1,<sp/>W2]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>devInvariants.<ref refid="a01538_1a9c016a61bba2d581b57c0f373a7f822c" kindref="member">value</ref>();</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>W1<sp/>-=<sp/>3.0;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>W2<sp/>-=<sp/>3.0;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>[dW1dLambda,<sp/>dW2dLambda]<sp/>=<sp/>devInvariants.<ref refid="a01538_1a981e70dd52fc55dcd29e0bfe6507b214" kindref="member">firstDerivative</ref>();</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>p<sp/>:<sp/>parameterRange())</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>k<sp/>:<sp/>dimensionRange())<sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>W1pm1p<sp/>=<sp/>powerAndMultiply&lt;ST&gt;(W1,<sp/>pex_[p]<sp/>-<sp/>1.0,<sp/>pex_[p]);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>W2qm1q<sp/>=<sp/>powerAndMultiply&lt;ST&gt;(W2,<sp/>qex_[p]<sp/>-<sp/>1.0,<sp/>qex_[p]);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dWdLambda[k]<sp/>+=</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mu[p]<sp/>*<sp/>((W1pm1p<sp/>*<sp/>pow(W2,<sp/>qex_[p])<sp/>*<sp/>dW1dLambda[k])<sp/>+<sp/>(pow(W1,<sp/>pex_[p])<sp/>*<sp/>W2qm1q<sp/>*<sp/>dW2dLambda[k]));</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dWdLambda;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ST<sp/>=<sp/>ScalarType&gt;</highlight></codeline>
<codeline lineno="141" refid="a01554_1a0903a7458da8578488d14ff02cc00e2c" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="a01554_1ab6be53b2765172f6f6e093919c5a061f" kindref="member">SecondDerivative&lt;ST&gt;</ref><sp/><ref refid="a01554_1a0903a7458da8578488d14ff02cc00e2c" kindref="member">secondDerivativeImpl</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01554_1a24bdf403b337bf93cd310a915aba9aa8" kindref="member">PrincipalStretches&lt;ST&gt;</ref>&amp;<sp/>lambda)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01554_1a04794b6333cb664ebd7f10aa410aab01" kindref="member">Invariants&lt;ST&gt;</ref>&amp;<sp/>invariants<sp/>=<sp/>Impl::invariants(lambda);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="a01554_1ab6be53b2765172f6f6e093919c5a061f" kindref="member">SecondDerivative&lt;ST&gt;::Zero</ref>().eval();</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>mu<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>matParameters_;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>devInvariants<sp/>=<sp/><ref refid="a01538" kindref="compound">DeviatoricInvariants&lt;PrincipalStretches&lt;ST&gt;</ref>&gt;(lambda);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[W1,<sp/>W2]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>devInvariants.<ref refid="a01538_1a9c016a61bba2d581b57c0f373a7f822c" kindref="member">value</ref>();</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>W1<sp/>-=<sp/>3.0;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>W2<sp/>-=<sp/>3.0;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>[dW1dLambda,<sp/>dW2dLambda]<sp/><sp/><sp/>=<sp/>devInvariants.<ref refid="a01538_1a981e70dd52fc55dcd29e0bfe6507b214" kindref="member">firstDerivative</ref>();</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>[ddW1dLambda,<sp/>ddW2dLambda]<sp/>=<sp/>devInvariants.secondDerivative();</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>p<sp/>:<sp/>parameterRange())</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>:<sp/>dimensionRange())</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>j<sp/>:<sp/>dimensionRange())<sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>W1pm1p<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>powerAndMultiply&lt;ST&gt;(W1,<sp/>pex_[p]<sp/>-<sp/>1.0,<sp/>pex_[p]);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>W2qm1q<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>powerAndMultiply&lt;ST&gt;(W2,<sp/>qex_[p]<sp/>-<sp/>1.0,<sp/>qex_[p]);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>W1pm2pp<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>powerAndMultiply&lt;ST&gt;(W1,<sp/>pex_[p]<sp/>-<sp/>2.0,<sp/>pex_[p]<sp/>*<sp/>(pex_[p]<sp/>-<sp/>1.0));</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>W2qm2qq<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>powerAndMultiply&lt;ST&gt;(W2,<sp/>qex_[p]<sp/>-<sp/>2.0,<sp/>qex_[p]<sp/>*<sp/>(qex_[p]<sp/>-<sp/>1.0));</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dW1W2dlambda<sp/>=<sp/>dW1dLambda[i]<sp/>*<sp/>dW2dLambda[j]<sp/>+<sp/>dW1dLambda[j]<sp/>*<sp/>dW2dLambda[i];</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>factor1<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(W2qm1q<sp/>*<sp/>dW1W2dlambda<sp/>+<sp/>pow(W2,<sp/>qex_[p])<sp/>*<sp/>ddW1dLambda(i,<sp/>j))<sp/>*<sp/>W1pm1p<sp/>*<sp/>mu[p];</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>factor2<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>W2qm1q<sp/>*<sp/>ddW2dLambda(i,<sp/>j)<sp/>*<sp/>pow(W1,<sp/>pex_[p])<sp/>*<sp/>mu[p];</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>factor3<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>W1pm2pp<sp/>*<sp/>pow(W2,<sp/>qex_[p])<sp/>*<sp/>dW1dLambda[i]<sp/>*<sp/>dW1dLambda[j]<sp/>*<sp/>mu[p];</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>factor4<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>W2qm2qq<sp/>*<sp/>pow(W1,<sp/>pex_[p])<sp/>*<sp/>dW2dLambda[i]<sp/>*<sp/>dW2dLambda[j]<sp/>*<sp/>mu[p];</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dS(i,<sp/>j)<sp/>+=<sp/>factor1<sp/>+<sp/>factor2<sp/>+<sp/>factor3<sp/>+<sp/>factor4;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>j)<sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>factor5<sp/>=</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mu[p]<sp/>*<sp/>(W1pm1p<sp/>*<sp/>pow(W2,<sp/>qex_[p])<sp/>*<sp/>dW1dLambda[i]<sp/>+<sp/>pow(W1,<sp/>pex_[p])<sp/>*<sp/>W2qm1q<sp/>*<sp/>dW2dLambda[i]);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dS(i,<sp/>j)<sp/>-=<sp/>(1.0<sp/>/<sp/>lambda[i])<sp/>*<sp/>factor5;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dS;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>STO&gt;</highlight></codeline>
<codeline lineno="181" refid="a01554_1a81e57359abb85ae74a91a85b5c12a56c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="a01554_1a81e57359abb85ae74a91a85b5c12a56c" kindref="member">rebind</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="a01554" kindref="compound">InvariantBasedT&lt;STO, numMatParameters&gt;</ref>(pex_,<sp/>qex_,<sp/>matParameters_);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><ref refid="a01554_1a3ceccb571b3cef82e4b9794452e010f5" kindref="member">Exponents</ref><sp/>pex_,<sp/>qex_;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><ref refid="a01554_1a6e7eb1d8654cd930230685a6d3e34f96" kindref="member">MaterialParameters</ref><sp/>matParameters_;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>parameterRange()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Dune::range(<ref refid="a01554_1a8252be6a2ad407fddf1abd0192b0eb52" kindref="member">numMatParameters</ref>);<sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dimensionRange()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Dune::range(<ref refid="a01554_1a7f0b4300e1a4c2a05f9dc20f850f82d5" kindref="member">dim</ref>);<sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ST&gt;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>ST<sp/>powerAndMultiply(ST<sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/></highlight><highlight class="comment">//<sp/>anything<sp/>multiplied<sp/>with<sp/>0<sp/>is<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m;<sp/></highlight><highlight class="comment">//<sp/>x^0<sp/>*<sp/>m<sp/>=<sp/>1<sp/>*<sp/>m<sp/>=<sp/>m</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>epsilon<sp/>=<sp/>std::numeric_limits&lt;double&gt;::epsilon();</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(not(std::abs(x)<sp/>&lt;<sp/>epsilon<sp/>and<sp/>p<sp/>&lt;<sp/>0)<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Raising<sp/>zero<sp/>to<sp/>a<sp/>negative<sp/>power<sp/>results<sp/>in<sp/>NaN.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::pow(x,<sp/>p)<sp/>*<sp/>m;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>checkExponents()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>:<sp/>parameterRange())</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pex_[i]<sp/>==<sp/>0<sp/>and<sp/>qex_[i]<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DUNE_THROW(Dune::InvalidStateException,<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>exponent<sp/>q&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(i)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;and<sp/>the<sp/>exponent<sp/>p&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::to_string(i)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;should<sp/>not<sp/>be<sp/>zero<sp/>at<sp/>the<sp/>same<sp/>time.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="224"><highlight class="normal">};</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n&gt;</highlight></codeline>
<codeline lineno="230" refid="a00422_1a54eda7633e477c02ff71fa6e3f40a1ab" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="a01554" kindref="compound">InvariantBased</ref><sp/>=<sp/><ref refid="a01554" kindref="compound">InvariantBasedT&lt;double, n&gt;</ref>;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Ikarus::Materials</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/materials/hyperelastic/deviatoric/invariantbased.hh"/>
  </compounddef>
</doxygen>
