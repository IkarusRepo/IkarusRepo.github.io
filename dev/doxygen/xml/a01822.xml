<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="a01822" kind="class" language="C++" prot="public">
    <compoundname>Ikarus::NewtonRaphsonWithSubsidiaryFunction</compoundname>
    <basecompoundref refid="a02006" prot="public" virt="non-virtual">Ikarus::IObservable&lt; NonLinearSolverMessages &gt;</basecompoundref>
    <includes refid="a00137" local="no">ikarus/solver/nonlinearsolver/newtonraphsonwithscalarsubsidiaryfunction.hh</includes>
    <templateparamlist>
      <param>
        <type>typename NLO</type>
      </param>
      <param>
        <type>typename LS</type>
      </param>
      <param>
        <type>typename UF</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="a01822_1abb87e0f395f9f6377c50c90fc0dcb24e" prot="public" static="no">
        <type><ref refid="a01826" kindref="compound">NewtonRaphsonWithSubsidiaryFunctionSettings</ref></type>
        <definition>using Ikarus::NewtonRaphsonWithSubsidiaryFunction&lt; NLO, LS, UF &gt;::Settings =  NewtonRaphsonWithSubsidiaryFunctionSettings</definition>
        <argsstring></argsstring>
        <name>Settings</name>
        <qualifiedname>Ikarus::NewtonRaphsonWithSubsidiaryFunction::Settings</qualifiedname>
        <briefdescription>
<para>Compile-time boolean indicating if the linear solver satisfies the non-linear solver concept. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/newtonraphsonwithscalarsubsidiaryfunction.hh" line="107" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/newtonraphsonwithscalarsubsidiaryfunction.hh" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="a01822_1a2bfe4785b1216911ef967fea45a4b9e8" prot="public" static="no">
        <type>typename NLO::template ParameterValue&lt; 0 &gt;</type>
        <definition>using Ikarus::NewtonRaphsonWithSubsidiaryFunction&lt; NLO, LS, UF &gt;::ValueType =  typename NLO::template ParameterValue&lt;0&gt;</definition>
        <argsstring></argsstring>
        <name>ValueType</name>
        <qualifiedname>Ikarus::NewtonRaphsonWithSubsidiaryFunction::ValueType</qualifiedname>
        <briefdescription>
<para>Type representing the update function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/newtonraphsonwithscalarsubsidiaryfunction.hh" line="113" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/newtonraphsonwithscalarsubsidiaryfunction.hh" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="a01822_1a129397c33f072adf0a119868280ae165" prot="public" static="no">
        <type>UF</type>
        <definition>using Ikarus::NewtonRaphsonWithSubsidiaryFunction&lt; NLO, LS, UF &gt;::UpdateFunctionType =  UF</definition>
        <argsstring></argsstring>
        <name>UpdateFunctionType</name>
        <qualifiedname>Ikarus::NewtonRaphsonWithSubsidiaryFunction::UpdateFunctionType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/newtonraphsonwithscalarsubsidiaryfunction.hh" line="115" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/newtonraphsonwithscalarsubsidiaryfunction.hh" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="a01822_1aef79b0fa82503669e86d848d842cf5d8" prot="public" static="no">
        <type>NLO</type>
        <definition>using Ikarus::NewtonRaphsonWithSubsidiaryFunction&lt; NLO, LS, UF &gt;::NonLinearOperator =  NLO</definition>
        <argsstring></argsstring>
        <name>NonLinearOperator</name>
        <qualifiedname>Ikarus::NewtonRaphsonWithSubsidiaryFunction::NonLinearOperator</qualifiedname>
        <briefdescription>
<para>Type of the non-linear operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/newtonraphsonwithscalarsubsidiaryfunction.hh" line="116" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/newtonraphsonwithscalarsubsidiaryfunction.hh" bodystart="116" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="a01822_1a371ae6b37b18c88c4e2c0f14e52eada5" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool Ikarus::NewtonRaphsonWithSubsidiaryFunction&lt; NLO, LS, UF &gt;::isLinearSolver</definition>
        <argsstring></argsstring>
        <name>isLinearSolver</name>
        <qualifiedname>Ikarus::NewtonRaphsonWithSubsidiaryFunction::isLinearSolver</qualifiedname>
        <initializer>=
      <ref refid="a02083" kindref="compound">Ikarus::Concepts::LinearSolverCheck</ref>&lt;LS, typename NLO::DerivativeType, typename NLO::ValueType&gt;</initializer>
        <briefdescription>
<para>Type representing the parameter vector of the nonlinear operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/newtonraphsonwithscalarsubsidiaryfunction.hh" line="109" column="25" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/newtonraphsonwithscalarsubsidiaryfunction.hh" bodystart="109" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="a01822_1a036d06308bd5051826ca60f8555491cb" prot="private" static="no" mutable="no">
        <type>NLO</type>
        <definition>NLO Ikarus::NewtonRaphsonWithSubsidiaryFunction&lt; NLO, LS, UF &gt;::nonLinearOperator_</definition>
        <argsstring></argsstring>
        <name>nonLinearOperator_</name>
        <qualifiedname>Ikarus::NewtonRaphsonWithSubsidiaryFunction::nonLinearOperator_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/newtonraphsonwithscalarsubsidiaryfunction.hh" line="262" column="7" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/newtonraphsonwithscalarsubsidiaryfunction.hh" bodystart="262" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a01822_1a2919e9a2072cda94714ee4c408f6ede4" prot="private" static="no" mutable="no">
        <type>LS</type>
        <definition>LS Ikarus::NewtonRaphsonWithSubsidiaryFunction&lt; NLO, LS, UF &gt;::linearSolver_</definition>
        <argsstring></argsstring>
        <name>linearSolver_</name>
        <qualifiedname>Ikarus::NewtonRaphsonWithSubsidiaryFunction::linearSolver_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/newtonraphsonwithscalarsubsidiaryfunction.hh" line="263" column="6" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/newtonraphsonwithscalarsubsidiaryfunction.hh" bodystart="263" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a01822_1ab159e2e96ecd179e7059790bc3492021" prot="private" static="no" mutable="no">
        <type>UF</type>
        <definition>UF Ikarus::NewtonRaphsonWithSubsidiaryFunction&lt; NLO, LS, UF &gt;::updateFunction_</definition>
        <argsstring></argsstring>
        <name>updateFunction_</name>
        <qualifiedname>Ikarus::NewtonRaphsonWithSubsidiaryFunction::updateFunction_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/newtonraphsonwithscalarsubsidiaryfunction.hh" line="264" column="6" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/newtonraphsonwithscalarsubsidiaryfunction.hh" bodystart="264" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a01822_1a00fed31378b15d7afc2debf680a87d3d" prot="private" static="no" mutable="no">
        <type><ref refid="a01822_1abb87e0f395f9f6377c50c90fc0dcb24e" kindref="member">Settings</ref></type>
        <definition>Settings Ikarus::NewtonRaphsonWithSubsidiaryFunction&lt; NLO, LS, UF &gt;::settings_</definition>
        <argsstring></argsstring>
        <name>settings_</name>
        <qualifiedname>Ikarus::NewtonRaphsonWithSubsidiaryFunction::settings_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/newtonraphsonwithscalarsubsidiaryfunction.hh" line="265" column="12" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/newtonraphsonwithscalarsubsidiaryfunction.hh" bodystart="265" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="a01822_1a36b08b1c18739fe005626ca32b4fe04d" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename LS2</type>
            <defval>LS</defval>
          </param>
          <param>
            <type>typename UF2</type>
            <defval>UF</defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>Ikarus::NewtonRaphsonWithSubsidiaryFunction&lt; NLO, LS, UF &gt;::NewtonRaphsonWithSubsidiaryFunction</definition>
        <argsstring>(const NLO &amp;nonLinearOperator, LS2 &amp;&amp;linearSolver={}, UF2 &amp;&amp;updateFunction={})</argsstring>
        <name>NewtonRaphsonWithSubsidiaryFunction</name>
        <qualifiedname>Ikarus::NewtonRaphsonWithSubsidiaryFunction::NewtonRaphsonWithSubsidiaryFunction</qualifiedname>
        <param>
          <type>const NLO &amp;</type>
          <declname>nonLinearOperator</declname>
        </param>
        <param>
          <type>LS2 &amp;&amp;</type>
          <declname>linearSolver</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>UF2 &amp;&amp;</type>
          <declname>updateFunction</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Constructor for <ref refid="a01822" kindref="compound">NewtonRaphsonWithSubsidiaryFunction</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nonLinearOperator</parametername>
</parameternamelist>
<parameterdescription>
<para>Nonlinear operator to solve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>linearSolver</parametername>
</parameternamelist>
<parameterdescription>
<para>Linear solver used internally (default is SolverDefault). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>updateFunction</parametername>
</parameternamelist>
<parameterdescription>
<para>Update function (default is UpdateDefault). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/newtonraphsonwithscalarsubsidiaryfunction.hh" line="126" column="12" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/newtonraphsonwithscalarsubsidiaryfunction.hh" bodystart="126" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="a01822_1aedb80f72d99faad89b81e21ba7956a19" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::NewtonRaphsonWithSubsidiaryFunction&lt; NLO, LS, UF &gt;::setup</definition>
        <argsstring>(const Settings &amp;settings)</argsstring>
        <name>setup</name>
        <qualifiedname>Ikarus::NewtonRaphsonWithSubsidiaryFunction::setup</qualifiedname>
        <param>
          <type>const <ref refid="a01822_1abb87e0f395f9f6377c50c90fc0dcb24e" kindref="member">Settings</ref> &amp;</type>
          <declname>settings</declname>
        </param>
        <briefdescription>
<para>Setup the Newton-Raphson solver with subsidiary function. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_settings</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings for the solver. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/newtonraphsonwithscalarsubsidiaryfunction.hh" line="137" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/newtonraphsonwithscalarsubsidiaryfunction.hh" bodystart="137" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="a01822_1ad5287b7971ef03771d6e267eebb6d9d8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SolutionType</type>
            <defval>NoPredictor</defval>
          </param>
          <param>
            <type>typename SubsidiaryType</type>
          </param>
        </templateparamlist>
        <type><ref refid="a01838" kindref="compound">NonLinearSolverInformation</ref></type>
        <definition>NonLinearSolverInformation Ikarus::NewtonRaphsonWithSubsidiaryFunction&lt; NLO, LS, UF &gt;::solve</definition>
        <argsstring>(SubsidiaryType &amp;&amp;subsidiaryFunction, SubsidiaryArgs &amp;subsidiaryArgs, const SolutionType &amp;dxPredictor=NoPredictor{})</argsstring>
        <name>solve</name>
        <qualifiedname>Ikarus::NewtonRaphsonWithSubsidiaryFunction::solve</qualifiedname>
        <param>
          <type>SubsidiaryType &amp;&amp;</type>
          <declname>subsidiaryFunction</declname>
        </param>
        <param>
          <type><ref refid="a01346" kindref="compound">SubsidiaryArgs</ref> &amp;</type>
          <declname>subsidiaryArgs</declname>
        </param>
        <param>
          <type>const SolutionType &amp;</type>
          <declname>dxPredictor</declname>
          <defval>NoPredictor{}</defval>
        </param>
    <requiresclause>std::is_same_v&lt;SolutionType, NoPredictor&gt; || std::is_convertible_v&lt;SolutionType, std::remove_cvref_t&lt;typename NLO::ValueType&gt;&gt;    </requiresclause>
        <briefdescription>
<para>Solve the nonlinear system using the Newton-Raphson method with subsidiary function. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>SolutionType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the solution predictor (default is NoPredictor). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SubsidiaryType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the subsidiary function. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>subsidiaryFunction</parametername>
</parameternamelist>
<parameterdescription>
<para>Subsidiary function to be solved. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>subsidiaryArgs</parametername>
</parameternamelist>
<parameterdescription>
<para>Additional arguments for the subsidiary function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dxPredictor</parametername>
</parameternamelist>
<parameterdescription>
<para>Predictor for the solution increment (default is NoPredictor). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Information about the solution process. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>Initializations</para>
<para>Determine Fext0 It is assumed that Fext = Fext0 * lambda such that dRdlambda = Fext0 Generalization for Fext0 = Fext0(lambda) is not implemented</para>
<para>Iterative solving scheme</para>
<para>Two-step solving procedure</para>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/newtonraphsonwithscalarsubsidiaryfunction.hh" line="161" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/newtonraphsonwithscalarsubsidiaryfunction.hh" bodystart="161" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="a01822_1ad1e2d29e41b8596d709effc804bc8718" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto &amp;</type>
        <definition>auto &amp; Ikarus::NewtonRaphsonWithSubsidiaryFunction&lt; NLO, LS, UF &gt;::nonLinearOperator</definition>
        <argsstring>()</argsstring>
        <name>nonLinearOperator</name>
        <qualifiedname>Ikarus::NewtonRaphsonWithSubsidiaryFunction::nonLinearOperator</qualifiedname>
        <briefdescription>
<para>Access the nonlinear operator. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Reference to the nonlinear operator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/newtonraphsonwithscalarsubsidiaryfunction.hh" line="259" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/newtonraphsonwithscalarsubsidiaryfunction.hh" bodystart="259" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="a02006_1ad67c98f02c195b788f78a229e1898006" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; MT &gt;::subscribe</definition>
        <argsstring>(NonLinearSolverMessages message, std::shared_ptr&lt; IObserver&lt; NonLinearSolverMessages &gt; &gt; observer)</argsstring>
        <name>subscribe</name>
        <qualifiedname>Ikarus::IObservable&lt; NonLinearSolverMessages &gt;::subscribe</qualifiedname>
        <param>
          <type><ref refid="a00405_1ga662b2b6a80547adf4b9ce8b30d87fab5" kindref="member">NonLinearSolverMessages</ref></type>
          <declname>message</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="a02002" kindref="compound">IObserver</ref>&lt; <ref refid="a00405_1ga662b2b6a80547adf4b9ce8b30d87fab5" kindref="member">NonLinearSolverMessages</ref> &gt; &gt;</type>
          <declname>observer</declname>
        </param>
        <briefdescription>
<para>Subscribe an observer to receive notifications for a specific message type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The message type to subscribe to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>observer</parametername>
</parameternamelist>
<parameterdescription>
<para>The observer to be subscribed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="141" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="225" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="a02006_1a13bd8d73b485186680f640786e2682e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; NonLinearSolverMessages  &gt;::subscribeAll</definition>
        <argsstring>(std::shared_ptr&lt; IObserver&lt; NonLinearSolverMessages &gt; &gt; observer)</argsstring>
        <name>subscribeAll</name>
        <qualifiedname>Ikarus::IObservable&lt; NonLinearSolverMessages &gt;::subscribeAll</qualifiedname>
        <param>
          <type>std::shared_ptr&lt; <ref refid="a02002" kindref="compound">IObserver</ref>&lt; <ref refid="a00405_1ga662b2b6a80547adf4b9ce8b30d87fab5" kindref="member">NonLinearSolverMessages</ref> &gt; &gt;</type>
          <declname>observer</declname>
        </param>
        <briefdescription>
<para>Subscribe an observer to receive notifications for all message types. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>observer</parametername>
</parameternamelist>
<parameterdescription>
<para>The observer to be subscribed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="146" column="8"/>
      </memberdef>
      <memberdef kind="function" id="a02006_1a026462a1a050728e37bc24e33d2edd9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; NonLinearSolverMessages  &gt;::subscribeAll</definition>
        <argsstring>(std::initializer_list&lt; std::shared_ptr&lt; IObserver&lt; NonLinearSolverMessages &gt; &gt; &gt; observers)</argsstring>
        <name>subscribeAll</name>
        <qualifiedname>Ikarus::IObservable&lt; NonLinearSolverMessages &gt;::subscribeAll</qualifiedname>
        <param>
          <type>std::initializer_list&lt; std::shared_ptr&lt; <ref refid="a02002" kindref="compound">IObserver</ref>&lt; <ref refid="a00405_1ga662b2b6a80547adf4b9ce8b30d87fab5" kindref="member">NonLinearSolverMessages</ref> &gt; &gt; &gt;</type>
          <declname>observers</declname>
        </param>
        <briefdescription>
<para>Subscribe multiple observers to receive notifications for all message types. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>observers</parametername>
</parameternamelist>
<parameterdescription>
<para>List of observers to be subscribed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="151" column="8"/>
      </memberdef>
      <memberdef kind="function" id="a02006_1a3eb718b8fa1ecc373371a6751a316b24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; MT &gt;::unSubscribe</definition>
        <argsstring>(NonLinearSolverMessages message, std::shared_ptr&lt; IObserver&lt; NonLinearSolverMessages &gt; &gt; observer)</argsstring>
        <name>unSubscribe</name>
        <qualifiedname>Ikarus::IObservable&lt; NonLinearSolverMessages &gt;::unSubscribe</qualifiedname>
        <param>
          <type><ref refid="a00405_1ga662b2b6a80547adf4b9ce8b30d87fab5" kindref="member">NonLinearSolverMessages</ref></type>
          <declname>message</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="a02002" kindref="compound">IObserver</ref>&lt; <ref refid="a00405_1ga662b2b6a80547adf4b9ce8b30d87fab5" kindref="member">NonLinearSolverMessages</ref> &gt; &gt;</type>
          <declname>observer</declname>
        </param>
        <briefdescription>
<para>Unsubscribe an observer from receiving notifications for a specific message type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The message type to unsubscribe from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>observer</parametername>
</parameternamelist>
<parameterdescription>
<para>The observer to be unsubscribed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="157" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="245" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="a02006_1a378a520833df0d6e27dbb35b621c838d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; MT &gt;::unSubscribeAll</definition>
        <argsstring>(std::shared_ptr&lt; IObserver&lt; NonLinearSolverMessages &gt; &gt; observer)</argsstring>
        <name>unSubscribeAll</name>
        <qualifiedname>Ikarus::IObservable&lt; NonLinearSolverMessages &gt;::unSubscribeAll</qualifiedname>
        <param>
          <type>std::shared_ptr&lt; <ref refid="a02002" kindref="compound">IObserver</ref>&lt; <ref refid="a00405_1ga662b2b6a80547adf4b9ce8b30d87fab5" kindref="member">NonLinearSolverMessages</ref> &gt; &gt;</type>
          <declname>observer</declname>
        </param>
        <briefdescription>
<para>Unsubscribe an observer from receiving notifications for all message types. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>observer</parametername>
</parameternamelist>
<parameterdescription>
<para>The observer to be unsubscribed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="162" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="251" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="a02006_1a4bce3750aa7d52aff9baf122a54e16b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; NonLinearSolverMessages  &gt;::notify</definition>
        <argsstring>(NonLinearSolverMessages message)</argsstring>
        <name>notify</name>
        <qualifiedname>Ikarus::IObservable&lt; NonLinearSolverMessages &gt;::notify</qualifiedname>
        <param>
          <type><ref refid="a00405_1ga662b2b6a80547adf4b9ce8b30d87fab5" kindref="member">NonLinearSolverMessages</ref></type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>Notify observers about a specific message type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The message type to notify about. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="167" column="8"/>
      </memberdef>
      <memberdef kind="function" id="a02006_1ac035ba934c33e090c4a45128ac13f190" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; NonLinearSolverMessages  &gt;::notify</definition>
        <argsstring>(NonLinearSolverMessages message, ScalarType val)</argsstring>
        <name>notify</name>
        <qualifiedname>Ikarus::IObservable&lt; NonLinearSolverMessages &gt;::notify</qualifiedname>
        <param>
          <type><ref refid="a00405_1ga662b2b6a80547adf4b9ce8b30d87fab5" kindref="member">NonLinearSolverMessages</ref></type>
          <declname>message</declname>
        </param>
        <param>
          <type>ScalarType</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Notify observers about a specific message type with a floating-point value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ScalarType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the floating-point value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The message type to notify about. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The floating-point value to be sent with the notification. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="176" column="8"/>
      </memberdef>
      <memberdef kind="function" id="a02006_1a47ac8ae7cc4e9304cfb220f1d93ce1fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; NonLinearSolverMessages  &gt;::notify</definition>
        <argsstring>(NonLinearSolverMessages message, int val)</argsstring>
        <name>notify</name>
        <qualifiedname>Ikarus::IObservable&lt; NonLinearSolverMessages &gt;::notify</qualifiedname>
        <param>
          <type><ref refid="a00405_1ga662b2b6a80547adf4b9ce8b30d87fab5" kindref="member">NonLinearSolverMessages</ref></type>
          <declname>message</declname>
        </param>
        <param>
          <type>int</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Notify observers about a specific message type with an integer value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The message type to notify about. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The integer value to be sent with the notification. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="183" column="8"/>
      </memberdef>
      <memberdef kind="function" id="a02006_1a2f93322aa7327069dd4469983933bd16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; NonLinearSolverMessages  &gt;::notify</definition>
        <argsstring>(NonLinearSolverMessages message, const std::string &amp;val)</argsstring>
        <name>notify</name>
        <qualifiedname>Ikarus::IObservable&lt; NonLinearSolverMessages &gt;::notify</qualifiedname>
        <param>
          <type><ref refid="a00405_1ga662b2b6a80547adf4b9ce8b30d87fab5" kindref="member">NonLinearSolverMessages</ref></type>
          <declname>message</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Notify observers about a specific message type with a string value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The message type to notify about. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The string value to be sent with the notification. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="190" column="8"/>
      </memberdef>
      <memberdef kind="function" id="a02006_1ae0c6cec757e540f22b65fce1f782e380" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; NonLinearSolverMessages  &gt;::notify</definition>
        <argsstring>(NonLinearSolverMessages message, int val1, double val2)</argsstring>
        <name>notify</name>
        <qualifiedname>Ikarus::IObservable&lt; NonLinearSolverMessages &gt;::notify</qualifiedname>
        <param>
          <type><ref refid="a00405_1ga662b2b6a80547adf4b9ce8b30d87fab5" kindref="member">NonLinearSolverMessages</ref></type>
          <declname>message</declname>
        </param>
        <param>
          <type>int</type>
          <declname>val1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>val2</declname>
        </param>
        <briefdescription>
<para>Notify observers about a specific message type with an integer and a double value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The message type to notify about. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val1</parametername>
</parameternamelist>
<parameterdescription>
<para>The integer value to be sent with the notification. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val2</parametername>
</parameternamelist>
<parameterdescription>
<para>The double value to be sent with the notification. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="198" column="8"/>
      </memberdef>
      <memberdef kind="function" id="a02006_1a72e3156874ce81a1c7548b9f74db522c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; NonLinearSolverMessages  &gt;::notify</definition>
        <argsstring>(NonLinearSolverMessages message, int val1, const std::string &amp;val2)</argsstring>
        <name>notify</name>
        <qualifiedname>Ikarus::IObservable&lt; NonLinearSolverMessages &gt;::notify</qualifiedname>
        <param>
          <type><ref refid="a00405_1ga662b2b6a80547adf4b9ce8b30d87fab5" kindref="member">NonLinearSolverMessages</ref></type>
          <declname>message</declname>
        </param>
        <param>
          <type>int</type>
          <declname>val1</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>val2</declname>
        </param>
        <briefdescription>
<para>Notify observers about a specific message type with an integer value and a string value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The message type to notify about. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val1</parametername>
</parameternamelist>
<parameterdescription>
<para>The integer value to be sent with the notification. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val2</parametername>
</parameternamelist>
<parameterdescription>
<para>The string value to be sent with the notification. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="206" column="8"/>
      </memberdef>
      <memberdef kind="function" id="a02006_1ac72b261cd2af7f59e98f1504814bc785" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; NonLinearSolverMessages  &gt;::notify</definition>
        <argsstring>(NonLinearSolverMessages message, Eigen::VectorX&lt; ScalarType &gt; vec)</argsstring>
        <name>notify</name>
        <qualifiedname>Ikarus::IObservable&lt; NonLinearSolverMessages &gt;::notify</qualifiedname>
        <param>
          <type><ref refid="a00405_1ga662b2b6a80547adf4b9ce8b30d87fab5" kindref="member">NonLinearSolverMessages</ref></type>
          <declname>message</declname>
        </param>
        <param>
          <type>Eigen::VectorX&lt; ScalarType &gt;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
<para>Notify observers about a specific message type with an Eigen::VectorX. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ScalarType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the elements in the Eigen::VectorX. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The message type to notify about. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vec</parametername>
</parameternamelist>
<parameterdescription>
<para>The Eigen::VectorX to be sent with the notification. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="215" column="8"/>
      </memberdef>
      <memberdef kind="function" id="a02006_1a19047649c66f704c2ba2f1276c1a0e8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; NonLinearSolverMessages  &gt;::notify</definition>
        <argsstring>(MT message)</argsstring>
        <name>notify</name>
        <qualifiedname>Ikarus::IObservable&lt; NonLinearSolverMessages &gt;::notify</qualifiedname>
        <param>
          <type>MT</type>
          <declname>message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="257" column="18" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="257" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="a02006_1a03d4668b7111180f0427e8382359f3bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; NonLinearSolverMessages  &gt;::notify</definition>
        <argsstring>(MT message, ScalarType val)</argsstring>
        <name>notify</name>
        <qualifiedname>Ikarus::IObservable&lt; NonLinearSolverMessages &gt;::notify</qualifiedname>
        <param>
          <type>MT</type>
          <declname>message</declname>
        </param>
        <param>
          <type>ScalarType</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="265" column="18" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="265" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="a02006_1ad758bd6f15e8228a3439f52ee2ad6aaa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; NonLinearSolverMessages  &gt;::notify</definition>
        <argsstring>(MT message, int val)</argsstring>
        <name>notify</name>
        <qualifiedname>Ikarus::IObservable&lt; NonLinearSolverMessages &gt;::notify</qualifiedname>
        <param>
          <type>MT</type>
          <declname>message</declname>
        </param>
        <param>
          <type>int</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="272" column="18" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="272" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="a02006_1acf19e220bc71c046619dd21b3f50e8bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; NonLinearSolverMessages  &gt;::notify</definition>
        <argsstring>(MT message, const std::string &amp;val)</argsstring>
        <name>notify</name>
        <qualifiedname>Ikarus::IObservable&lt; NonLinearSolverMessages &gt;::notify</qualifiedname>
        <param>
          <type>MT</type>
          <declname>message</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="279" column="18" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="279" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="a02006_1aae4ef907815822352e07fe25cefa8980" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; NonLinearSolverMessages  &gt;::notify</definition>
        <argsstring>(MT message, int val1, double val2)</argsstring>
        <name>notify</name>
        <qualifiedname>Ikarus::IObservable&lt; NonLinearSolverMessages &gt;::notify</qualifiedname>
        <param>
          <type>MT</type>
          <declname>message</declname>
        </param>
        <param>
          <type>int</type>
          <declname>val1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>val2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="286" column="18" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="286" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="a02006_1ae12cb2deb2aa20f0cbc3d78b9a562eb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; NonLinearSolverMessages  &gt;::notify</definition>
        <argsstring>(MT message, int val1, const std::string &amp;val2)</argsstring>
        <name>notify</name>
        <qualifiedname>Ikarus::IObservable&lt; NonLinearSolverMessages &gt;::notify</qualifiedname>
        <param>
          <type>MT</type>
          <declname>message</declname>
        </param>
        <param>
          <type>int</type>
          <declname>val1</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>val2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="293" column="18" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="293" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="a02006_1aa5a60c5b81bb92de527c49ea8fce147d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; NonLinearSolverMessages  &gt;::notify</definition>
        <argsstring>(MT message, Eigen::VectorX&lt; ScalarType &gt; vec)</argsstring>
        <name>notify</name>
        <qualifiedname>Ikarus::IObservable&lt; NonLinearSolverMessages &gt;::notify</qualifiedname>
        <param>
          <type>MT</type>
          <declname>message</declname>
        </param>
        <param>
          <type>Eigen::VectorX&lt; ScalarType &gt;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="301" column="18" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="301" bodyend="305"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Newton-Raphson solver with subsidiary function. </para>
    </briefdescription>
    <detaileddescription>
<para>This class provides a Newton-Raphson solver for solving nonlinear systems with a subsidiary function. It uses a linear solver to handle the linear system arising in each iteration.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>NLO</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the nonlinear operator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>LS</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the linear solver used internally (default is SolverDefault). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>UF</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the update function (default is UpdateDefault). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>Ikarus::IObservable&lt; NonLinearSolverMessages &gt;</label>
        <link refid="a02006"/>
        <childnode refid="3" relation="template-instance">
          <edgelabel>&lt; NonLinearSolverMessages &gt;</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>Ikarus::IObservable&lt; MessageType &gt;</label>
        <link refid="a02006"/>
      </node>
      <node id="1">
        <label>Ikarus::NewtonRaphsonWithSubsidiaryFunction&lt; NLO, LS, UF &gt;</label>
        <link refid="a01822"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>Ikarus::IObservable&lt; NonLinearSolverMessages &gt;</label>
        <link refid="a02006"/>
        <childnode refid="3" relation="template-instance">
          <edgelabel>&lt; NonLinearSolverMessages &gt;</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>Ikarus::IObservable&lt; MessageType &gt;</label>
        <link refid="a02006"/>
      </node>
      <node id="1">
        <label>Ikarus::NewtonRaphsonWithSubsidiaryFunction&lt; NLO, LS, UF &gt;</label>
        <link refid="a01822"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/newtonraphsonwithscalarsubsidiaryfunction.hh" line="104" column="1" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/newtonraphsonwithscalarsubsidiaryfunction.hh" bodystart="105" bodyend="266"/>
    <listofallmembers>
      <member refid="a02006_1ac8058d5b1ebb462a10712ba598154e23" prot="public" virt="non-virtual"><scope>Ikarus::NewtonRaphsonWithSubsidiaryFunction</scope><name>IObservable</name></member>
      <member refid="a01822_1a371ae6b37b18c88c4e2c0f14e52eada5" prot="public" virt="non-virtual"><scope>Ikarus::NewtonRaphsonWithSubsidiaryFunction</scope><name>isLinearSolver</name></member>
      <member refid="a01822_1a2919e9a2072cda94714ee4c408f6ede4" prot="private" virt="non-virtual"><scope>Ikarus::NewtonRaphsonWithSubsidiaryFunction</scope><name>linearSolver_</name></member>
      <member refid="a01822_1a36b08b1c18739fe005626ca32b4fe04d" prot="public" virt="non-virtual"><scope>Ikarus::NewtonRaphsonWithSubsidiaryFunction</scope><name>NewtonRaphsonWithSubsidiaryFunction</name></member>
      <member refid="a01822_1aef79b0fa82503669e86d848d842cf5d8" prot="public" virt="non-virtual"><scope>Ikarus::NewtonRaphsonWithSubsidiaryFunction</scope><name>NonLinearOperator</name></member>
      <member refid="a01822_1ad1e2d29e41b8596d709effc804bc8718" prot="public" virt="non-virtual"><scope>Ikarus::NewtonRaphsonWithSubsidiaryFunction</scope><name>nonLinearOperator</name></member>
      <member refid="a01822_1a036d06308bd5051826ca60f8555491cb" prot="private" virt="non-virtual"><scope>Ikarus::NewtonRaphsonWithSubsidiaryFunction</scope><name>nonLinearOperator_</name></member>
      <member refid="a02006_1a4bce3750aa7d52aff9baf122a54e16b5" prot="public" virt="non-virtual"><scope>Ikarus::NewtonRaphsonWithSubsidiaryFunction</scope><name>notify</name></member>
      <member refid="a02006_1ac035ba934c33e090c4a45128ac13f190" prot="public" virt="non-virtual"><scope>Ikarus::NewtonRaphsonWithSubsidiaryFunction</scope><name>notify</name></member>
      <member refid="a02006_1a47ac8ae7cc4e9304cfb220f1d93ce1fc" prot="public" virt="non-virtual"><scope>Ikarus::NewtonRaphsonWithSubsidiaryFunction</scope><name>notify</name></member>
      <member refid="a02006_1a2f93322aa7327069dd4469983933bd16" prot="public" virt="non-virtual"><scope>Ikarus::NewtonRaphsonWithSubsidiaryFunction</scope><name>notify</name></member>
      <member refid="a02006_1ae0c6cec757e540f22b65fce1f782e380" prot="public" virt="non-virtual"><scope>Ikarus::NewtonRaphsonWithSubsidiaryFunction</scope><name>notify</name></member>
      <member refid="a02006_1a72e3156874ce81a1c7548b9f74db522c" prot="public" virt="non-virtual"><scope>Ikarus::NewtonRaphsonWithSubsidiaryFunction</scope><name>notify</name></member>
      <member refid="a02006_1ac72b261cd2af7f59e98f1504814bc785" prot="public" virt="non-virtual"><scope>Ikarus::NewtonRaphsonWithSubsidiaryFunction</scope><name>notify</name></member>
      <member refid="a02006_1a19047649c66f704c2ba2f1276c1a0e8b" prot="public" virt="non-virtual"><scope>Ikarus::NewtonRaphsonWithSubsidiaryFunction</scope><name>notify</name></member>
      <member refid="a02006_1a03d4668b7111180f0427e8382359f3bf" prot="public" virt="non-virtual"><scope>Ikarus::NewtonRaphsonWithSubsidiaryFunction</scope><name>notify</name></member>
      <member refid="a02006_1ad758bd6f15e8228a3439f52ee2ad6aaa" prot="public" virt="non-virtual"><scope>Ikarus::NewtonRaphsonWithSubsidiaryFunction</scope><name>notify</name></member>
      <member refid="a02006_1acf19e220bc71c046619dd21b3f50e8bb" prot="public" virt="non-virtual"><scope>Ikarus::NewtonRaphsonWithSubsidiaryFunction</scope><name>notify</name></member>
      <member refid="a02006_1aae4ef907815822352e07fe25cefa8980" prot="public" virt="non-virtual"><scope>Ikarus::NewtonRaphsonWithSubsidiaryFunction</scope><name>notify</name></member>
      <member refid="a02006_1ae12cb2deb2aa20f0cbc3d78b9a562eb3" prot="public" virt="non-virtual"><scope>Ikarus::NewtonRaphsonWithSubsidiaryFunction</scope><name>notify</name></member>
      <member refid="a02006_1aa5a60c5b81bb92de527c49ea8fce147d" prot="public" virt="non-virtual"><scope>Ikarus::NewtonRaphsonWithSubsidiaryFunction</scope><name>notify</name></member>
      <member refid="a01822_1abb87e0f395f9f6377c50c90fc0dcb24e" prot="public" virt="non-virtual"><scope>Ikarus::NewtonRaphsonWithSubsidiaryFunction</scope><name>Settings</name></member>
      <member refid="a01822_1a00fed31378b15d7afc2debf680a87d3d" prot="private" virt="non-virtual"><scope>Ikarus::NewtonRaphsonWithSubsidiaryFunction</scope><name>settings_</name></member>
      <member refid="a01822_1aedb80f72d99faad89b81e21ba7956a19" prot="public" virt="non-virtual"><scope>Ikarus::NewtonRaphsonWithSubsidiaryFunction</scope><name>setup</name></member>
      <member refid="a01822_1ad5287b7971ef03771d6e267eebb6d9d8" prot="public" virt="non-virtual"><scope>Ikarus::NewtonRaphsonWithSubsidiaryFunction</scope><name>solve</name></member>
      <member refid="a02006_1ad67c98f02c195b788f78a229e1898006" prot="public" virt="non-virtual"><scope>Ikarus::NewtonRaphsonWithSubsidiaryFunction</scope><name>subscribe</name></member>
      <member refid="a02006_1a13bd8d73b485186680f640786e2682e5" prot="public" virt="non-virtual"><scope>Ikarus::NewtonRaphsonWithSubsidiaryFunction</scope><name>subscribeAll</name></member>
      <member refid="a02006_1a026462a1a050728e37bc24e33d2edd9c" prot="public" virt="non-virtual"><scope>Ikarus::NewtonRaphsonWithSubsidiaryFunction</scope><name>subscribeAll</name></member>
      <member refid="a02006_1a3eb718b8fa1ecc373371a6751a316b24" prot="public" virt="non-virtual"><scope>Ikarus::NewtonRaphsonWithSubsidiaryFunction</scope><name>unSubscribe</name></member>
      <member refid="a02006_1a378a520833df0d6e27dbb35b621c838d" prot="public" virt="non-virtual"><scope>Ikarus::NewtonRaphsonWithSubsidiaryFunction</scope><name>unSubscribeAll</name></member>
      <member refid="a01822_1ab159e2e96ecd179e7059790bc3492021" prot="private" virt="non-virtual"><scope>Ikarus::NewtonRaphsonWithSubsidiaryFunction</scope><name>updateFunction_</name></member>
      <member refid="a01822_1a129397c33f072adf0a119868280ae165" prot="public" virt="non-virtual"><scope>Ikarus::NewtonRaphsonWithSubsidiaryFunction</scope><name>UpdateFunctionType</name></member>
      <member refid="a01822_1a2bfe4785b1216911ef967fea45a4b9e8" prot="public" virt="non-virtual"><scope>Ikarus::NewtonRaphsonWithSubsidiaryFunction</scope><name>ValueType</name></member>
      <member refid="a02006_1ad1fe15b31cccec8e44c695af550938ed" prot="public" virt="virtual"><scope>Ikarus::NewtonRaphsonWithSubsidiaryFunction</scope><name>~IObservable</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
