<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="a00248" kind="file" language="C++">
    <compoundname>vanishinghelpers.hh</compoundname>
    <includes local="no">ranges</includes>
    <includes local="no">Eigen/Dense</includes>
    <includes refid="a00047" local="no">ikarus/utils/concepts.hh</includes>
    <includedby refid="a00254" local="yes">vanishingstrain.hh</includedby>
    <includedby refid="a00245" local="yes">vanishingstress.hh</includedby>
    <incdepgraph>
      <node id="13">
        <label>ikarus/assembler/dirichletbcenforcement.hh</label>
        <link refid="a00176"/>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>ikarus/finiteelements/mechanics/materials/tags.hh</label>
        <link refid="a00242"/>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>vanishinghelpers.hh</label>
        <link refid="a00248"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>ikarus/utils/concepts.hh</label>
        <link refid="a00047"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>ikarus/utils/makeenum.hh</label>
        <link refid="a00005"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>ikarus/utils/traits.hh</label>
        <link refid="a00011"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>Eigen/Dense</label>
      </node>
      <node id="11">
        <label>Eigen/Sparse</label>
      </node>
      <node id="12">
        <label>autodiff/forward/dual/dual.hpp</label>
      </node>
      <node id="5">
        <label>concepts</label>
      </node>
      <node id="15">
        <label>dune/common/exceptions.hh</label>
      </node>
      <node id="20">
        <label>dune/common/hybridutilities.hh</label>
      </node>
      <node id="9">
        <label>dune/functions/functionspacebases/basistags.hh</label>
      </node>
      <node id="10">
        <label>dune/functions/functionspacebases/lagrangebasis.hh</label>
      </node>
      <node id="18">
        <label>functional</label>
      </node>
      <node id="2">
        <label>ranges</label>
      </node>
      <node id="19">
        <label>tuple</label>
      </node>
      <node id="6">
        <label>type_traits</label>
      </node>
      <node id="7">
        <label>utility</label>
      </node>
      <node id="8">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="4">
        <label>linearelastic.hh</label>
        <link refid="a00284"/>
      </node>
      <node id="3">
        <label>materials.hh</label>
        <link refid="a02861"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>vanishinghelpers.hh</label>
        <link refid="a00248"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>vanishingstrain.hh</label>
        <link refid="a00254"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>vanishingstress.hh</label>
        <link refid="a00245"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>resultevaluators.hh</label>
        <link refid="a00326"/>
      </node>
      <node id="5">
        <label>material.hh</label>
        <link refid="a00218"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>_ikarus.cc</label>
        <link refid="a00347"/>
      </node>
      <node id="6">
        <label>materials.hh</label>
        <link refid="a02864"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innernamespace refid="a00384">Ikarus</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>SPDX-FileCopyrightText:<sp/>2021-2025<sp/>The<sp/>Ikarus<sp/>Developers<sp/>mueller@ibb.uni-stuttgart.de</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPDX-License-Identifier:<sp/>LGPL-3.0-or-later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ranges&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Eigen/Dense&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="a00047" kindref="compound">ikarus/utils/concepts.hh</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Ikarus::Impl<sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">MatrixIndexPair</highlight></codeline>
<codeline lineno="18"><highlight class="normal">{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/>Eigen::Index<sp/>row;<sp/></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/>Eigen::Index<sp/>col;<sp/></highlight></codeline>
<codeline lineno="21"><highlight class="normal">};</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size&gt;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">consteval</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>createfreeVoigtIndices(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::array&lt;MatrixIndexPair,<sp/>size&gt;&amp;<sp/>fixed)<sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>std::array&lt;size_t,<sp/>6<sp/>-<sp/>size&gt;<sp/>res{};</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>std::array&lt;size_t,<sp/>size&gt;<sp/>voigtFixedIndices;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>std::ranges::transform(fixed,<sp/>voigtFixedIndices.begin(),<sp/>[](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pair)<sp/>{<sp/>return<sp/>toVoigt(pair.row,<sp/>pair.col);<sp/>});</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>std::ranges::sort(voigtFixedIndices);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>std::ranges::set_difference(std::ranges::iota_view(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">(0),<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">(6)),<sp/>voigtFixedIndices,<sp/>res.begin());</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>std::ranges::sort(res);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="38"><highlight class="normal">}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size&gt;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keyword">consteval</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>createFixedVoigtIndices(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::array&lt;MatrixIndexPair,<sp/>size&gt;&amp;<sp/>fixed)<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>std::array&lt;size_t,<sp/>size&gt;<sp/>fixedIndices;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>std::ranges::transform(fixed,<sp/>fixedIndices.begin(),<sp/>[](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pair)<sp/>{<sp/>return<sp/>toVoigt(pair.row,<sp/>pair.col);<sp/>});</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>std::ranges::sort(fixedIndices);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fixedIndices;</highlight></codeline>
<codeline lineno="52"><highlight class="normal">}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size&gt;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>countDiagonalIndices(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::array&lt;MatrixIndexPair,<sp/>size&gt;&amp;<sp/>fixed)<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>v<sp/>:<sp/>fixed)<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v.col<sp/>==<sp/>v.row)</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++count;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>count;</highlight></codeline>
<codeline lineno="68"><highlight class="normal">}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Derived&gt;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">)<sp/>maybeFromVoigt(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::MatrixBase&lt;Derived&gt;&amp;<sp/>E)<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(Concepts::EigenVector&lt;Derived&gt;)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>receiving<sp/>vector<sp/>means<sp/>Voigt<sp/>notation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="a00380_1gadc8e9e9f3838d0392a5fcf1e11374ee9" kindref="member">fromVoigt</ref>(E.derived(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>E.derived();</highlight></codeline>
<codeline lineno="82"><highlight class="normal">}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Ikarus::Impl</highlight></codeline>
    </programlisting>
    <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/materials/vanishinghelpers.hh"/>
  </compounddef>
</doxygen>
